"file_time","event_type","actor_login","repo_name","created_at","updated_at","action","comment_id","body","path","position","line","ref","ref_type","creator_user_login","number","title","labels","state","locked","assignee","assignees","comments","author_association","closed_at","merged_at","merge_commit_sha","requested_reviewers","requested_teams","head_ref","head_sha","base_ref","base_sha","merged","mergeable","rebaseable","mergeable_state","merged_by","review_comments","maintainer_can_modify","commits","additions","deletions","changed_files","diff_hunk","original_position","commit_id","original_commit_id","push_size","push_distinct_size","member_login","release_tag_name","release_name","review_state"
"DateTime","Enum8('CommitCommentEvent' = 1, 'CreateEvent' = 2, 'DeleteEvent' = 3, 'ForkEvent' = 4, 'GollumEvent' = 5, 'IssueCommentEvent' = 6, 'IssuesEvent' = 7, 'MemberEvent' = 8, 'PublicEvent' = 9, 'PullRequestEvent' = 10, 'PullRequestReviewCommentEvent' = 11, 'PushEvent' = 12, 'ReleaseEvent' = 13, 'SponsorshipEvent' = 14, 'WatchEvent' = 15, 'GistEvent' = 16, 'FollowEvent' = 17, 'DownloadEvent' = 18, 'PullRequestReviewEvent' = 19, 'ForkApplyEvent' = 20, 'Event' = 21, 'TeamAddEvent' = 22)","LowCardinality(String)","LowCardinality(String)","DateTime","DateTime","Enum8('none' = 0, 'created' = 1, 'added' = 2, 'edited' = 3, 'deleted' = 4, 'opened' = 5, 'closed' = 6, 'reopened' = 7, 'assigned' = 8, 'unassigned' = 9, 'labeled' = 10, 'unlabeled' = 11, 'review_requested' = 12, 'review_request_removed' = 13, 'synchronize' = 14, 'started' = 15, 'published' = 16, 'update' = 17, 'create' = 18, 'fork' = 19, 'merged' = 20)","UInt64","String","String","Int32","Int32","LowCardinality(String)","Enum8('none' = 0, 'branch' = 1, 'tag' = 2, 'repository' = 3, 'unknown' = 4)","LowCardinality(String)","UInt32","String","Array(LowCardinality(String))","Enum8('none' = 0, 'open' = 1, 'closed' = 2)","UInt8","LowCardinality(String)","Array(LowCardinality(String))","UInt32","Enum8('NONE' = 0, 'CONTRIBUTOR' = 1, 'OWNER' = 2, 'COLLABORATOR' = 3, 'MEMBER' = 4, 'MANNEQUIN' = 5)","DateTime","DateTime","String","Array(LowCardinality(String))","Array(LowCardinality(String))","LowCardinality(String)","String","LowCardinality(String)","String","UInt8","UInt8","UInt8","Enum8('unknown' = 0, 'dirty' = 1, 'clean' = 2, 'unstable' = 3, 'draft' = 4, 'blocked' = 5)","LowCardinality(String)","UInt32","UInt8","UInt32","UInt32","UInt32","UInt32","String","UInt32","String","String","UInt32","UInt32","LowCardinality(String)","String","String","Enum8('none' = 0, 'approved' = 1, 'changes_requested' = 2, 'commented' = 3, 'dismissed' = 4, 'pending' = 5)"
"2024-03-28 14:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-03-28 14:59:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-28 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz-embedded","2024-03-28 13:27:31","1970-01-01 00:00:00","none",0,"","",0,0,"github_files","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-26 12:09:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-26 12:11:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,0,"","","","none"
"2024-03-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-25 17:08:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/github_files","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-25 16:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2024-03-25 16:47:59","1970-01-01 00:00:00","none",0,"","",0,0,"github_files","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 14:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 14:40:30","1970-01-01 00:00:00","none",0,"","",0,0,"v20240322","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-22 14:54:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-22 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-22 14:56:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-22 14:00:00","ReleaseEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 14:51:38","1970-01-01 00:00:00","published",0,"Notable changes since last release (20240124):

- Switched to the BSD Zero Clause License. Prior versions of the files and releases remain in the public domain.

- Added RISC-V filter support.

- Updates to `xz_wrap.sh`:

    * The dictionary size was increased from 32 MiB to 128 MiB

    * Architecture specific LZMA2 compression settings are now used, typically resulting in 0-2% improvement.

    * ARM64, RISC-V, and ARM-Thumb BCJ filters are now used when compressing those kernel images.

    * Single threaded mode is explicitly used now because XZ Utils 5.6.0 and later uses multi threaded mode by default.

- Optimized BCJ decoder loop conditions for slightly better speed.

- Changed the userspace Makefile to use C11 instead of C89.

- Updated documentation.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v20240322","XZ Embedded 20240322","none"
"2024-03-22 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 12:23:35","1970-01-01 00:00:00","none",0,"","",0,0,"userspace_misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 12:15:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/userspace_misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 12:23:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2024-03-22 11:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 11:48:30","1970-01-01 00:00:00","none",0,"","",0,0,"userspace_misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 11:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-22 11:36:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-19 11:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-19 11:47:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-13 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-13 16:12:30","2024-03-13 16:12:28","created",1994829182,"> I just updated the demo pipeline to ""somewhat complete"" state that suffices my own purposes:
> 
> * 4 Build Configuration with Visual Studio 2022 (x64 MSVC, x86 MSVC, x64 Clang-cl, x86 Clang-cl)
> * execution of the test executables
> * publishing of xz.exe and co (disabled per default)

This will be really helpful to include since for now I just test things locally on a VM with x64 MSVC. Automating this plus extending coverage will save me some effort :)

> Well, I'm neither familiar with github actions nor with windows batch (nor powershell). But I stuck to the ""out of the box"" tools for better compatibility with VS2022/Windows only setups.

I haven't worked much with Windows Batch scripting or PowerShell either :/
At a glance what you have makes sense but I will play around with it a bit.

> > The existing CI tests likely need a bit of a clean up anyway
> 
> I found 13 test-executables (test_*.exe). I added calls to those in `build-with-vs2022.bat` and to the pipeline. Not sure if there is a way to standardise test-execution over all platforms w/o rewriting the tests to some test-framework?

We currently just use the built-in test harnesses for our Autotools and CMake builds. The way you have it now seems logical, to just loop through the test executables and run them, although the best way to report the errors may need to be looked at. Maybe this is something we could add to `tuktest.h`, but at the moment I'm not sure how it would fit in.

> > We don't have plans for using CI for releases.
> 
> OK. To be honest, Windows releases for v5.6.x is what brought me here at the first place :-)

We had another recent request for Windows binaries, so we will more seriously consider this. We need to verify there are no license restrictions preventing us from distributing Windows binaries with the compiler we choose to use (MinGW-w64, MSVC, Clang-cl, etc.). Also, I would probably want to generate the Windows binaries locally instead of relying on GitHub runners. The GitHub CI runners are a common attack surface these days so it could be an extra risk. Currently, we only use CI for testing so if the GitHub runners are compromised then its not a security threat. 

> I'm more than happy to create PRs, adapt the scripts to the projects needs and clean things up as required. Feel also free to grab what you need.

I cloned your fork already, so no need to make a PR unless you want to. I suppose it could be helpful to keep the conversation focused on various parts of the code. We usually don't merge PRs directly anyway. Instead we usually take commits we like and adapt the other parts as needed. Don't worry, you'll still be the Author on any commits that are mostly unchanged :)
","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",16,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-13 15:50:19","2024-03-13 15:50:18","created",1994743011,"> I was also surprised that `#pragma routine novector` made the difference for `delta_decode`, which does not have a loop. It might have to do with the `restrict`. I haven't dug deeper.

Its likely the call to `decode_buffer()` is being inlined, so that could be why some sort of vectorization is happening. 

> The problems in `delta_decoder.c` and `range_decoder.h` have not been reported yet.

Does NVHPC support any kind of inline assembly, or is there something we are using that specifically is a problem?

> We monitor several issues ([1](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L213-222), [2](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L245-253), [3](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L268-271)) in our project and I will let you know if anything changes.

Thanks!

","",0,0,"","none","JiaT75",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-13 14:44:50","2024-03-13 14:44:49","created",1994565554,"Hello! Thanks for reporting the inability to build on NVHPC and submitting the PR. The changes are minimal so supporting NVHPC seems worth the little bit of effort :)

I am curious why `#pragma routine novector` is needed in `delta_decoder.c` and not elsewhere. Has this bug been reported to the NVHPC developers?","",0,0,"","none","JiaT75",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-11 14:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2024-03-11 14:37:02","2024-03-11 14:37:02","closed",0,"### Describe the bug

    make  all-recursive
    make[1]: Entering directory '/Depot/jjj/xz-5.6.0'
    Making all in src
    make[2]: Entering directory '/Depot/jjj/xz-5.6.0/src'
    Making all in liblzma
    make[3]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    Making all in api
    make[4]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma/api'
    make[4]: Nothing to be done for 'all'.
    make[4]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma/api'
    make[4]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    make[4]: Nothing to be done for 'all-am'.
    make[4]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    make[3]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    Making all in xzdec
    make[3]: Entering directory '/Depot/jjj/xz-5.6.0/src/xzdec'
    gcc -DHAVE_CONFIG_H -I. -I../..  -DTUKLIB_GETTEXT=0 -I../../src/common -I../../src/liblzma/api -I../../lib  -pthread -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wshift-overflow=2 -Wstrict-overflow=3 -Walloc-zero -Wduplicated-cond -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wdate-time -Wsign-conversion -Wfloat-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -O2 -fPIC -fno-strict-overflow -Wno-error -MT xzdec-xzdec.o -MD -MP -MF .deps/xzdec-xzdec.Tpo -c -o xzdec-xzdec.o `test -f 'xzdec.c'     || echo './'`xzdec.c
    xzdec.c: In function ‘sandbox_enter’:
    xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
      329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
          |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
    xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
      349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
          |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
    make[3]: *** [Makefile:606: xzdec-xzdec.o] Error 1
    make[3]: Leaving directory '/Depot/jjj/xz-5.6.0/src/xzdec'
    make[2]: *** [Makefile:427: all-recursive] Error 1
    make[2]: Leaving directory '/Depot/jjj/xz-5.6.0/src'
    make[1]: *** [Makefile:597: all-recursive] Error 1
    make[1]: Leaving directory '/Depot/jjj/xz-5.6.0'
    make: *** [Makefile:487: all] Error 2


I can compile older xz releases fine by the way, on the same system, so 5.4.x, 
5.2.x. Not sure what changed.

My system is a custom built slackware; I recompiled most
things from source following mostly LFS/BLFS instructions.
xz 5.6.x is not yet appearing on LFS, so I just poke in the
dark here really.

glibc is 2.33, gcc is 11.4.0.

### Version

5.6.0

### Operating System

linux

### Relevant log output

_No response_","",0,0,"","none","rubyFeedback",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","closed",0,"","[]",9,"NONE","2024-03-11 14:37:01","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-09 12:00:46","2024-03-09 12:00:45","created",1986837085,"Thanks @ndu2 for doing some benchmarking and the demo pipeline! I hadn't forgotten about this but we had higher priority things to work on instead. MSVC support for xz is still fairly recent, so adding it to the CI pipeline would be great. I'll take a look at your demo pipeline hopefully soon :)

The existing CI tests likely need a bit of a clean up anyway, some parts were written hastily by me. They have proven to be great for catching bugs though. We don't have plans for using CI for releases.

The assembly code is only for decoding so that explains your results. Using larger test files may help be sure that the results aren't due to noise.","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",14,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 10:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-03-09 10:40:57","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6.1","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 10:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-09 10:46:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-09 10:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-03-09 10:44:38","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.6.1 (2024-03-09)

    * liblzma: Fixed two bugs relating to GNU indirect function (IFUNC)
      with GCC. The more serious bug caused a program linked with
      liblzma to crash on start up if the flag -fprofile-generate was
      used to build liblzma. The second bug caused liblzma to falsely
      report an invalid write to Valgrind when loading liblzma.

    * xz: Changed the messages for thread reduction due to memory
      constraints to only appear under the highest verbosity level.

    * Build:

        - Fixed a build issue when the header file <linux/landlock.h>
          was present on the system but the Landlock system calls were
          not defined in <sys/syscall.h>.

        - The CMake build now warns and disables NLS if both gettext
          tools and pre-created .gmo files are missing. Previously,
          this caused the CMake build to fail.

    * Minor improvements to man pages.

    * Minor improvements to tests.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.6.1","XZ Utils 5.6.1 Stable","none"
"2024-03-09 09:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-03-09 09:36:25","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 09:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-09 09:51:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-03-08 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-08 12:06:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-07 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-07 17:44:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-05 10:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-03-05 10:18:48","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-04 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 17:14:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 17:40:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 17:55:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 16:49:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-03-04 15:01:19","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-02 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:18:34","2024-03-02 13:18:33","created",1974795263,"Thanks for the benchmarking numbers, those easily justify including this feature :)

> Some low-end 64-bit LoongArch CPUs (2K1000 for example) do not support unaligned access, on these CPUs unaligned access will trap and be emulated by the kernel (very slow). So we have to adjust the alignment anyway... I don't have a 2K1000 board for testing though, on my board (3A6000) the alignment adjustment only produces ~1% improvement.

If there are LoongArch CPUs that do not support unaligned access, that is plenty reason to have the code to align the buffer. Thanks for the info!

","",0,0,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",9,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:23:56","2024-03-02 13:23:56","created",1509965809,"It looks like the `target_compile_definitions(liblzma PRIVATE HAVE_LOONGARCH_CRC32)` was accidentally omitted during the simplification. Can this be added back?","CMakeLists.txt",32,1180,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1157,29 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            // As at now only 64-bit LoongArch is supported.
+            #if !(defined(__loongarch__) && __loongarch_grlen >= 64)
+            #   error LoongArch CRC32 only supported on 64-bit LoongArch
+            #endif
+
+            #include <larchintrin.h>
+
+            int my_crc(int word, int crc)
+            {
+                return __crc_w_w_w(word, crc);
+            }
+            int main(void) { return 0; }
+        ""
+        HAVE_LOONGARCH_CRC32)",32,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:01","2024-03-02 13:32:01","created",1509966960,"We don't use variables starting with ""_"" since these type of identifiers are reserved. So perhaps `_crc` could be renamed as `crc_unsigned` or `crc_param` or something better that you can think of :)","src/liblzma/check/crc32_loongarch.h",19,19,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)",19,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:48","2024-03-02 13:32:48","created",1509967076,"Thanks for remembering this! I had forgotten this was needed in the first round of review","src/liblzma/check/crc32_table.c",12,36,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -26,9 +26,14 @@
 #	define ARM64_CRC32_NO_TABLE 1
 #endif
 
+#if defined(HAVE_LOONGARCH_CRC32)
+#	define LOONGARCH_CRC32_NO_TABLE 1
+#endif
+
 
 #if !defined(HAVE_ENCODERS) && (defined(X86_CLMUL_NO_TABLE) \
-		|| defined(ARM64_CRC32_NO_TABLE_))
+		|| defined(ARM64_CRC32_NO_TABLE_) \
+		|| defined(LOONGARCH_CRC32_NO_TABLE))",12,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-03-02 13:23:57","2024-03-02 13:23:56","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-02 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:02","2024-03-02 13:32:01","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-02 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:49","2024-03-02 13:32:48","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 17:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 17:35:39","2024-02-29 17:35:38","created",1971631816,"> I'll do it tomorrow.

Thanks!
 
> The specification says 64-bit LoongArch chips shall implement CRC32 instructions, but 32-bit LoongArch chips may lack them (though no 32-bit LoongArch chips have been launched as at now).

Ok that is great to know. I had not found any references to 32-bit LoongArch chips, so that makes sense. Is it likely that 32-bit chips will be made? Otherwise it will simplify things to just design the code for 64-bit LoongArch and not bother with the runtime checks at all. Future 32-bit LoongArch may need extra compiler flags or a function `__attribute__()` so the code wouldn't be able to work as-is anyway.","",0,0,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",6,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:33:20","2024-02-29 16:33:18","created",1971515848,"Hello! Thanks for the PR. Overall it looks like you did a great job with this.

Can you provide benchmarks to show the speed increase from this? Specifically, can you show one version with the alignment adjustment in `crc32_arch_optimized()` and one without? I just want to be sure the alignment adjustment code is worth it for LoongArch. It would be great to vary the input buffer size to see how the speed improvements scale.

Also, how necessary are the runtime detection checks? Are there LoongArch chips that do not have the CRC32 instruction? ","",0,0,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:34:27","2024-02-29 16:34:28","created",1507869290,"An extra newline is needed here to match the code style. It helps break up the different sections in this file.","configure.ac",3,395,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -393,6 +393,14 @@ AC_ARG_ENABLE([arm64-crc32], AS_HELP_STRING([--disable-arm64-crc32],
 		is detected.]),
 	[], [enable_arm64_crc32=yes])
 ",3,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:41:59","2024-02-29 16:41:59","created",1507879564,"`<stdint.h>` isn't needed in the feature test. It was used in the ARM64 feature test because `__crc32d()` parameters were expected to be `uint32_t` and `uint64_t` (and the return type is `uint32_t`).","configure.ac",34,1178,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1152,6 +1160,45 @@ AS_IF([test ""x$enable_arm64_crc32"" = xyes], [
 	AC_CHECK_FUNCS([getauxval elf_aux_info sysctlbyname])
 ])
 
+# LoongArch Intrinsics define CRC32 functions in larchintrin.h.
+# These are supported by at least GCC and Clang.
+AC_MSG_CHECKING([if LoongArch CRC32 instruction is usable])
+AS_IF([test ""x$enable_loongarch_crc32"" = xno], [
+	AC_MSG_RESULT([no, --disable-loongarch-crc32 was used])
+], [
+	# Set -Werror here because -Wimplicit-function-declaration was
+	# only a warning in GCC <= 13. This does not need to be done
+	# with CMake because tests will attempt to link and the error
+	# will be reported then.
+	OLD_CFLAGS=""$CFLAGS""
+	CFLAGS=""$CFLAGS -Werror""
+
+	AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+#include <larchintrin.h>
+#include <stdint.h>",34,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:44:51","2024-02-29 16:44:51","created",1507883948,"For the Autotools build, the `crc32_loongarch.h` file needs to be added to `src/liblzma/check/Makefile.inc`. Use `crc32_arm64.h` as an example of where to put it :)","configure.ac",1,1,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:46:10","2024-02-29 16:46:10","created",1507886079,"Same reason as `configure.ac`, this include isn't needed","CMakeLists.txt",12,1167,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1156,34 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            #include <larchintrin.h>
+            #include <stdint.h>",12,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:52:14","2024-02-29 16:52:15","created",1507894274,"Extra newline needed before this line for code style.","src/liblzma/check/crc32_loongarch.h",33,33,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t",33,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:55:33","2024-02-29 16:55:34","created",1507898651,"What is the name defined in `<sys/auxv.h>`? Just checking to be sure it doesn't conflict with this name. It would be better to only use the hardcoded value if the correct one from `<sys/auxv.h>` is not defined.","src/liblzma/check/crc32_loongarch.h",23,23,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)",23,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:02","2024-02-29 16:56:02","created",1507899271,"Extra newline needed here.","src/liblzma/check/crc32_loongarch.h",88,88,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)
+{
+	int32_t crc = (int32_t)~_crc;
+
+	// Align the input buffer because this was shown to be
+	// significantly faster than unaligned accesses.
+	const size_t align_amount = my_min(size,
+			(UNIT_SIZE - (uintptr_t)buf) & (UNIT_SIZE - 1));
+
+	if (align_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf++, crc);
+
+	if (align_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+#if UNIT_SIZE == 8
+	if (align_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	size -= align_amount;
+
+	// Process UNIT_SIZE bytes at a time. The end point is determined by
+	// ignoring the least significant log2(UNIT_SIZE) bits of size to ensure
+	// we do not process past the bounds of the buffer. This guarantees
+	// that limit is a multiple of UNIT_SIZE and is strictly less than size.
+	for (const uint8_t *limit = buf + (size & ~((size_t)UNIT_SIZE - 1));
+			buf < limit; buf += UNIT_SIZE)
+		crc = CRC_UNIT(buf, crc);
+
+	// Process the remaining bytes that are not 8 byte aligned.
+	const size_t remaining_amount = size & (UNIT_SIZE - 1);
+
+#if UNIT_SIZE == 8
+	if (remaining_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	if (remaining_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+	if (remaining_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf, crc);
+
+	return (uint32_t)~crc;
+}
+",88,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:54","2024-02-29 16:56:54","created",1507900586,"This comment needs updating to reference `UNIT_SIZE` instead of ""8"".","src/liblzma/check/crc32_loongarch.h",68,68,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)
+{
+	int32_t crc = (int32_t)~_crc;
+
+	// Align the input buffer because this was shown to be
+	// significantly faster than unaligned accesses.
+	const size_t align_amount = my_min(size,
+			(UNIT_SIZE - (uintptr_t)buf) & (UNIT_SIZE - 1));
+
+	if (align_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf++, crc);
+
+	if (align_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+#if UNIT_SIZE == 8
+	if (align_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	size -= align_amount;
+
+	// Process UNIT_SIZE bytes at a time. The end point is determined by
+	// ignoring the least significant log2(UNIT_SIZE) bits of size to ensure
+	// we do not process past the bounds of the buffer. This guarantees
+	// that limit is a multiple of UNIT_SIZE and is strictly less than size.
+	for (const uint8_t *limit = buf + (size & ~((size_t)UNIT_SIZE - 1));
+			buf < limit; buf += UNIT_SIZE)
+		crc = CRC_UNIT(buf, crc);
+
+	// Process the remaining bytes that are not 8 byte aligned.",68,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:34:28","2024-02-29 16:34:27","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:42:00","2024-02-29 16:41:59","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:44:52","2024-02-29 16:44:51","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:46:11","2024-02-29 16:46:10","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:52:15","2024-02-29 16:52:15","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:55:34","2024-02-29 16:55:34","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:03","2024-02-29 16:56:02","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:55","2024-02-29 16:56:54","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-28 16:07:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_memlimit_warnings","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-28 16:19:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-02-28 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-28 13:33:25","2024-02-28 13:33:24","created",1968993934,"Hello!

Thank you for the feature request. Currently, we do not have any official benchmark framework for any of the XZ projects. When we develop new features that require benchmarking data, we tend to collect the files with characteristics that best fit that feature (data type, size, entropy, etc.). Often times community members will also help us benchmark since they may have access to machines, data, or ideas that the maintainers do not.

As such, we do not have any plans for a more official, robust, and structured benchmark framework at this time. We unfortunately have a few high priority tasks to attend to first. Eventually, this could be a nice thing to have when we revisit encoder/decoder optimizations to make it easier for the community to help us test various ideas. We would likely maintain a separate repository for this so it could be useful for other .xz implementations.

If you have ideas on good ways to do this or bad things we should avoid, we are always open to suggestions :) . We probably wouldn't want to actually host the benchmark data ourselves due to storage requirements and potential file distribution copyright complexities, but a bring-your-own-data framework could be useful for people. Such a thing may already exist, so we would need to start by surveying what solutions other projects use for something like this. ","",0,0,"","none","JiaT75",83,"[Feature Request]: Is there a real-world benchmark for xz?","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-27 16:53:48","2024-02-27 16:53:47","created",1967105982,"Hello!

Thanks for the bug report. The cause of this is because in 5.6.0 we made the default compression mode multi threaded. By default, xz will try to use the number of cores to determine how many threads to use when compressing/decompressing. If there is not enough memory to support this many threads, it will reduce the number of threads. Showing this as a warning message made more sense before because multi threading was not the default.

To answer your question, the amount of memory required per thread with default options is the block size * 2 + LZMA2 dictionary size. Block size is determined by 3 * LZMA2 dictionary size or a minimum of 1 MiB. So the amount of memory you give to xz depends on how many threads you want to be used. More threads just means faster compression, not better compression ratio. For best compression ratio, use single threaded mode (`-T1`).

Another user reported this on the mailing list, so we already started considering different options. As a user, would you rather see the number of threads actually used in verbose mode (`-v`) or debug mode (`-vv`)? We are all in agreement that this message should not be displayed by default :)","",0,0,"","none","JiaT75",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-27 15:48:22","1970-01-01 00:00:00","none",0,"","",0,0,"xz_memlimit_warnings","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-27 12:24:36","2024-02-27 12:24:35","created",1966432482,"> any road map / time line, when a release containing the fix could be available?

We don't have an exact date yet for the next release (5.6.1) since we want to wait for more possible bug reports to come in. It should only be a few weeks though :)

For this problem, if you need to use the 5.6.0 release you can just add `--disable-sandbox` to the `configure` command. You will not be missing out on the sandbox feature unnecessarily because unfortunately your system cannot support this feature until your system call definitions include `SYS_landlock_create_ruleset` and `SYS_landlock_restrict_self`.","",0,0,"","none","JiaT75",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-02-27 12:29:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-26 15:11:55","1970-01-01 00:00:00","none",0,"","",0,0,"sandbox_build_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-26 15:30:21","2024-02-26 15:30:19","created",1964425025,"Added a [commit to master](https://github.com/tukaani-project/xz/commit/328c52da8a2bbb81307644efdb58db2c422d9ba7) for this. Let us know if this solves the problem!","",0,0,"","none","JiaT75",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2024-02-26 15:36:05","2024-02-26 15:36:04","closed",0,"## Pull request checklist

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
The RISC-V filter option should be listed in the man page but not.


## What is the new behavior?
List the RISC-V filter.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No


## Other information

The translation is not handled yet.
Currently running po4a/update-po upon commit 5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7 generates changes of over 455 lines and I'm sure sure if they are really needed. Plus, I'm not familiar with the po4a tools so help is needed. ","",0,0,"","none","ivq",87,"xz: Add missing RISC-V on the filter list in the man page","[]","closed",0,"","[]",1,"NONE","2024-02-26 15:36:04","2024-02-26 15:36:04","","[]","[]","fix_riscv_filter_doc","2a76c3dd1084561e819df9e3e6b1606fa0c79e0b","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","JiaT75",0,0,1,3,1,1,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 15:41:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 15:36:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-02-26 13:16:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-26 12:02:10","2024-02-26 12:02:09","created",1963984783,"This Issue was duplicated [here](https://github.com/tukaani-project/xz/issues/88), so you can follow that thread if you want more information about how we are addressing this :)","",0,0,"","none","JiaT75",84,"[Bug]:  5.6.0 build issue","['bug']","closed",0,"","[]",4,"NONE","2024-02-25 02:52:43","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 12:07:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 11:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-26 11:49:04","2024-02-26 11:49:03","created",1963960663,"Hello! Thanks for the bug report and build logs. Luckily, the workaround for this is very simple. With Autotools build, you can pass the flag `--disable-sandbox` to `configure`. With CMake, pass `-DENABLE_SANDBOX=OFF`.

The underlying problem here is that we assumed having the `linux/landlock.h` header file meant that the system would also have `SYS_landlock_create_ruleset` and `SYS_landlock_restrict_self` defined in `sys/syscall.h`. So the fix on our side is to add checks for these system calls before setting `HAVE_LINUX_LANDLOCK_H` during configurations. ","",0,0,"","none","JiaT75",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 11:57:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-25 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-25 13:41:03","1970-01-01 00:00:00","none",0,"","",0,0,"manpage_typo_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-25 13:41:06","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-25 13:42:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-25 03:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-25 03:28:00","2024-02-25 03:27:58","created",1962800073,"Hello!

I have seen this misconception before and I can understand where it is coming from. The short answer is that multi threaded compression mode is in fact deterministic.

It does not matter how many threads are used. @sam is correct, multi threaded encoding mode with 1 thread will produce the same as output as 10 threads. The output is *different* from single threaded mode, which is where the confusion happens. Single threaded mode does not put the block sizes in the headers and will put all of the data in a single block by default.

Setting -T0 will always use multi threaded mode. In the past, if only one thread was used in -T0 mode then it would operate in single threaded mode and thus produce single threaded output. So I believe that is where the non-determinstic belief originated from, since sometimes the output would be different when using -T0. This is no longer the case.

I hope this helps!","",0,0,"","none","JiaT75",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 11:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-24 11:19:45","2024-02-24 11:19:43","created",1962331872,"Thanks for the bug report! The problem here is that you do not have Gettext installed. 

`-- Could NOT find Gettext (missing: GETTEXT_MSGMERGE_EXECUTABLE GETTEXT_MSGFMT_EXECUTABLE) `

Perhaps we can create a better error message here, but if you do not have Gettext installed then you need to already have the .gmo files built. These are available in the source code releases, so you should be able to build from there instead of from the development repository.

There are several workarounds here. The best solution is to install Gettext on your CI runner. It appears your CI runner is Ubuntu, so adding a step:

```shell
apt install gettext
```

Otherwise, you can disable NLS by setting -DENABLE_NLS=OFF when configuring with CMake.

In CMakeLists.txt there is a bit of documentation about this in a comment near the beginning of the file:

```
# If building from xz.git instead of a release tarball, consider
# the following *before* running cmake:
#
#   - To get translated messages, install GNU gettext tools (the
#     command msgfmt is needed). Alternatively disable translations
#     by setting ENABLE_NLS=OFF.
#
#   - To get translated man pages, run po4a/update-po which requires
#     the po4a tool. The build works without this step too.
```

Let me know if you have further questions. I hope this helps!","",0,0,"","none","JiaT75",82,"[Bug]: cmake install fails with github mainline & 5.6.0","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 10:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-24 10:01:50","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6.0","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-24 10:09:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,1,"","","","none"
"2024-02-24 10:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-02-24 10:04:07","1970-01-01 00:00:00","published",0,"There currently are no plans to maintain the 5.4.x branch, but releases
could be made if there is community interest.

Here is an extract from the NEWS file:

```
5.6.0 (2024-02-24)

    This bumps the minor version of liblzma because new features were
    added. The API and ABI are still backward compatible with liblzma
    5.4.x and 5.2.x and 5.0.x.

    NOTE: As described in the NEWS for 5.5.2beta, the core components
    are now under the BSD Zero Clause License (0BSD).

    Since 5.5.2beta:

    * liblzma:

        - Disabled the branchless C variant in the LZMA decoder based
          on the benchmark results from the community.

        - Disabled x86-64 inline assembly on x32 to fix the build.

    * Sandboxing support in xz:

        - Landlock is now used even when xz needs to create files.
          In this case the sandbox is has to be more permissive than
          when no files need to be created. A similar thing was
          already in use with pledge(2) since 5.3.4alpha.

        - Landlock and pledge(2) are now stricter when reading from
          more than one input file and only writing to standard output.

        - Added support for Landlock ABI version 4.

    * CMake:

        - Default to -O2 instead of -O3 with CMAKE_BUILD_TYPE=Release.
          -O3 is not useful for speed and makes the code larger.

        - Now builds lzmainfo and lzmadec.

        - xzdiff, xzgrep, xzless, xzmore, and their symlinks are now
          installed. The scripts are also tested during ""make test"".

        - Added translation support for xz, lzmainfo, and the
          man pages.

        - Applied the symbol versioning workaround for MicroBlaze that
          is used in the Autotools build.

        - The general XZ Utils and liblzma API documentation is now
          installed.

        - The CMake component names were changed a little and several
          were added. liblzma_Runtime and liblzma_Development are
          unchanged.

        - Minimum required CMake version is now 3.14. However,
          translation support is disabled with CMake versions
          older than 3.20.

        - The CMake-based build is now close to feature parity with the
          Autotools-based build. Most importantly a few tests aren't
          run yet. Testing the CMake-based build on different operating
          systems would be welcome now. See the comment at the top of
          CMakeLists.txt.

    * Fixed a bug in the Autotools feature test for ARM64 CRC32
      instruction support for old versions of Clang. This did not
      affect the CMake build.

    * Windows:

        - The build instructions in INSTALL and windows/INSTALL*.txt
          were revised completely.

        - windows/build-with-cmake.bat along with the instructions
          in windows/INSTALL-MinGW-w64_with_CMake.txt should make
          it very easy to build liblzma.dll and xz.exe on Windows
          using CMake and MinGW-w64 with either GCC or Clang/LLVM.

        - windows/build.bash was updated. It now works on MSYS2 and
          on GNU/Linux (cross-compiling) to create a .zip and .7z
          package for 32-bit and 64-bit x86 using GCC + MinGW-w64.

    * The TODO file is no longer installed as part of the
      documentation. The file is out of date and does not reflect
      the actual tasks that will be completed in the future.

    * Translations:

        - Translated lzmainfo man pages are now installed. These
          had been forgotten in earlier versions.

        - Updated Croatian, Esperanto, German, Hungarian, Korean,
          Polish, Romanian, Spanish, Swedish, Vietnamese, and Ukrainian
          translations.

        - Updated German, Korean, Romanian, and Ukrainian man page
          translations.

    * Added a few tests.
   ```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.6.0","XZ Utils 5.6.0 Stable","none"
"2024-02-24 09:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-24 09:06:52","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-23 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-23 15:46:22","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_decoder_improvements","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-23 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-23 13:15:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,3,"","","","none"
"2024-02-23 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-23 13:14:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,1,"","","","none"
"2024-02-23 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-23 12:48:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-22 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 17:24:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.6_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-22 15:12:43","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 15:07:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 15:04:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 14:27:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 12:50:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 12:29:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,3,"","","","none"
"2024-02-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 12:24:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 11:52:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 17:43:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 16:58:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 16:57:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 16:37:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-21 14:37:25","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-20 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-20 16:33:10","1970-01-01 00:00:00","none",0,"","",0,0,"manpage_typo_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-20 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-20 15:33:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-20 13:14:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2024-02-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-17 17:14:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-17 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-17 14:31:24","2024-02-17 14:31:22","created",1950224184,"Omitting assembly from x86-32 is certainly much simpler than trying to adapt for it. Thanks for the PR! This is merged in master as e9053c907250c70d98b319d95fa54cb94fc76869. ","",0,0,"","none","JiaT75",80,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.","[]","closed",0,"","[]",1,"CONTRIBUTOR","2024-02-17 14:31:22","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-17 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2024-02-17 14:31:23","2024-02-17 14:31:22","closed",0,"The x32 port has a x86-64 ABI in term of all registers but uses only 32bit pointer like x86-32. The assembly optimisation fails to compile on x32. Given the state of x32 I suggest to exclude it from the optimisation rather than trying to fix it.

## Pull request type

Please check the type of change your PR introduces:
- [X] Bugfix

## What is the current behavior?
https://buildd.debian.org/status/fetch.php?pkg=xz-utils&arch=x32&ver=5.5.2beta-1&stamp=1708036388&raw=0

```
In file included from ../../../../src/liblzma/lzma/lzma_decoder.c:17:
In function ‘lzma_decode’,
    inlined from ‘lzma_decode’ at ../../../../src/liblzma/lzma/lzma_decoder.c:235:1:
../../../../src/liblzma/rangecoder/range_decoder.h:644:9: error: invalid 'asm': operand is not a condition code, invalid operand code 'c'
  644 |         __asm__( \
      |         ^~~~~~~
../../../../src/liblzma/rangecoder/range_decoder.h:671:9: note: in expansion of macro ‘rc_asm_bittree_n’
  671 |         rc_asm_bittree_n(probs_base_var, final_add, \
      |         ^~~~~~~~~~~~~~~~
../../../../src/liblzma/lzma/lzma_decoder.c:75:17: note: in expansion of macro ‘rc_bittree3’
   75 |                 rc_bittree3(ld.low[pos_state], \
      |                 ^~~~~~~~~~~
../../../../src/liblzma/lzma/lzma_decoder.c:421:25: note: in expansion of macro ‘len_decode_fast’
  421 |                         len_decode_fast(len, coder->match_len_decoder,
      |                         ^~~~~~~~~~~~~~~
../../../../src/liblzma/rangecoder/range_decoder.h:644:9: error: invalid 'asm': operand is not a condition code, invalid operand code 'c'
…
```



## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","sebastianas",80,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.","[]","closed",0,"","[]",1,"CONTRIBUTOR","2024-02-17 14:31:22","1970-01-01 00:00:00","","[]","[]","x32","92228b3c74d97643ded809baa01448a8905c9625","master","711e22d5c5f3bac39ac904efb3ede874a66e2045",0,0,0,"dirty","",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2024-02-17 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-17 13:13:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-02-16 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-16 14:55:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-15 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-15 14:28:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 18:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-14 18:05:56","1970-01-01 00:00:00","none",0,"","",0,0,"v5.5.2beta","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-14 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-14 18:25:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 18:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-02-14 18:19:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 18:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-02-14 18:13:29","1970-01-01 00:00:00","published",0,"This is the first release made under the 0BSD license. Please let us
know if there are any concerns about the license change. We are looking
forward to releasing 5.6.0 later this month!

```
5.5.2beta (2024-02-14)

    * Licensing change: The core components are now under the
      BSD Zero Clause License (0BSD). In XZ Utils 5.4.6 and older
      and 5.5.1alpha these components are in the public domain and
      obviously remain so; the change affects the new releases only.

      0BSD is an extremely permissive license which doesn't require
      retaining or reproducing copyright or license notices when
      distributing the code, thus in practice there is extremely
      little difference to public domain.

    * liblzma

        - Significant speed optimizations to the LZMA decoder were
          made. There are now three variants that can be chosen at
          build time:

            * Basic C version: This is a few percent faster than
              5.4.x due to some new optimizations.

            * Branchless C: This is currently the default on platforms
              for which there is no assembly code. This should be a few
              percent faster than the basic C version.

            * x86-64 inline assembly. This works with GCC and Clang.

          The default choice can currently be overriden by setting
          LZMA_RANGE_DECODER_CONFIG in CPPFLAGS: 0 means the basic
          version and 3 means that branchless C version.

        - Optimized the CRC32 calculation on ARM64 platforms using the
          CRC32 instructions. The instructions are optional in ARMv8.0
          and are required in ARMv8.1 and later. Runtime detection for
          the instruction is used on GNU/Linux, FreeBSD, Windows, and
          macOS. If the compiler flags indicate unconditional CRC32
          instruction support (+crc) then the generic version is not
          built.

    * Added lz4 support to xzdiff/xzcmp and xzgrep.

    * Man pages of xzdiff/xzcmp, xzgrep, and xzmore were rewritten
      to simplify licensing of the man page translations.

    * Translations:

        - Updated Chinese (simplified), German, Korean, Polish,
          Romanian, Spanish, Swedish, and Ukrainian translations.

        - Updated German, Korean, Romanian, and Ukrainian man page
          translations.

    * Small improvements to the tests.

    * Added doc/examples/11_file_info.c. It was added to the Git
      repository in 2017 but forgotten to be added into distribution
      tarballs.

    * Removed doc/examples_old. These were from 2012.

    * Removed the macos/build.sh script. It had not been updated
      since 2013.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.5.2beta","XZ Utils 5.5.2 Beta","none"
"2024-02-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-13 15:34:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-12 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-12 17:57:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-12 12:00:00","DeleteEvent","JiaT75","JiaT75/oss-fuzz","2024-02-12 12:43:14","1970-01-01 00:00:00","none",0,"","",0,0,"xz_java_homepage_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-12 12:00:00","DeleteEvent","JiaT75","JiaT75/oss-fuzz","2024-02-12 12:43:38","1970-01-01 00:00:00","none",0,"","",0,0,"xz_homepage_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","CreateEvent","JiaT75","JiaT75/oss-fuzz","2024-02-10 16:08:51","1970-01-01 00:00:00","none",0,"","",0,0,"xz_homepage_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","CreateEvent","JiaT75","JiaT75/oss-fuzz","2024-02-10 16:12:29","1970-01-01 00:00:00","none",0,"","",0,0,"xz_java_homepage_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","DeleteEvent","JiaT75","JiaT75/oss-fuzz","2024-02-10 16:03:24","1970-01-01 00:00:00","none",0,"","",0,0,"xz_java_integration","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","PullRequestEvent","JiaT75","google/oss-fuzz","2024-02-10 16:10:54","2024-02-10 16:10:52","opened",0,"The homepage for XZ projects changed recently. The old URLs redirect to the new ones so nothing has been broken :)","",0,0,"","none","JiaT75",11587,"xz: Update project homepage.","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xz_homepage_update","8f657feca81a60fff20f1509ff93b41e2a817599","master","7ded07cf14835bde0e7bd1a169b1b5468b788bf3",0,0,0,"unknown","",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","PullRequestEvent","JiaT75","google/oss-fuzz","2024-02-10 16:13:09","2024-02-10 16:13:07","opened",0,"","",0,0,"","none","JiaT75",11588,"xz-java: Update project homepage.","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xz_java_homepage_update","c68ae693be64b794ebe0d0640bed2957c87b3fb9","master","7ded07cf14835bde0e7bd1a169b1b5468b788bf3",0,0,0,"unknown","",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2024-02-10 16:01:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",106,106,"","","","none"
"2024-02-09 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-09 12:09:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-08 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-08 12:10:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-07 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-07 14:04:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-02-01 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-01 17:42:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-01 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-01 12:57:09","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_crc32","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-01 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2024-02-01 12:52:50","2024-02-01 12:52:49","closed",0,"The CRC32 instructions in ARM64 can calculate the CRC32 result for 8 bytes in a single operation, making the use of ARM64 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if ARM64 has CRC extension running on Linux.

## Pull request checklist

Please check if your PR fulfills the following requirements:

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:

- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?

<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?

<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Enable optimized CRC32 algorithm if ARM64 support CRC extension.
  -
  -

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

Benchmark data will be updated soon","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","closed",0,"","[]",19,"NONE","2024-02-01 12:52:49","1970-01-01 00:00:00","","[]","[]","master","fa5257f38f779632ffc35b210562d51b767e30e5","master","fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b",0,0,0,"unknown","",0,0,1,130,9,6,"",0,"","",0,0,"","","","none"
"2024-02-01 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-01 12:24:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-31 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 17:45:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 16:41:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 16:24:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 16:04:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-31 15:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2024-01-31 15:30:34","2024-01-31 15:30:33","closed",0,"### Describe the bug

After updating to v5.2.12 it seems --disable-assembler flag is not fully affecting liblzma  

compiler is not standard but for this case it can be considered as clang, also tried v5.2.11 and it's working fine so I'm guessing it must be a configuration changes between these two versions

### Version

v5.2.12

### Operating System

docker/ubuntu:jammy

### Relevant log output

```shell
22.71 make[3]: Entering directory '/opt/xz-5.2.12/src/liblzma'
22.71 /bin/bash ../../libtool  --tag=CC   --mode=compile /emsdk/upstream/emscripten/emcc -DHAVE_CONFIG_H -I. -I../..  -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -I/usr/local/include/ -I/opt/zlib-1.3 -I/opt/bzip2-1.0.8 -I/opt/openssl-1.0.2s/include -I/opt/openssl-1.0.2s/test -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT liblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c -o liblzma_la-common.lo `test -f 'common/common.c' || echo './'`common/common.c
22.76 libtool: compile:  /emsdk/upstream/emscripten/emcc -DHAVE_CONFIG_H -I. -I../.. -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -I/usr/local/include/ -I/opt/zlib-1.3 -I/opt/bzip2-1.0.8 -I/opt/openssl-1.0.2s/include -I/opt/openssl-1.0.2s/test -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT liblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c common/common.c  -fPIC -DPIC -o .libs/liblzma_la-common.o
22.87 <inline asm>:1:1: error: unknown directive
22.87     1 | .symver lzma_get_progress_522,lzma_get_progress@XZ_5.2.2
22.87       | ^
22.87 <inline asm>:2:1: error: unknown directive
22.87     2 | .symver lzma_get_progress_52,lzma_get_progress@@XZ_5.2
22.87       | ^
22.89 2 errors generated.
```
","",0,0,"","none","nika-begiashvili",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","closed",0,"","[]",3,"NONE","2024-01-31 15:30:33","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-31 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-31 12:02:59","2024-01-31 12:02:57","created",1918972334,"> ```
> for (buf_end = ((size - align_amount) - 8) + buf; buf < buf_end;
> 		buf += 8)
> ```
> 
> I suspect that `clang -fsanitize=undefined` will complain at runtime. If `size` equals 1 and `align_amount` equals 0 or 1, it ends up calculating `buf - 8` or `buf - 7`. That is, the pointer arithmetic may go beyond the beginning of the buffer, which the C standard doesn't allow (but one element past the end is allowed).
> 
> Although it should work in practice on ARM64 (unless the buffer is at a weird address where the address would overflow but that's unlikely), I think it should be possible to avoid the problem without a performance penalty.

Thanks for pointing this out! I pushed a new version to avoid pointer arithmetic beyond the beginning of the buffer. I also added macOS support, but I couldn't test it since I do not have an Apple device. The Apple specific code is small so it should work but I hope someone can test this.","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",19,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-31 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 11:54:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-30 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-30 12:51:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-29 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-29 13:50:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",95,14,"","","","none"
"2024-01-29 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-29 12:08:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-27 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-27 16:05:38","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_crc32","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-27 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-27 16:20:00","2024-01-27 16:19:58","created",1913236380,"@parheliamm @hansjans162 Thank you for your patience on this review. We had a few other things we were focusing on (new website, release, etc.). I promise I did not forget about this :)

I created a [branch](https://github.com/tukaani-project/xz/tree/arm64_crc32) with some additions to this PR that will also be helpful for the CRC64 CLMUL. The extent of the edits should be clear from the commit messages and code changes, but let me know if you have questions about the changes.

Can you both test this on your hardware to be sure it works correctly (and is still fast)? I was able to cross-compile it with GCC, Clang, and MSVC but I do not have an ARM64 device so I have not run the code. Thanks!","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",15,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-27 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-27 16:12:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-26 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-26 13:01:14","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-26 12:13:01","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4.6","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-26 12:13:18","1970-01-01 00:00:00","none",0,"","",0,0,"v5.5.1alpha","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-26 12:11:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-26 12:11:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",24,2,"","","","none"
"2024-01-26 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-26 12:27:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-26 12:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-01-26 12:16:54","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.5.1alpha (2024-01-26)

    * Added a new filter for RISC-V binaries. The filter can be used
      for 32-bit and 64-bit binaries with either little or big
      endianness. In liblzma, the Filter ID is LZMA_FILTER_RISCV (0x0B)
      and the xz option is --riscv. liblzma filter string syntax
      recognizes this filter as ""riscv"".

    * liblzma:

        - Added lzma_mt_block_size() to recommend a Block size for
          multithreaded encoding

        - Added CLMUL-based CRC32 on x86-64 and E2K with runtime
          processor detection. Similar to CRC64, on 32-bit x86 it
          isn't available unless --disable-assembler is used.

        - Implemented GNU indirect function (IFUNC) as a runtime
          function dispatching method for CRC32 and CRC64 fast
          implementations on x86. Only GNU/Linux (glibc) and FreeBSD
          builds will use IFUNC, unless --enable-ifunc is specified to
          configure.

        - Added definitions of mask values like
          LZMA_INDEX_CHECK_MASK_CRC32 to <lzma/index.h>.

        - The XZ logo is now included in the Doxygen generated
          documentation. It is licensed under Creative Commons
          Attribution-ShareAlike 4.0.

    * xz:

        - Multithreaded mode is now the default. This improves
          compression speed and creates .xz files that can be
          decompressed multithreaded at the cost of increased memory
          usage and slightly worse compression ratio.

        - Added new command line option --filters to set the filter
          chain using liblzma filter string syntax.

        - Added new command line options --filters1 ... --filters9 to
          set additional filter chains using liblzma filter string
          syntax. The --block-list option now allows specifying filter
          chains that were set using these new options.

        - Added support for Linux Landlock as a sandboxing method.

        - xzdec now supports pledge(2), Capsicum, and Linux Landlock as
          sandboxing methods.

        - Progress indicator time stats remain accurate after pausing
          xz with SIGTSTP.

        - Ported xz and xzdec to Windows MSVC. Visual Studio 2015 or
          later is required.

    * CMake Build:

        - Supports pledge(2), Capsicum, and Linux Landlock sandboxing
          methods.

        - Replacement functions for getopt_long() are used on platforms
          that do not have it.

    * Enabled unaligned access by default on PowerPC64LE and on RISC-V
      targets that define __riscv_misaligned_fast.

    * Tests:

        - Added two new fuzz targets to OSS-Fuzz.

        - Implemented Continuous Integration (CI) testing using
          GitHub Actions.

    * Changed quoting style from `...' to '...' in all messages,
      scripts, and documentation.

    * Added basic Codespell support to help catch typo errors.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.5.1alpha","XZ Utils 5.5.1 Alpha","none"
"2024-01-26 12:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-01-26 12:22:12","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.4.6 (2024-01-26)

    * Fixed a bug involving internal function pointers in liblzma not
      being initialized to NULL. The bug can only be triggered if
      lzma_filters_update() is called on a LZMA1 encoder, so it does
      not affect xz or any application known to us that uses liblzma.

    * xz:

        - Fixed a regression introduced in 5.4.2 that caused encoding
          in the raw format to unnecessarily fail if --suffix was not
          used. For instance, the following command no longer reports
          that --suffix must be used:

              echo foo | xz --format=raw --lzma2 | wc -c

        - Fixed an issue on MinGW-w64 builds that prevented reading
          from or writing to non-terminal character devices like NUL.

    * Added a new test.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.6","XZ Utils 5.4.6 Stable","none"
"2024-01-25 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-25 16:39:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-24 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-24 17:49:57","1970-01-01 00:00:00","none",0,"","",0,0,"xz_logo_doxygen","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:49:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,0,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:39:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:32:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:21:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:07:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-01-24 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 16:19:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-24 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 16:16:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-01-24 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-24 15:47:44","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 14:32:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",34,4,"","","","none"
"2024-01-24 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-24 12:12:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-24 12:00:00","ReleaseEvent","JiaT75","tukaani-project/xz-embedded","2024-01-24 12:12:58","1970-01-01 00:00:00","published",0,"Notable changes since last release (20210201):

    - Added ARM64 filter support.

    - Added MicroLZMA decoder support. The MicroLZMA format does not
      support BCJ filters.

    - Added xz_dec_catrun() to support concatenated .xz files. To
      include this function, XZ_DEC_CONCATENATED must be defined in
      xz_config.h or in the compiler flags.

    - Updated website URL and contact email address.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v20240124","XZ Embedded 20240124","none"
"2024-01-23 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-23 16:41:24","1970-01-01 00:00:00","none",0,"","",0,0,"riscv_filter","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-23 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-23 15:17:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2024-01-23 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-23 15:57:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-23 14:18:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-23 12:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2024-01-23 12:56:35","2024-01-23 12:56:35","none",137636490,"A small description of the chart could be useful. It took me longer than I would like to admit to realize that the shift amount is row2 - row3. Also someone less familiar with the spec could look at this and be confused","src/liblzma/simple/riscv.c",31,390,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"58d6e5551a1a8fd71600552e9cfe319310d57fa5","",0,0,"","","","none"
"2024-01-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-22 15:34:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-22 12:06:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",13,8,"","","","none"
"2024-01-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-19 15:09:41","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz-embedded","2024-01-19 15:40:16","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz-java","2024-01-19 15:24:47","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-01-19 15:42:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-19 15:58:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-01-19 15:39:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-01-19 15:17:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-19 15:08:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-19 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-19 14:43:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-19 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-19 14:17:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-19 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-19 14:32:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-01-19 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-19 12:18:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-18 13:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-01-18 13:16:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-18 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-18 12:51:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-17 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-17 12:29:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-17 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-17 12:41:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-17 12:00:00","WatchEvent","JiaT75","tukaani-project/xz-java","2024-01-17 12:10:43","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-16 14:00:00","WatchEvent","JiaT75","madler/zlib","2024-01-16 14:08:14","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-16 13:31:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-16 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-16 13:20:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-01-16 12:08:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-16 12:10:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",25,4,"","","","none"
"2024-01-15 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-15 17:41:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-15 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-15 14:42:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-15 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz-java","2024-01-15 13:41:37","2024-01-15 13:41:36","created",1892199500,"Hello! Thanks for the detailed bug report.

The issue here is that the failing ""sample"" encoding has the uncompressed size set in the header (0x6) and also uses an End of Payload Marker. This was originally done intentionally since XZ Utils also rejected such files until 5.2.6, when it was noticed that LZMA SDK (the 7-Zip implementation) allows such files and is documented to do so. If you test this file on xz <= 5.2.5, then it should also reject this file.

So XZ for Java needs to support these files as well and we will keep this Issue open until that is added. Thanks for bringing this to our attention!","",0,0,"","none","JiaT75",8,"[Bug]: Decompression with xz-java results in CorruptedInputException, while decompression with xz works just fine","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-13 16:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 16:01:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 15:45:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 15:33:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 13:19:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-12 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-12 14:29:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-11 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-11 17:16:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-11 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-11 14:05:33","2024-01-11 14:05:31","created",1887228657,"@hansjans162 Thanks for continuing your work on ARM64 CLMUL! Your benchmarks so far sound promising and will likely be a great value to liblzma. We look forward to seeing the code and further benchmarks when they are ready :)

It sounds like runtime checks will be needed, but please let us know if anyone finds reasons to contradict this.

We did a refactor to the existing CRC related files for code organization and small optimization related reasons. This change means that architecture specific CRC optimizations should go into header files that are included in the corresponding crc32/64_fast.c file. The reasons for this are best explained in the commit message [here](https://github.com/tukaani-project/xz/commit/419f55f9dfc2df8792902b8953d50690121afeea).

Based on the refactor, @parheliamm, please put your changes into `crc32_arm64.h`, then include that header file in `crc32_fast.c`. 

Similarly, Hans please refactor what you have to create `crc64_arm64.h` with your CRC64 CLMUL work (and include this file in `crc64_fast.c`). You are likely still blocked until this PR is complete since the build changes and runtime checks should be coordinated between the branches. Feel free to send us a link to your branch whenever you have something ready that you want to show us :)

We apologize for the refactor after this was already submitted, but this PR helped inform that refactor (and gave us the needed motivation to close out the branch). Thank you everyone so far for you patience and your contributions so far!

","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-10 13:00:00","WatchEvent","JiaT75","google/cpu_features","2024-01-10 13:06:10","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-10 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-10 12:12:53","2024-01-10 12:12:51","created",1884735121,"> > `getauxval` is a libc function (not inline) so it's unsafe to combine it with ifunc. That is, ifunc would need to stay disabled on ARM64.
> 
> Try to fix in the next push.
> 
> > Are ARM64 processors without CRC32 common enough that runtime detection is worth it? Even they are, `#ifdef __ARM_FEATURE_CRC32` could be used at compile time to detect if CRC32 can be assumed to be supported.
> 
> ""crc"" is a part of ARMv8.1 feature. To make all armv8 processors happy, it need to detect the processor feature on runtime.
> 
> > The crc_edits branch is still under consideration so that may change where the code will go, possibly making things simpler.

Hello! Thanks for the PR. The point about not needing runtime detection likely needs more research. From a quick search, my understanding is that CRC32 instruction is optional in armv8.0 and required in ARMv8.1. So if all processors in practice actually supported CRC32 in armv8.0, then it will really simplify this feature since the runtime detection adds significant complexity. The runtime detection likely requires avoiding ifunc and having different versions based on the platform (`getauxval()`, `IsProcessorFeaturePresent()`, etc).

A note on compile time detection: __ARM_FEATURE_CRC32 isn't supported by MSVC so we will need another way to detect CRC32 instruction support there.","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-09 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-09 12:46:06","1970-01-01 00:00:00","none",0,"","",0,0,"xz_logo_doxygen","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-08 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-08 15:11:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,8,"","","","none"
"2024-01-08 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-08 13:44:08","2024-01-08 13:44:06","created",1881035084,"Thanks for sharing your Dockerfile. The reason that 5.2.11 ""works"" is because there was a bug when disabling threads. See [this issue](https://github.com/tukaani-project/xz/issues/45). The bug was fixed in 5.2.12, so with your `configure` options you are building shared libraries again. So you can use `--disable-shared` instead of `--enable-static=yes` and this will disable symbol versioning as a side effect (symbol versioning is only enabled when building a shared library). Or, if you actually want a shared library, you can use `--disable-symbol-versions` as I mentioned before.

Hope this helps!","",0,0,"","none","JiaT75",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-05 14:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2024-01-05 14:53:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",127,127,"","","","none"
"2024-01-05 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-05 13:17:52","2024-01-05 13:17:51","created",1878647289,"Hello!

There were no changes to any of the assembly related code between `5.2.11` and `5.2.12`. I see you are using `emscripten`, so I was able to recreate your error on both `5.2.11` and `5.2.12` using:

```bash
emconfigure ./configure
make
```

```shell
<inline asm>:1:1: error: unknown directive
.symver lzma_get_progress_522,lzma_get_progress@XZ_5.2.2
^
<inline asm>:2:1: error: unknown directive
.symver lzma_get_progress_52,lzma_get_progress@@XZ_5.2
^
```

So the problem isn't a difference between `5.2.11` and `5.2.12`. Also, unless you are building on 32-bit x86 the `disable-assembler` flag has no effect. In order to build, you need to pass the `disable-symbol-versions` flag.

```bash
emconfigure ./configure --disable-symbol-versions
make
```

The underlying issue here is that `emcc` (and I believe WebAssembly in general) does not support symbol versioning so it needs to be manually disabled. `emconfigure` does not change the underlying `$host_os` or `$host_cpu` so `configure` will guess that symbol versioning is supported on GNU or FreeBSD systems.
","",0,0,"","none","JiaT75",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-21 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-12-21 14:03:26","1970-01-01 00:00:00","none",0,"","",0,0,"xzdec_sandbox","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-21 13:29:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-12-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-21 13:43:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,1,"","","","none"
"2023-12-21 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-21 12:30:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-12-20 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 16:10:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2023-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 14:22:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 14:56:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-12-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 13:39:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-20 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 11:58:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-19 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-19 14:23:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",158,9,"","","","none"
"2023-12-19 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-19 13:24:02","1970-01-01 00:00:00","none",0,"","",0,0,"xzdec_sandbox","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-19 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-19 13:36:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-12-18 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-18 16:37:47","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 16:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2023-12-18 16:19:07","1970-01-01 00:00:00","none",0,"","",0,0,"minor_changes","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 16:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-12-18 16:19:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 12:00:00","CreateEvent","JiaT75","tukaani-project/xz-java","2023-12-18 12:11:04","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 11:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2023-12-18 11:53:39","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-16 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-12-16 13:19:42","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-12-16 13:18:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-16 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-12-16 13:44:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-16 12:54:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,5,"","","","none"
"2023-12-15 16:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-12-15 16:05:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-15 11:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-15 11:53:17","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-07 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-07 15:21:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-07 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-12-07 12:09:58","1970-01-01 00:00:00","none",0,"","",0,0,"oss_fuzz","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-07 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-12-07 12:12:09","2023-12-07 12:12:07","created",1845233755,"@mvatsyk-lsg Thanks for the commands to use for a local test. You caught my mistake but testing locally also highlighted it. I just merged your commits into master.

Great work with this! Thanks for being so flexible and responsive with all the changes.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","closed",0,"","[]",22,"CONTRIBUTOR","2023-12-07 12:09:42","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-07 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-12-07 12:09:43","2023-12-07 12:09:42","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","closed",0,"","[]",21,"CONTRIBUTOR","2023-12-07 12:09:42","1970-01-01 00:00:00","e895e684387cf2952da65f7e6325377722bde9f1","[]","[]","master","bc27dd7034c08757762d05f1c6d050094fb241ec","master","685094b8e1c1aa1bf934de0366ca42ef599d25f7",0,0,0,"unknown","",31,0,5,268,88,12,"",0,"","",0,0,"","","","none"
"2023-12-06 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-06 15:43:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/oss_fuzz","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-12-06 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-06 12:16:33","1970-01-01 00:00:00","none",0,"","",0,0,"oss_fuzz","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-06 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-12-06 12:21:35","2023-12-06 12:21:34","created",1842760084,"@mvatsyk-lsg Thanks! Things are looking pretty good now. I created a separate [branch](https://github.com/tukaani-project/xz/tree/oss_fuzz) with all of your commits plus a minor cleanup commit. Can you test this branch to be sure I didn't break anything during my changes?

As I'm sure you know, the draft PR in OSS-Fuzz needs updating from all the changes we made here. I want to do a quick local test before merging but it will be easier if the OSS-Fuzz changes are updated on that PR.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",20,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-05 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-12-05 12:43:20","2023-12-05 12:43:18","created",1840722453,"Thank you @DavidKorczynski for the explanation and the advice for combining fuzzers. I had not thought of using a byte from the fuzz input to control the fuzzer's entry point.

With that in mind, @mvatsyk-lsg we should combine `fuzz_encode_stream.c` and `fuzz_encode_stream_light.c` into just one fuzzer. We can use the same name `fuzz_encode_stream.c` for this fuzz target. We can use the first byte of input to help us determine the preset level. So the function could look like:

```c
extern int
LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
{
	if (size == 0)
		return 0;

	lzma_stream strm = LZMA_STREAM_INIT;

	uint32_t preset_level;

	uint8_t decider = inbuf[0];

	switch (decider) {
	case 0:
	case 1:
	case 5:
		preset_level = decider;
		break;
	case 6:
		preset_level = 0 | LZMA_PRESET_EXTREME;
		break;
	case 7:
		preset_level = 3 | LZMA_PRESET_EXTREME;
		break;
	}

	lzma_options_lzma opt_lzma;
	if (lzma_lzma_preset(&opt_lzma, preset_level)){
		fprintf(stderr, ""lzma_lzma_preset() failed\n"");
		abort();
	}

	// Initialize filter chain for lzma_stream_decoder() call
	// Use single LZMA2 filter for encoding
	lzma_filter filters[2];
	filters[0].id = LZMA_FILTER_LZMA2;
	filters[0].options = &opt_lzma;
	filters[1].id = LZMA_VLI_UNKNOWN;

	// Initialize the stream encoder using the above
	// filter chain and CRC64.
	if (lzma_stream_encoder(&strm,
			filters, LZMA_CHECK_CRC64) != LZMA_OK) {
		fprintf(stderr, ""lzma_stream_encoder() failed\n"");
		abort();
	}

	fuzz_code(&strm, inbuf, inbuf_size);

	// Free the allocated memory.
	lzma_end(&strm);
	return 0;
}
```

This can test a few different dictionary sizes, match finders, nice length, modes, and depth levels with the same fuzzer.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",18,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-02 13:00:00","IssueCommentEvent","JiaT75","google/oss-fuzz","2023-12-02 13:30:32","2023-12-02 13:30:31","created",1837149579,"@mvatsyk-lsg it's probably a good idea to mark this PR as a draft until the XZ Utils PR is merged","",0,0,"","none","JiaT75",11279,"XZ: update build.sh","[]","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-12-01 13:39:02","2023-12-01 13:39:02","created",1412114193,"> Good! What size would you consider reasonable for the test cases?

The 4096 number you were using before seems good. That should be more than enough to trigger the sanitizers if there is a possible bad code path","tests/ossfuzz/config/fuzz_decode_alone.options",2,2,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","c0170977d3a65431ada2db938e8a94cbdebef957","[]","[]","master","0f81fb417f8b4ddbdecd6479fde67e4a0cd60f71","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_lzma.dict",2,"0f81fb417f8b4ddbdecd6479fde67e4a0cd60f71","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-12-01 13:39:03","2023-12-01 13:39:02","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","c0170977d3a65431ada2db938e8a94cbdebef957","[]","[]","master","0f81fb417f8b4ddbdecd6479fde67e4a0cd60f71","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-12-01 12:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-12-01 12:37:22","2023-12-01 12:37:23","created",1412055614,"I apologize, this was a bad suggestion from me. I didn't realize the `ret` value was being used in the error message, which could be helpful if the fuzz targets somehow fail when creating the coders. Don't worry about reverting this, I will make the change after we merge.","tests/ossfuzz/fuzz_decode_alone.c",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,41 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_alone.c
+/// \brief      Fuzz test program for liblzma lzma_alone_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize a LZMA alone decoder using the above memory usage limit.
+	lzma_stream strm = LZMA_STREAM_INIT;
+	lzma_ret ret = lzma_alone_decoder(&strm, MEM_LIMIT);
+	if (ret != LZMA_OK) {",28,"c765d096b9e0a60855d7a690685345f9d8caf177","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 12:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-12-01 12:25:16","2023-12-01 12:25:16","created",1412044487,"Based on the [libFuzzer docs](https://llvm.org/docs/LibFuzzer.html#options), it seems that the default is a special 0 value that indicates the maximum input length should be inferred from the corpus. Most of our test files are small (I believe the largest is ~50 Kb .xz file) so its likely that the default value is good enough in practice.

However it could be a good idea to set an upper bound on a size we think is reasonable, especially for the fuzz targets that are meant to test handling bytes early in the input stream. So I would vote for this.","tests/ossfuzz/config/fuzz_decode_alone.options",2,2,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_lzma.dict",2,"c765d096b9e0a60855d7a690685345f9d8caf177","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 12:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-12-01 12:37:23","2023-12-01 12:37:23","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-12-01 12:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-12-01 12:25:17","2023-12-01 12:25:16","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:37:12","2023-11-30 17:37:12","created",1411052376,"We can also omit this fuzz target. It should be covered by `fuzz_encode_alone`, which is mostly covered by `lzma_encode_stream()` anyway","tests/ossfuzz/fuzz_encode_raw.c",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,53 @@
+///////////////////////////////////////////////////////////////////////////////",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:27:06","2023-11-30 17:27:06","created",1411018779,"We can probably omit this fuzz target since its interesting code paths will be hit by `fuzz_encode_stream`","tests/ossfuzz/fuzz_encode_raw_lzma2.c",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,53 @@
+///////////////////////////////////////////////////////////////////////////////",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:20:05","2023-11-30 17:20:05","created",1411000976,"Since we treat tabs at 8 character width, this line is more than 80 characters. We try to always wrap our lines at 80 characters","tests/ossfuzz/fuzz_decode_raw_lzma2.c",42,42,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,52 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_raw_lzma2.c
+/// \brief      Fuzz test program for liblzma lzma_raw_decoder() w/ LZMA2
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize filter chain for lzma_raw_decoder() call
+	// Use single LZMA2 filter for decoding
+	lzma_options_lzma opt_lzma;
+	
+	lzma_filter filters[LZMA_FILTERS_MAX + 1];
+	filters[0].id = LZMA_FILTER_LZMA2;
+	filters[0].options = &opt_lzma;
+	filters[1].id = LZMA_VLI_UNKNOWN;
+
+	// Initialize a raw decoder using the above filter chain.
+	lzma_stream strm = LZMA_STREAM_INIT;
+	lzma_ret ret = lzma_raw_decoder(&strm, filters);
+	
+	if (ret != LZMA_OK) {
+		// This should never happen unless the system has
+		// no free memory or address space to allow the small
+		// allocations that the initialization requires.
+		fprintf(stderr, ""lzma_raw_decoder() LZMA 2 failed (%d)\n"", ret);",42,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:08:23","2023-11-30 17:08:23","created",1410980788,"I'm not convinced this fuzz target is needed. The interesting LZMA decoding code should be covered by `fuzz_decode_alone` already.","tests/ossfuzz/fuzz_decode_raw.c",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:37:13","2023-11-30 17:37:12","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:34:09","2023-11-30 17:34:08","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:20:06","2023-11-30 17:20:05","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:17:49","2023-11-30 17:17:48","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:08:24","2023-11-30 17:08:23","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:27:49","2023-11-30 16:27:50","created",1410928176,"This variable should also be static (`static const ...`)","tests/ossfuzz/fuzz_common.h",14,14,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB",14,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:18:33","2023-11-30 16:18:33","created",1410911695,"Instead of **mode** it should be **preset**. In the documentation **mode** in the context of compression mode refers to a match finder setting (fast or normal).

The LZMA properties resulting in 0x5d are lc=3, lp=0, pb=2. It could be helpful to mention this once, and then only mention the dictionary size for each .dict entry since the LZMA properties aren't changing.","tests/ossfuzz/config/fuzz_lzma.dict",7,7,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,20 @@
+# first 5 header bytes of .lzma archives based on the info from
+# - extra/scanlzma/scanlzma.c (lines 32-52)
+# - src/liblzma/common/alone_encoder.c (lines 107-126)
+# - https://github.com/cscott/lzma-purejs/blob/master/FORMAT.md
+# - manual hexdump of data produced by the lzma CLI suite
+
+# compression mode 1    (LZMA properties = 0x5d, dict size = 0x00100000)",7,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:24:12","2023-11-30 16:24:13","created",1410923080,"The header comments are missing from this file","tests/ossfuzz/fuzz_common.h",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:32:25","2023-11-30 16:32:26","created",1410934630,"The function name should start on a new line. And this should be static. So the first line:
static void

Second line:
fuzz_code(...

This is to match our style in the project. Having the function name starting at column index 0 helps certain tools and text editors search for function names.","tests/ossfuzz/fuzz_common.h",17,17,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  ",17,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:20","2023-11-30 16:34:20","created",1410937247,"It looks like there is a mix of tabs and spaces. In .c files we use tabs, and treat the tab width as 8 characters. I'm sure other projects do this differently since there is no right answer to the tabs vs spaces debate","tests/ossfuzz/fuzz_common.h",19,19,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  
+    // Give the whole input buffer at once to liblzma.
+	// Output buffer isn't initialized as liblzma only writes to it.",19,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:55","2023-11-30 16:34:55","created",1410938033,"Missing an empty newline at the end of the file","tests/ossfuzz/fuzz_common.h",43,43,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  
+    // Give the whole input buffer at once to liblzma.
+	// Output buffer isn't initialized as liblzma only writes to it.
+	stream->next_in = inbuf;
+	stream->avail_in = inbuf_size;
+	stream->next_out = OUTBUF;
+	stream->avail_out = sizeof(OUTBUF);
+
+    lzma_ret ret;
+	while ((ret = lzma_code(stream, LZMA_FINISH)) == LZMA_OK) {
+		if (stream->avail_out == 0 || ret == LZMA_STREAM_END) {
+			// outbuf became full. We don't care about the
+			// uncompressed data there, so we simply reuse
+			// the outbuf and overwrite the old data.
+			stream->next_out = OUTBUF;
+			stream->avail_out = sizeof(OUTBUF);
+		}
+	}
+
+	// LZMA_PROG_ERROR should never happen as long as the code calling
+	// the liblzma functions is correct. Thus LZMA_PROG_ERROR is a sign
+	// of a bug in either this function or in liblzma.
+	if (ret == LZMA_PROG_ERROR) {
+		fprintf(stderr, ""lzma_code() returned LZMA_PROG_ERROR\n"");
+		abort();
+	}
+}",43,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:42:10","2023-11-30 16:42:10","created",1410948981,"There is no need to check `ret == LZMA_STREAM_END` here. The while loop would end if `ret` isn't `LZMA_OK` here.","tests/ossfuzz/fuzz_common.h",27,27,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  
+    // Give the whole input buffer at once to liblzma.
+	// Output buffer isn't initialized as liblzma only writes to it.
+	stream->next_in = inbuf;
+	stream->avail_in = inbuf_size;
+	stream->next_out = OUTBUF;
+	stream->avail_out = sizeof(OUTBUF);
+
+    lzma_ret ret;
+	while ((ret = lzma_code(stream, LZMA_FINISH)) == LZMA_OK) {
+		if (stream->avail_out == 0 || ret == LZMA_STREAM_END) {",27,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:49:02","2023-11-30 16:49:03","created",1410957833,"Since `ret` isn't used outside of this if statement anymore, its enough to just say:

if (lzma_alone_decoder(&strm, MEM_LIMIT) != LZMA_OK)

and remove the `ret` variable from these programs.","tests/ossfuzz/fuzz_decode_alone.c",28,28,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,41 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_alone.c
+/// \brief      Fuzz test program for liblzma lzma_alone_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize a LZMA alone decoder using the above memory usage limit.
+	lzma_stream strm = LZMA_STREAM_INIT;
+	lzma_ret ret = lzma_alone_decoder(&strm, MEM_LIMIT);
+	if (ret != LZMA_OK) {",28,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:53:29","2023-11-30 16:53:29","created",1410963294,"The memory limit has moved to the header file so this comment should be updated","tests/ossfuzz/fuzz_decode_auto.c",25,25,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,52 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_auto.c
+/// \brief      Fuzz test program for liblzma lzma_auto_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize an Auto decoder using the above memory usage limit.",25,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:24:14","2023-11-30 16:24:13","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:18:34","2023-11-30 16:18:33","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:27:50","2023-11-30 16:27:49","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:32:26","2023-11-30 16:32:25","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:21","2023-11-30 16:34:20","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:56","2023-11-30 16:34:55","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:42:11","2023-11-30 16:42:10","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:49:03","2023-11-30 16:49:03","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:53:30","2023-11-30 16:53:29","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 15:55:16","2023-11-30 15:55:16","created",1410880961,"Does every fuzz target need a `.options` file? If not, then I don't think we need to include a `.options` file if the fuzz target doesn't need anything special","tests/ossfuzz/config/fuzz_decode_auto.options",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 15:11:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-30 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 15:08:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-30 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 15:58:40","2023-11-30 15:58:39","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 14:08:49","2023-11-30 14:08:48","created",1833851100,"> @JiaT75 I've addressed your comments and tested the new Makefile and fuzz targets' code on a local setup. They seem to compile and work just fine. A quick question: should I go back and edit the description of all commits before the review, or will you be making a squash during the merge?

We like to keep our commits small and focused, so we will likely want more than one commit for this many changes. For now, don't worry about squashing your commits until the review is basically done. At the end we can figure out how many commits are appropriate for this and squash accordingly. So feel free to keep adding fix up commits as we go.

I'll start reviewing your new changes.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 13:59:53","2023-11-30 13:59:51","created",1833836564,"Hello!

Thanks for the PR. Could you please separate this into two separate commits? One for the typo fix in `file_io.c` and another for the typo fixes in the test files. 

In the commit messages, the first should be prefixed with ""xz:"" instead of ""Docs:"". We use the ""Docs:"" prefix when referring to changes to things like the README, man pages, INSTALL, etc. The second commit should be prefixed with ""Tests:"".","",0,0,"","none","JiaT75",74,"Docs: Fix typos","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-30 12:53:37","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_detect_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 12:12:50","2023-11-30 12:12:49","created",1833651026,"@mgood7123 Thanks again for reporting and helping us test this. I would like to add you to our `THANKS` file, but I did not see your name on your GitHub profile. Is there a name you would like us to use for you in our `THANKS` file? Otherwise you may remain anonymous :)","",0,0,"","none","JiaT75",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",15,"NONE","2023-11-30 12:10:16","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-11-30 12:10:17","2023-11-30 12:10:16","closed",0,"### Describe the bug

```
localhost:~/llvm_18$ release_BUILD/LIBXZ/OUT/bin/lzma
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
```

```cmake
if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/xz ${CMAKE_BINARY_DIR}/LIBXZ
  )
endif()

if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ/OUT/lib/liblzma.a)
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      -D CMAKE_BUILD_TYPE=Release
      -D ""CMAKE_C_FLAGS=${CMAKE_C_FLAGS}""
      -D ""CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}""
      -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -D CMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/LIBXZ/OUT
      -D BUILD_SHARED_LIBS=OFF
      -B ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --build ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --install ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
endif()
```

### Version

5.5.0 git master https://github.com/tukaani-project/xz/commit/837ea40b1c9d4998cac4500b55171bf33e0c31a6

### Operating System

alpine linux

### Relevant log output

_No response_","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",14,"NONE","2023-11-30 12:10:16","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 12:41:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-30 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 12:10:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-29 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 16:52:49","2023-11-29 16:52:47","created",1832327289,"> @JiaT75 thanks a lot for the swift review! I will start implementing the suggested changes asap. I am going to focus on fixing the highlighted issues before implementing any new fuzzers, if that makes sense :)

Makes perfect sense. I noted the BCJ filter fuzzing as option to consider. We don't necessarily need to implement it or implement it right away. Just an idea of something we could also be fuzzing if we agree the value is there.

> * I completely agree that the fuzz targets' code can be reduced via templates and shared code. Would you like to simply move the common functionality into a separate header file, or to generate the fuzzers' code dynamically by replacing the lines in a template file as well?

I think the simplest approach would be to use a common separate header file. Creating a dynamic template would take some extra build logic whereas an extra header file would only require updating the Makefile.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-29 14:00:00","PullRequestEvent","JiaT75","google/oss-fuzz","2023-11-29 14:07:56","2023-11-29 14:07:54","opened",0,"The old URL is still kept as a mirror, but it is not always up to date since the primary repository is on GitHub. This now matches the 'main_repo' entry in the corresponding project.yaml.","",0,0,"","none","JiaT75",11286,"xz: Change Dockerfile clone URL to match project.yaml entry.","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xz_update_clone_url","a429769e4fd7ba08a14eacec3e0191526a5d4572","master","457bb5f5d4fc6f48af796c1c22aae72a26a43f4d",0,0,0,"unknown","",0,1,1,1,1,1,"",0,"","",0,0,"","","","none"
"2023-11-29 14:00:00","CreateEvent","JiaT75","JiaT75/oss-fuzz","2023-11-29 14:07:32","1970-01-01 00:00:00","none",0,"","",0,0,"xz_update_clone_url","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:22:32","2023-11-29 13:22:32","created",1409275186,"There isn't a need to mention the previous filename. This information is capture in the commit history","tests/ossfuzz/fuzz_decode_stream.c",9,8,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1,10 +1,13 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
-/// \file       fuzz.c
+/// \file       fuzz_decode_stream.c
 /// \brief      Fuzz test program for liblzma
 //
 //  Author:     Lasse Collin
 //
+//  Original fuzz.c fuzzer, renamed to fuzz_decode_stream to conform with new",9,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:43:01","2023-11-29 13:43:02","created",1409301912,"This Makefile could be done with wildcards instead of repeating the same commands for each fuzz target since all of the .c/.o files become fuzz targets. ","tests/ossfuzz/Makefile",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1,6 +1,61 @@
-fuzz: fuzz.c
-	$(CC) $(CFLAGS) -c fuzz.c -I ../../src/liblzma/api/
-	$(CXX) $(CXXFLAGS) $(LIB_FUZZING_ENGINE) fuzz.o -o $(OUT)/fuzz \
+fuzz_decode_xz: fuzz_decode_xz.c
+	$(CC) $(CFLAGS) -c fuzz_decode_xz.c -I ../../src/liblzma/api/
+	$(CXX) $(CXXFLAGS) $(LIB_FUZZING_ENGINE) fuzz_decode_xz.o -o $(OUT)/fuzz_decode_xz \
+	      ../../src/liblzma/.libs/liblzma.a
+
+fuzz_decode_xz_crc: fuzz_decode_xz_crc.c",9,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:20:49","2023-11-29 13:20:50","created",1409273144,"Raw LZMA2 does not use the .xz magic bytes, so this dictionary isn't that helpful for the fuzz test","tests/ossfuzz/config/fuzz_decode_raw_lzma2.options",2,2,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_xz.dict",2,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:15:16","2023-11-29 13:15:16","created",1409266227,"This dictionary could also include valid lzip header bytes for versions 0 and 1. See the [file format](https://www.nongnu.org/lzip/lzip_talk_ghm_2019.html) for what these bytes should be.","tests/ossfuzz/config/fuzz_lzip.dict",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1 @@
+""LZIP""",1,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:07:44","2023-11-29 13:07:43","created",1831864854,"Hello!

Thanks for the PR. This is a great start to improving the fuzz testing. I will start with a few overall comments here and then add some more specific comments directly on the commits themselves.

First, we need to be sure that we are using the fuzz resources in the best way we can. Its easy to think of the OSS-Fuzz resources as unlimited, but each project can only be fuzzed so much. We should only include a fuzz target if it provides clear value and is testing an important part of liblzma that isn't being covered by a different fuzz target. Otherwise, less useful fuzz targets will take away compute time from the more useful ones. So, can you justify the reasoning behind each of the new fuzz targets? For instance, I am not sure that the raw encoder and decoder fuzz targets are useful since their important code paths are already covered by every other fuzz target. The raw coders don't have important header data, its just raw LZMA data. I am likely missing an important fuzz case, but in my mind I can think of three useful things to fuzz in our library:

- Metadata encoding/decoding (magic bytes, file headers, block headers, lzma2 chunk headers, etc.)
- Filter data encoding/decoding (LZMA1, BCJ, delta)
- Check functions (CRC32, CRC64, SHA256)

Next, the code itself has a lot of repeated boilerplate. Each of the fuzz targets has very little unique code. For instance, this could be reorganized into a shared header file that provides a function for encoding and a function for decoding. These functions can take the coder init function (lzma_alone_decoder(), lzma_auto_decoder(), etc.) as a function pointer arg and any needed flags or options.

We could also consider fuzzing the various BCJ filters (x86, PowerPC, ARM64, etc). These filters are designed to be applied to executable data, but will be run on non-executable data very often. So its possible that there are hidden data corruption bugs on an unexpected input sequence since they are mostly tested on executable data, making it a good candidate for fuzz testing. These filters cannot be used as raw coders at this time, so they will have to be combined in a filter chain with LZMA1/2. If we want to look for data corruption bugs, we should encode a chunk, then decode it and compare if the decoded version exactly matches the original data.

For your commit messages, we like to keep a consistent format. When we release, our Changelog is generated automatically from the contents of the commit messages. Also it helps us maintain our codebase better when the commit messages are descriptive and clear. For your commits, please have them start with the category of what they are changing. For these, I would prepend ""Tests:"" to the first line of each commit. The first line of each commit should be a brief description of the purpose of the commit. The following lines should explain what was changed and why. Make sure to wrap the lines of the commit message to at most 73 characters since different commit log viewers may or may not wrap long lines and it helps keep a consistent look in our Changelog.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:15:17","2023-11-29 13:15:16","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:20:51","2023-11-29 13:20:50","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:22:33","2023-11-29 13:22:32","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:43:02","2023-11-29 13:43:02","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:10:39","2023-11-29 13:10:38","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-28 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 14:12:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-11-28 13:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-11-28 13:08:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",477,477,"","","","none"
"2023-11-28 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 12:12:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-11-28 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 12:03:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-11-28 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 11:58:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-24 14:02:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-24 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-24 13:56:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-23 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-23 16:05:14","2023-11-23 16:05:13","created",1824666098,"> we could extract the triple on gcc/clang via `-dumpmachine`

I don't think this will work for us since a tool like `musl-gcc` (a GCC wrapper for using musl libc) still outputs `x86_64-linux-gnu` with `-dumpmachine`. So this would fix things for Alpine, but our builds would still be broken for anyone compiling for musl libc using a wrapper like this.

","",0,0,"","none","JiaT75",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",9,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-23 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-23 15:49:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2023-11-23 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-23 14:20:26","1970-01-01 00:00:00","none",0,"","",0,0,"isatty_windows_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-23 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-23 14:44:38","1970-01-01 00:00:00","none",0,"","",0,0,"isatty_windows_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-23 14:43:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,4,"","","","none"
"2023-11-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-23 14:32:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/isatty_windows_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-22 18:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-22 18:19:27","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:21:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:25:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:34:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:51:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-22 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-22 12:37:57","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_detect_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 12:41:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-17 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-17 17:59:52","1970-01-01 00:00:00","none",0,"","",0,0,"suffix_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-17 17:56:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/suffix_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-17 17:12:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/suffix_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-17 17:59:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,0,"","","","none"
"2023-11-17 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-17 15:18:14","1970-01-01 00:00:00","none",0,"","",0,0,"suffix_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-17 15:29:00","2023-11-17 15:28:58","created",1816634805,"There is no shame in asking question. I'm glad we were able to help :)","",0,0,"","none","JiaT75",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","closed",0,"","[]",5,"NONE","2023-11-17 07:30:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-16 12:59:45","2023-11-16 12:59:44","created",1814392404,"Hello!

> the installation is uncovered in the`INSTALL.generic` file. This could be rectified by an addition either of a methodology into this file or script dedicated for that purpose.

There is a section in INSTALL.generic ""Installation Names"". This describes when using the Autotools build system where the installation files go (defaults to `/usr/local/`). Your Linux distribution should install/update your packages in a different directory so these should not conflict.

You may already know this, but typically to build and install a package with Autotools the steps are (and should be covered in INSTALL.generic already):

1. `./configure [options]`. The options can enable/disable features, dependencies, set installation locations, etc.
2. `make`. This will compile the project.
3. `make check`. This will compile and run the test framework to be sure the binaries work as expected.
4. `make install`. This will install the binaries and documentation (unless disabled).
5. `make uninstall`. This will remove the installed artifacts.

You can set a different installation location when running configure by passing `--prefix=[path to install directory]` or during installation `make install DESTDIR=[path to install directory]`.

I hope this explanation was clear. Let me know if you have more questions.

","",0,0,"","none","JiaT75",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-16 12:22:51","2023-11-16 12:22:49","created",1814339011,"I can understand the confusion here. While GitHub does a lot of things well, unfortunately maintainers on GitHub have no control over the naming of the ""Source code"" release files, but we can add extra files to the release. Some projects choose to add pre-compiled binaries to the release, so it is more obvious in those projects which files you want to download (and to be sure that the source is always easily available for every release without having to clone the entire project).

It is my understanding that under the hood GitHub is using `git archive` to generate the ""Source code"" archives based on the tag of the release. So it would be possible for us to exclude most or all files from `git archive` using a `.gitattributes` file to make it clear that the GitHub auto-generated archives are not meant to be consumed by users. This would be annoying for anyone who has already been using `git archive` though so I don't see us doing this.

Like many projects, when we generate our source code releases, we essentially run Automake's `dist-gzip` target to prepare our documentation, translations, etc. and, as you know, generate the configure script. `git archive` does not run these steps and so the GitHub archives are best thought of as a snapshot of the git repository at the time of the release. ","",0,0,"","none","JiaT75",71,"Missing `configure` file","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-15 15:49:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-13 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-13 12:51:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 16:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-10 16:58:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 16:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-10 16:09:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-10 15:19:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-10 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-10 14:11:05","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-10 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-10 14:11:14","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-10 14:26:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-11-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-10 14:42:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-10 14:40:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-11-08 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-08 17:18:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-08 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-08 17:03:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-08 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-08 17:22:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-07 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-07 13:21:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-07 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-07 13:12:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-02 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-02 13:27:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-02 12:00:00","CreateEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-02 12:42:33","1970-01-01 00:00:00","none",0,"","",0,0,"","repository","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-02 12:00:00","CreateEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-02 12:47:34","1970-01-01 00:00:00","none",0,"","",0,0,"master","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-01 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-11-01 16:11:10","2023-11-01 16:11:08","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The -r, --recursive option was commented out in the code as a placeholder.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- tuklib_list.h header file only linked list implementation was added
- All filename reading now uses tuklib_list instead of a string array
- XZ now supports -r, --recursive option to traverse directories

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",22,"XZ recursive CLI","['enhancement','5.5.0']","closed",0,"","[]",0,"MEMBER","2023-11-01 16:11:08","1970-01-01 00:00:00","7ad5c4cd21b4c0ce3bdfc53f2c0bb782cb642006","[]","[]","xz_recursive_cli","57d5db7e4a32c4f84fcffd140de0bc79f3b26e2d","master","78ccd93951f9e988d447bcdd70b24f6df5448d1d",0,0,0,"dirty","",0,0,7,364,48,16,"",0,"","",0,0,"","","","none"
"2023-11-01 13:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-11-01 13:18:56","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.4.5 (2023-11-01)

    * liblzma:

        - Use __attribute__((__no_sanitize_address__)) to avoid address
          sanitization with CRC64 CLMUL. It uses 16-byte-aligned reads
          which can extend past the bounds of the input buffer and
          inherently trigger address sanitization errors. This isn't
          a bug.

        - Fixed an assertion failure that could be triggered by a large
          unpadded_size argument. It was verified that there was no
          other bug than the assertion failure.

        - Fixed a bug that prevented building with Windows Vista
          threading when __attribute__((__constructor__)) is not
          supported.

    * xz now properly handles special files such as ""con"" or ""nul"" on
      Windows. Before this fix, the following wrote ""foo"" to the
      console and deleted the input file ""con_xz"":

          echo foo | xz > con_xz
          xz --suffix=_xz --decompress con_xz

    * Build systems:

        - Allow builds with Windows win95 threading and small mode when
          __attribute__((__constructor__)) is supported.

        - Added a new line to liblzma.pc for MSYS2 (Windows):

              Cflags.private: -DLZMA_API_STATIC

          When compiling code that will link against static liblzma,
          the LZMA_API_STATIC macro needs to be defined on Windows.

        - CMake specific changes:

            * Fixed a bug that allowed CLOCK_MONOTONIC to be used even
              if the check for it failed.

            * Fixed a bug where configuring CMake multiple times
              resulted in HAVE_CLOCK_GETTIME and HAVE_CLOCK_MONOTONIC
              not being set.

            * Fixed the build with MinGW-w64-based Clang/LLVM 17.
              llvm-windres now has more accurate GNU windres emulation
              so the GNU windres workaround from 5.4.1 is needed with
              llvm-windres version 17 too.

            * The import library on Windows is now properly named
              ""liblzma.dll.a"" instead of ""libliblzma.dll.a""

            * Fixed a bug causing the Ninja Generator to fail on
              UNIX-like systems. This bug was introduced in 5.4.0.

            * Added a new option to disable CLMUL CRC64.

            * A module-definition (.def) file is now created when
              building liblzma.dll with MinGW-w64.

            * The pkg-config liblzma.pc file is now installed on all
              builds except when using MSVC on Windows.

            * Added large file support by default for platforms that
              need it to handle files larger than 2 GiB. This includes
              MinGW-w64, even 64-bit builds.

    * Small fixes and improvements to the tests.

    * Updated translations: Chinese (simplified) and Esperanto.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.5","XZ Utils 5.4.5 Stable","none"
"2023-11-01 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-01 12:59:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-31 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-31 16:05:37","2023-10-31 16:05:35","created",1787525956,"Our CMake support is considered unstable and is undergoing a lot of improvements. Many of these improvements are already on master but have not made it into a stable release. If you only need `liblzma`, then using a release from the 5.4 branch will work. We will have a new `5.4.5` release later today and that will include a few small CMake changes. We recently ported the command line tools `xz` and `xzdec` to MSVC but that will not be part of any of the 5.4 releases

We are planning to release 5.6.0 this December which may change the default library to being a shared library. We may consider our CMake support stable at that point. So, to be safe you should explicitly set the `BUILD_SHARED_LIBS` option if you do build `liblzma` through CMake since this option's default value specifically might not be stable.

If you can use our Autotools build system on Windows through something like Cygwin or MSYS2, that is recommended over CMake at the moment. If not, our CMake build will likely still work for you, but be careful of minor things changing in the future. We generally don't break things with our CMake build and are usually just adding more features. I hope this answers your question!","",0,0,"","none","JiaT75",68,"cmake stability","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-31 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-31 14:23:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",57,1,"","","","none"
"2023-10-31 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-31 13:54:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-31 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-31 10:49:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",34,34,"","","","none"
"2023-10-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-25 13:33:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cflags_fsanitize","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,3,"","","","none"
"2023-10-24 11:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-10-24 11:56:54","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-23 17:06:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2023-10-23 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-10-23 16:56:59","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-20 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-10-20 17:05:14","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-20 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-20 16:05:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-20 11:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-10-20 11:28:29","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-19 15:06:40","2023-10-19 15:06:39","created",1771182272,"@arixmkii I ended up making the Windows-CI work with MSYS2, but it would be great if things worked with MSVC (which is why I left the Issue open). If you have experience working with MSVC that is great.

I imagine this would require writing a Windows PowerShell or Batch script to do things similar to what ci_build.sh does, and then refactoring windows-ci.yml to utilize the script. We need to use CMake to generate Windows Visual Studio files (using CMake's `-G` option to select the generator) and then compile everything and run the tests from Windows PowerShell or Command Prompt.

Recently we ported the xz command line tool to work with MSVC so making sure we can continue to build on MSVC as the codebase changes is certianly valuable. ","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",10,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-19 12:28:55","2023-10-19 12:28:54","created",1770874618,"Hi! This question doesn't exactly belong on this issue. This issue is for discussing changes to our Continuous Integration scripts for improving Windows support (which I still need to improve/finish). Anyways, I will still answer your question here.

> Looks like you need to put following in CMakeLists.txt: `option(BUILD_SHARED_LIBS ""Build shared libraries"" ON)` Most opensource libs like **libxml2** have this ON by default. And before cmake when I compiled XZ it was generating liblzma.dll by default.

We have always had the `BUILD_SHARED_LIBS` option defined in `CMakeLists.txt` since we first supported a CMake build. You can search for the line `option(BUILD_SHARED_LIBS ""Build liblzma as a shared library instead of static"")` if you are curious. In general, CMake defaults to `BUILD_SHARED_LIBS` not being set. Other projects can choose to override this by default but since we have always had it OFF by default it is difficult to change. Applications may be relying on this default behavior if they only want the static library to be built. So changing the default to instead build the shared library could cause their build pipelines to fail.

Thank you for this report, but we will not be changing this.","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",7,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-19 12:30:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-18 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-10-18 16:01:06","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-18 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-18 16:13:01","2023-10-18 16:13:00","created",1768871911,"@hansjans162 We committed some changes to reorganize the CLMUL code. We refactored things so all the CLMUL specific code is in a new `crc_clmul.c` file. Also, we created a macro `crc_always_inline` to force inline of `crc_simd_body()` since it was 50% slower on my benchmarks if the function is not properly inlined.

A few small changes were made to `crc_simd_body()` but the speed performance was not affected. I hope if you had already started working on ARM64 versions this does not add much extra work to incorporate the code reorganzation. These changes should make the code much better organized for the future ARM64 optimizations. Thanks for all your contributions and feel free to reply here or reach out over email (the email in the project README will redirect to Lasse and I) if you have comments or questions.","",0,0,"","none","JiaT75",64,"Crc32 clmul","[]","closed",0,"","[]",9,"CONTRIBUTOR","2023-10-13 12:54:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-18 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-18 15:34:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-10-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-17 17:26:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-10-17 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-17 14:26:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-17 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-17 11:41:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-14 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-10-14 15:18:58","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-10-13 12:03:15","2023-10-13 12:03:14","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
Referencing actions by major tag (e.g. `v3`)


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/65


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
Referencing actions by commit SHA (e.g. `8ade135a41bc03ea155e62e844d188df1ea18608`)

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","gabibguti",67,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",4,"CONTRIBUTOR","2023-10-13 12:03:14","2023-10-13 12:03:14","37947d4a7565b87e4cec8b89229d35b0a3f8d2cd","[]","[]","master","64909e884dca9e79b2eab211f36b87558d683fc7","master","f74f1740067b75042497edbfa6ea457ff75484b9",1,0,0,"unknown","JiaT75",0,0,2,5,5,2,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-10-13 12:54:06","2023-10-13 12:54:05","closed",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","closed",0,"","[]",7,"CONTRIBUTOR","2023-10-13 12:54:05","2023-10-13 12:54:05","f1cd9d7194f005cd66ec03c6635ceae75f90ef17","[]","[]","crc32-clmul","2070a32c81b973f532262a2c082504733893f919","master","f74f1740067b75042497edbfa6ea457ff75484b9",1,0,0,"unknown","JiaT75",12,0,3,526,289,7,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-13 12:52:55","2023-10-13 12:52:54","created",1761471852,"> I updated the PR with the squashing and comment change. I didn't try the crc_clmul.c idea but I believe it would result in cleaner code. I'll let you all handle it.

Thanks for the updates!

> The CRC64 CLMUL version became faster with buffers around 512 bytes. The runtime differences started to change between 32 - 1024 bytes so it was most interesting to categorize them as < 32 bytes and > 1024 bytes. So for CRC32 you are better off using the assembly version but CRC64 depends.

Thanks for benchmarking the 32-bit version. I would have expected the CLMUL version to be much better than the assembly or the generic to be fairly close to the assembly. We'll take that into account when deciding how to proceed with 32-bit builds.","",0,0,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",7,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-13 12:02:49","2023-10-13 12:02:49","created",1761402626,"It looks great! Thanks","",0,0,"","none","JiaT75",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",4,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-13 12:54:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-10-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-13 12:03:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-12 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-12 13:57:05","2023-10-12 13:57:03","created",1759664127,"Thanks for remaking the PR!

Everything looks great except can you tweak your commit messages slightly? If you could prepend ""CI:"" before the first line of your commit message (""Bump and ref actions..."") that would be great. We like to do that to help search/filter commits by category. Also, in the first commit can you mention the reason why this change is needed? Something like the text from #65 could be enough:

""Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.""

Or if you want to reword it at all.","",0,0,"","none","JiaT75",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 16:34:26","2023-09-29 16:34:27","created",1341584118,"If we are using `crc_simd_body()` as an inline function, we probably do not need `__attribute__((__no_sanitize_address__))` on `crc32_clmul()` and `crc64_clmul()`. Can you verify with both GCC and Clang? If you haven't used ASAN before, pass `-fsanitize=address` in CFLAGS when configuring.","src/liblzma/check/crc_common.h",146,146,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,258 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc_common.h
+/// \brief      Some functions and macros for CRC32CLMUL and CRC64CLMUL
+//
+//  Authors:    Lasse Collin
+//              Ilya Kurdyukov
+//              Hans Jansen
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#ifdef WORDS_BIGENDIAN
+#	define A(x) ((x) >> 24)
+#	define B(x) (((x) >> 16) & 0xFF)
+#	define C(x) (((x) >> 8) & 0xFF)
+#	define D(x) ((x) & 0xFF)
+
+#	define S8(x) ((x) << 8)
+#	define S32(x) ((x) << 32)
+
+#else
+#	define A(x) ((x) & 0xFF)
+#	define B(x) (((x) >> 8) & 0xFF)
+#	define C(x) (((x) >> 16) & 0xFF)
+#	define D(x) ((x) >> 24)
+
+#	define S8(x) ((x) >> 8)
+#	define S32(x) ((x) >> 32)
+#endif
+
+
+#undef CRC_GENERIC
+#undef CRC_CLMUL
+#undef CRC_USE_GENERIC_FOR_SMALL_INPUTS
+
+// If CLMUL cannot be used then only the generic slice-by-four is built.
+#if !defined(HAVE_USABLE_CLMUL)
+#	define CRC_GENERIC 1
+
+// If CLMUL is allowed unconditionally in the compiler options then the
+// generic version can be omitted. Note that this doesn't work with MSVC
+// as I don't know how to detect the features here.
+//
+// NOTE: Keep this this in sync with crc32_table.c.
+#elif (defined(__SSSE3__) && defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+#	define CRC_CLMUL 1
+
+// Otherwise build both and detect at runtime which version to use.
+#else
+#	define CRC_GENERIC 1
+#	define CRC_CLMUL 1
+
+/*
+	// The generic code is much faster with 1-8-byte inputs and has
+	// similar performance up to 16 bytes  at least in microbenchmarks
+	// (it depends on input buffer alignment too). If both versions are
+	// built, this #define will use the generic version for inputs up to
+	// 16 bytes and CLMUL for bigger inputs. It saves a little in code
+	// size since the special cases for 0-16-byte inputs will be omitted
+	// from the CLMUL code.
+#	define CRC_USE_GENERIC_FOR_SMALL_INPUTS 1
+*/
+
+#	if defined(_MSC_VER)
+#		include <intrin.h>
+#	elif defined(HAVE_CPUID_H)
+#		include <cpuid.h>
+#	endif
+#endif
+
+////////////////////////
+// Detect CPU support //
+////////////////////////
+
+#if defined(CRC_GENERIC) && defined(CRC_CLMUL)
+static inline bool
+is_clmul_supported(void)
+{
+	int success = 1;
+	uint32_t r[4]; // eax, ebx, ecx, edx
+
+#if defined(_MSC_VER)
+	// This needs <intrin.h> with MSVC. ICC has it as a built-in
+	// on all platforms.
+	__cpuid(r, 1);
+#elif defined(HAVE_CPUID_H)
+	// Compared to just using __asm__ to run CPUID, this also checks
+	// that CPUID is supported and saves and restores ebx as that is
+	// needed with GCC < 5 with position-independent code (PIC).
+	success = __get_cpuid(1, &r[0], &r[1], &r[2], &r[3]);
+#else
+	// Just a fallback that shouldn't be needed.
+	__asm__(""cpuid\n\t""
+			: ""=a""(r[0]), ""=b""(r[1]), ""=c""(r[2]), ""=d""(r[3])
+			: ""a""(1), ""c""(0));
+#endif
+
+	// Returns true if these are supported:
+	// CLMUL (bit 1 in ecx)
+	// SSSE3 (bit 9 in ecx)
+	// SSE4.1 (bit 19 in ecx)
+	const uint32_t ecx_mask = (1 << 1) | (1 << 9) | (1 << 19);
+	return success && (r[2] & ecx_mask) == ecx_mask;
+
+	// Alternative methods that weren't used:
+	//   - ICC's _may_i_use_cpu_feature: the other methods should work too.
+	//   - GCC >= 6 / Clang / ICX __builtin_cpu_supports(""pclmul"")
+	//
+	// CPUID decding is needed with MSVC anyway and older GCC. This keeps
+	// the feature checks in the build system simpler too. The nice thing
+	// about __builtin_cpu_supports would be that it generates very short
+	// code as is it only reads a variable set at startup but a few bytes
+	// doesn't matter here.
+}
+#endif
+
+
+#define MASK_L(in, mask, r) r = _mm_shuffle_epi8(in, mask);
+#define MASK_H(in, mask, r) \
+	r = _mm_shuffle_epi8(in, _mm_xor_si128(mask, vsign));
+#define MASK_LH(in, mask, low, high) \
+	MASK_L(in, mask, low) MASK_H(in, mask, high)
+
+#define FOLD \
+	*v1 = _mm_xor_si128(*v1, _mm_clmulepi64_si128(*v0, vfold16, 0x00)); \
+	*v0 = _mm_xor_si128(*v1, _mm_clmulepi64_si128(*v0, vfold16, 0x11));
+
+#define CRC_SIMD_LOOP \
+	while (aligned_buf < end) { \
+		FOLD \
+		*v1 = _mm_load_si128(aligned_buf++); \
+	}
+
+#ifdef CRC_CLMUL
+
+#include <immintrin.h>
+
+
+#if (defined(__GNUC__) || defined(__clang__)) && !defined(__EDG__)
+__attribute__((__target__(""ssse3,sse4.1,pclmul"")))
+#endif
+#if lzma_has_attribute(__no_sanitize_address__)",146,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af",0,0,"","","","none"
"2023-09-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 16:26:43","2023-09-29 16:26:43","created",1341575935,"This #if needs to be:
`#if !defined(HAVE_ENCODERS) && ((defined(__x86_64__) && defined(__SSSE3__) \
			&& defined(__SSE4_1__) && defined(__PCLMUL__)) \
		|| (defined(__e2k__) && __iset__ >= 6))`

The `!defined(HAVE_ENCODERS)` part is needed because the LZ encoder needs the `lzma_crc32_table`. See lz_encoder_hash.h if you are interested.","src/liblzma/check/crc32_table.c",7,18,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,11 +12,22 @@
 
 #include ""common.h""
 
+
+// FIXME: Compared to crc32_fast.c this has to check for __x86_64__ too
+// so that in 32-bit builds crc32_x86.S won't break due to a missing table.
+#if (defined(__x86_64__) && defined(__SSSE3__) \",7,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af",0,0,"","","","none"
"2023-09-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 16:34:28","2023-09-29 16:34:27","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 16:26:44","2023-09-29 16:26:43","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 15:09:50","2023-09-29 15:09:50","created",1341482584,"This page is no longer available, so this is a good time to update the link if we can. Is there another publicly available link where the PDF can be viewed? If not, we should remove the link altogether. The GitHub link works so we can at least update the (URLs were checked on ) part.","src/liblzma/check/crc32_fast.c",14,15,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -3,13 +3,28 @@
 /// \file       crc32.c
 /// \brief      CRC32 calculation
 ///
-/// Calculate the CRC32 using the slice-by-eight algorithm.
+/// There are two methods in this file.
+/// crc32_generic uses the slice-by-eight algorithm.
 /// It is explained in this document:
 /// http://www.intel.com/technology/comms/perfnet/download/CRC_generators.pdf
 /// The code in this file is not the same as in Intel's paper, but
 /// the basic principle is identical.
+///
+/// crc32_clmul uses 32/64-bit x86 SSSE3, SSE4.1, and CLMUL instructions.
+/// It was derived from
+/// https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/fast-crc-computation-generic-polynomials-pclmulqdq-paper.pdf",14,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","4f4fa67bb0ece999a959680cb19f8d977b72363c",0,0,"","","","none"
"2023-09-29 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 15:02:03","2023-09-29 15:02:03","created",1341474386,"I think this was missing from the first patchset, so good that you added it this time. Make sure to test and build with CMake if you can. The CMakeLists.txt needs to be updated in a similar way for the new crc_common.h (and removing crc_macros.h)","src/liblzma/check/Makefile.inc",5,15,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,7 +12,7 @@ EXTRA_DIST += \
 liblzma_la_SOURCES += \
 	check/check.c \
 	check/check.h \
-	check/crc_macros.h
+	check/crc_common.h",5,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af",0,0,"","","","none"
"2023-09-29 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 15:12:40","2023-09-29 15:12:40","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 15:09:51","2023-09-29 15:09:50","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 15:02:04","2023-09-29 15:02:03","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-29 14:31:29","1970-01-01 00:00:00","none",0,"","",0,0,"w32_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 14:00:00","IssueCommentEvent","JiaT75","llvm/llvm-project","2023-09-29 14:11:38","2023-09-29 14:11:37","created",1740960310,"Hello!

> So the core of the issue, is that the toolchain directories, `<toolchain>/lib` and `<toolchain>/lib/clang/<ver>/lib`, are searched before the current directory. Generally, one could think that's reasonable, but:

I also ran into this bug a few days ago and have been investigated it a bit. I was planning on submitting a bug report today but you beat me to it. You did a better job than I would have writing it up so its good that you did :)
I believe this is serious problem since it can lead to unexpected results when linking. 

I see in the release notes for 17.0.1:
""By default lld-link will now search for libraries in the toolchain directories. Specifically it will search: <toolchain>/lib, <toolchain>/lib/clang/<version>/lib and <toolchain>/lib/clang/<version>/lib/windows.""

In my case, my CI toolchain caught the bug in 17.0.1. I am building liblzma.a and disabling various features and testing that the build and tests are successful. The problem is that on MSYS2 CLANG64 environment liblzma.a is installed in the system libraries (/clang64/lib/). So when building the xz.exe command line tool, it links with the system liblzma.a instead of the one in the local directory.

This causes an obvious problem if trying to build and distribute a new version of a program that depends on a library built locally.

So it makes sense why this issue did not appear until 17.0.1. The expected behavior should be to check the local directory first, then the toolchain directories. I believe this problem is only with the COFF backend since I could not reproduce it on my Ubuntu machine after upgrading to the 17.0.1 release. It possible I set up my test wrong so don't believe me 100%.","",0,0,"","none","JiaT75",67779,"lld looks for libraries given via relative paths at wrong place (relative to system paths)","['lld']","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 14:50:58","2023-09-29 14:50:57","created",1741017862,"The issues preventing Windows-CI from passing have been fixed on master. There were actually two problems, both related to Clang 17.0.1 release. If you are curious, [this](https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f) and [this](https://github.com/tukaani-project/xz/commit/01e34aa1171b04f8b28960b1cc6135a903e0c13d) are the commits. The related bugs for Clang are in the commit messages :)

So feel free to continue your work on a PR now that the issues are resolved. Thanks for bringing this to our attention!","",0,0,"","none","JiaT75",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",3,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-29 14:27:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-09-28 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-28 13:44:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/debug_CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-09-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-27 15:50:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/debug_CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-27 15:36:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/debug_CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-27 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-27 14:33:04","1970-01-01 00:00:00","none",0,"","",0,0,"debug_CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-27 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-27 12:28:00","2023-09-27 12:27:59","created",1737294180,"@gabibguti It looks like Windows CI is broken on the master branch, so thanks for letting us know. I have it set it up to only run manually because it runs much slower than Ubuntu and Mac OS runners. I suppose I should manually run it more often.

We have been doing a few Windows related changes for xz recently so thats likely what broke it. I will investigate the issue and let you know when  it is fixed.","",0,0,"","none","JiaT75",66,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",5,"CONTRIBUTOR","2023-09-26 17:54:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-26 16:05:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-26 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 15:29:41","2023-09-26 15:29:41","created",1337407471,"It seems worth combining this file and crc_macros.h into a single common crc header file. At this point crc_clmul_common.h does more than just clmul things since it also defines CRC_GENERIC.

I wouldn't put these things into check.h since they are specific for just crc32 and crc64. So maybe crc_common.h make sense after all.","src/liblzma/check/crc_clmul_common.h",1,1,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9",0,0,"","","","none"
"2023-09-26 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 15:14:56","2023-09-26 15:14:57","created",1337383917,"Did you test this with crc32? I would guess small inputs it have the same performance effect as crc64 but we might want to improve the comment if the impact is difference","src/liblzma/check/crc_clmul_common.h",37,38,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,6 +12,93 @@
 //
 ///////////////////////////////////////////////////////////////////////////////
 
+#undef CRC_GENERIC
+#undef CRC_CLMUL
+#undef CRC_USE_GENERIC_FOR_SMALL_INPUTS
+
+// If CLMUL cannot be used then only the generic slice-by-four is built.
+#if !defined(HAVE_USABLE_CLMUL)
+#	define CRC_GENERIC 1
+
+// If CLMUL is allowed unconditionally in the compiler options then the
+// generic version can be omitted. Note that this doesn't work with MSVC
+// as I don't know how to detect the features here.
+//
+// NOTE: Keep this this in sync with crc32_table.c.
+#elif (defined(__SSSE3__) && defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+#	define CRC_CLMUL 1
+
+// Otherwise build both and detect at runtime which version to use.
+#else
+#	define CRC_GENERIC 1
+#	define CRC_CLMUL 1
+
+/*
+	// The generic code is much faster with 1-8-byte inputs and has",37,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9",0,0,"","","","none"
"2023-09-26 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 15:00:44","2023-09-26 15:00:43","created",1735724045,"Hello!

Thanks for the PR, this is something we have wanted to implement since CLMUL was added for CRC64. 70% speed up over the generic method is a great speedup!

If you are willing, can you do some additional benchmarks for us since you already have a framework setup? We are wondering what impact the compiler has, so can you show us differences between using GCC and Clang? This especially matters when it comes to the 3% speed up you mentioned for the inline asm. 3% isn't that significant, especially if its only for CRC32. It adds extra complexity to the code and makes it harder to maintain long-term, so we want to make sure it is worth it. Similarly, can you try making CRC_SIMD_BODY an inline function instead of a macro? This could make it easier to read/maintain. If it has a significant impact on performance then we should stick to a macro.

So in summary, can you benchmark:

- Impact of using GCC versus Clang in general
- Impact of  removing the inline asm (GCC and Clang both)
- Impact of replacing CRC_SIMD_BODY macro with inline function (GCC and Clang both)

You don't need to make this change now, but before merging it would be great if you can clean up the commits:

- Label each commit with ""liblzma:"". We do this since it helps keep the commit log consistent and organized.
- Please squash commits 1, 3, and 5 into a single commit. I understand this is how you developed it and the thought process makes sense. But it will help the commit log stay cleaner if we don't have to create crc_clmul_macros.h just to later rename its variables and rename the file itself.

Feel free to add fix up commits as we go through the review process but at the end we will need these changes.","",0,0,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-26 15:29:42","2023-09-26 15:29:41","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-26 15:14:57","2023-09-26 15:14:56","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-26 15:09:33","2023-09-26 15:09:32","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 12:29:05","2023-09-26 12:29:05","created",1735447590,"Hello!

Thanks again for the security advice. I suppose the only downside for this is not receiving potential bugfixes for the version we reference for the action. This can be mitigated by me not being lazy and subscribing to receive notifications when these repositories publish a release, so I have done that :)

Feel free to provide a PR for this. I believe all that needs changing is:

ci.yml
- actions/checkout
- actions/upload-artifact

windows-ci.yml
- actions/checkout
- actions/upload-artifact
- msys2/setup-msys2","",0,0,"","none","JiaT75",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 12:00:00","WatchEvent","JiaT75","actions/checkout","2023-09-26 12:21:18","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 12:00:00","WatchEvent","JiaT75","actions/upload-artifact","2023-09-26 12:20:27","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 12:00:00","WatchEvent","JiaT75","msys2/setup-msys2","2023-09-26 12:21:49","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-25 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-25 17:18:55","1970-01-01 00:00:00","none",0,"","",0,0,"xz_update_getoptlong","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 17:10:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,16,"","","","none"
"2023-09-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 17:01:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-09-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 17:17:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-25 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 16:31:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-25 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 16:24:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,14,"","","","none"
"2023-09-25 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 14:20:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,16,"","","","none"
"2023-09-24 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-24 15:05:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",19,16,"","","","none"
"2023-09-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-24 14:11:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-09-24 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-24 13:36:24","1970-01-01 00:00:00","none",0,"","",0,0,"xz_update_getoptlong","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-21 14:08:20","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_getoptlong_replacement","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 13:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2023-09-21 13:37:57","2023-09-21 13:37:57","none",127985918,"It could be worth it to mention the version numbers when this was supported. So this line could read:

MSVC / Visual Studio 2015 and later should be able to build
liblzma (XZ Utils 5.2.0 and later), xzdec, and xz (XZ Utils 5.6.0 and later).

This way someone viewing this file will not be confused when their old release does not build xzdec and xz for MSVC.","windows/INSTALL-MSVC.txt",5,9,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"213bbbd7bab6c8f82cbef294be3d5d2ed3a2903f","",0,0,"","","","none"
"2023-09-21 12:00:00","ForkEvent","JiaT75","MicrosoftDocs/cpp-docs","2023-09-21 12:29:10","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 12:00:00","IssuesEvent","JiaT75","MicrosoftDocs/cpp-docs","2023-09-21 12:27:57","2023-09-21 12:27:56","opened",0,"
The description for [Windows platforms (CRT)](https://learn.microsoft.com/en-us/cpp/c-runtime-library/windows-platforms-crt?view=msvc-170) is:

""Lists the operating systems that are the CRT supports.""

This should be reworded. Perhaps ""Lists the operating systems that CRT supports""?

---
#### Document Details

⚠ *Do not edit this section. It is required for learn.microsoft.com ➟ GitHub issue linking.*

* ID: f1ae61b9-4b71-7037-e185-db8ea4c720df
* Version Independent ID: 08af1eca-0b5b-146b-e97c-9a42f413c576
* Content: [Compatibility](https://learn.microsoft.com/en-us/cpp/c-runtime-library/compatibility?view=msvc-170)
* Content Source: [docs/c-runtime-library/compatibility.md](https://github.com/MicrosoftDocs/cpp-docs/blob/main/docs/c-runtime-library/compatibility.md)
* Product: **visual-cpp**
* Technology: **cpp-ucrt**
* GitHub Login: @TylerMSFT
* Microsoft Alias: **twhitney**","",0,0,"","none","JiaT75",4715,"Reword line in Related Articles table on the C Runtime Library Compatibility page","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 12:00:00","PullRequestEvent","JiaT75","MicrosoftDocs/cpp-docs","2023-09-21 12:32:09","2023-09-21 12:32:08","opened",0,"Fixes #4715","",0,0,"","none","JiaT75",4716,"Update C Runtime Library Compatibility page.","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","patch-1","a7e998b4b227d9b961441ea748380908d978cc94","main","62551ef7c48facbc41df385e6091ce328cb1a8f8",0,0,0,"unknown","",0,1,1,1,1,1,"",0,"","",0,0,"","","","none"
"2023-09-21 12:00:00","PushEvent","JiaT75","JiaT75/cpp-docs","2023-09-21 12:31:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/patch-1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-19 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-19 12:08:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-09-16 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-16 15:22:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-09-15 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-15 18:07:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-09-15 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-15 12:50:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,7,"","","","none"
"2023-09-14 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 15:24:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-09-14 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-14 14:53:04","1970-01-01 00:00:00","none",0,"","",0,0,"clmul_disable_asan","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-14 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 14:52:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2023-09-14 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-14 13:16:23","1970-01-01 00:00:00","none",0,"","",0,0,"clmul_disable_asan","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-14 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 13:40:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clmul_disable_asan","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-14 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 13:44:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clmul_disable_asan","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,1,"","","","none"
"2023-09-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-13 15:38:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,7,"","","","none"
"2023-09-12 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-12 14:51:44","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_clock_monotonic_bugfix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:21:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:15:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:17:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:38:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:50:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-09-12 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-12 13:59:54","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_clock_monotonic_bugfix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 12:17:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-08 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-08 13:42:00","1970-01-01 00:00:00","none",0,"","",0,0,"riscv_filter","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-09-08 13:39:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-09-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-08 13:44:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,6,"","","","none"
"2023-09-05 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-05 12:10:50","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_getoptlong_replacement","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-30 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-08-30 15:30:43","2023-08-30 15:30:42","created",1699400056,"Hello!

Thank your for the PR. I have been wanting to add MSVC support to xz but have not had the time yet. Unfortunately this cannot be accepted in its current state because many things are preventing this from building with MSVC.

First, there are no build system changes. We are moving away from supporting the Visual Studio Solution Files starting with the upcoming 5.6.0 release planned for the end of this year. Instead we would like our Windows users to use CMake instead to generate the Visual Studio files.

Second, there are functions that I don't think Visual Studio default C libraries support. Specifically the functions in mytime.c would still need to be ported for this to compile.

I did not try to build this yet since the build system changes were not made. I did not review closely yet the changes that were made to alias functions and structs in file_io.* so I cannot comment one way or another on those.

I don't mean to discourage your efforts on this. I do want xz to build with MSVC eventually but it should be done small stages. The first stage I would start with is by adding CMake support for getopt_long() replacement. The Autotools build has support for this and the replacement files are in /lib. The next stage could be porting the file_io functions, perhaps what you have already works for that. Then maybe the mytime.c functions. Eventually, we can remove the ""NOT MSVC"" check for CMake building the xz target in CMakeLists.txt when we are confident things are working well.","",0,0,"","none","JiaT75",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-29 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-08-29 12:21:13","2023-08-29 12:21:13","created",1697337999,"Hello!

This CVE was never reported to us, so we do not have any further information about it. So at this moment we cannot say which versions of XZ Utils this effects or if it was unknowingly patched by a change made after 5.2.5.

If you or anyone else has additional information about this CVE please share it over email or through a [GitHub security advisory](https://github.com/tukaani-project/xz/security/advisories). For more information please see [our Security Policy](https://github.com/tukaani-project/xz/blob/master/.github/SECURITY.md).

Thanks for bringing this to our attention.","",0,0,"","none","JiaT75",61,"Fix for CVE-2020-22916","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-29 12:00:00","IssueCommentEvent","JiaT75","xz-mirror/xz-mirror","2023-08-29 12:04:44","2023-08-29 12:04:43","created",1697311620,"Thanks @simnalamburt. I think that is sufficient. And thanks for maintaining this mirror for people who could not otherwise access the source code for XZ Utils. Your efforts are appreciated.","",0,0,"","none","JiaT75",5,"Issues part is not opened for xz repository","[]","closed",0,"","[]",11,"NONE","2023-08-26 12:11:57","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-28 15:17:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-08-28 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-08-28 14:15:24","1970-01-01 00:00:00","none",0,"","",0,0,"index_file_size_bug","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-28 12:00:00","IssueCommentEvent","JiaT75","xz-mirror/xz-mirror","2023-08-28 12:45:50","2023-08-28 12:45:49","created",1695637145,"After discussing with Larzhu, we agreed that we do not wish to set up this redirection. While it is a clever idea, the redirections mentioned by @Neustradamus were all projects that moved the official repository from one namespace to another. This is different than redirecting an unaffiliated mirror to the official repository.

We announced XZ Utils moved to GitHub many months ago through our public mailing list and project website, so there is not much room for users to complain they were not notified with enough time to update their links :)

Again, @simnalamburt is free to maintain this mirror how he pleases, but we do not feel comfortable transferring the official XZ Utils repository to the xz-mirror organization, even for a few minutes. We appreciate the update to xz-mirror/xz's About section notifying users about the location of the official repository and encourage either deprecating this mirror or continuing to keep it up to date. This is important to be sure everyone is using an updated version of our project and makes it easier for us to maintain things.

So this may inconvenience a few users who need to update their links but that is the best solution from our perspective.","",0,0,"","none","JiaT75",5,"Issues part is not opened for xz repository","[]","closed",0,"","[]",8,"NONE","2023-08-26 12:11:57","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-26 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-26 13:29:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-26 12:00:00","IssueCommentEvent","JiaT75","xz-mirror/xz-mirror","2023-08-26 12:04:50","2023-08-26 12:04:49","created",1694326633,"Hello @Neustradamus!

Larzhu and I are not affiliated with this repository or the organization so we do not have the ability to make any of these changes. My understanding is that this organization provided a GitHub mirror long before we officially moved the XZ Utils repository to GitHub. We maintain a [mirror](https://git.tukaani.org/) but that is mainly for people who had been pulling from the old official repositories.

This organization is obviously free to continue mirroring however they wish but the most up to date version of XZ Utils will always be [here](https://github.com/tukaani-project/xz).","",0,0,"","none","JiaT75",5,"Issues part is not opened for xz repository","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-24 12:00:00","WatchEvent","JiaT75","plougher/squashfs-tools","2023-08-24 12:28:50","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-16 16:00:00","WatchEvent","JiaT75","codespell-project/codespell","2023-08-16 16:01:38","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-15 12:00:00","DeleteEvent","JiaT75","JiaT75/wasmtime","2023-08-15 12:11:36","1970-01-01 00:00:00","none",0,"","",0,0,"jiat75_docs","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-14 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-08-14 12:49:16","1970-01-01 00:00:00","none",0,"","",0,0,"win95_small_constructor","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-14 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-14 12:47:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-08-11 15:00:00","PullRequestEvent","JiaT75","bytecodealliance/wasmtime","2023-08-11 15:46:26","2023-08-11 15:46:25","opened",0,"Hi!

I was working through your tutorial in the beginning of my journey to port something to be able to run in wasi-sdk. This PR should fix a minor copy/paste error and update some of the error messages.

wasi-sdk version: 20.11gf3b43c703f1a (compiled/installed from source)
wasmtime-cli: 11.0.1

I hope this helps!","",0,0,"","none","JiaT75",6839,"Minor documentation updates to docs/WASI-tutorial.md","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","jiat75_docs","cda80c61f86cc8e71549788c4688533ef3f40d53","main","137c6f6d6cfed8968151036033b521c2c3775534",0,0,0,"unknown","",0,1,2,4,5,1,"",0,"","",0,0,"","","","none"
"2023-08-11 15:00:00","ForkEvent","JiaT75","bytecodealliance/wasmtime","2023-08-11 15:00:23","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-11 15:00:00","PushEvent","JiaT75","JiaT75/wasmtime","2023-08-11 15:34:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/jiat75_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-11 15:00:00","WatchEvent","JiaT75","bytecodealliance/wasmtime","2023-08-11 15:47:05","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-09 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-08-09 12:58:39","1970-01-01 00:00:00","none",0,"","",0,0,"win95_small_constructor","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-08 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-08-08 12:08:01","2023-08-08 12:08:00","closed",0,"```
mythread.h:381:48: error: 'once' undeclared (first use in this function); did you mean 'once_'?
  381 |                         if (!InitOnceComplete(&once, 0, NULL)) \
      |                                                ^~~~
crc64_small.c:47:9: note: in expansion of macro 'mythread_once'
   47 |         mythread_once(crc64_init);
      |         ^~~~~~~~~~~~~
```

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","Jamaika1",59,"Fix error mythread.h","[]","closed",0,"","[]",0,"NONE","2023-08-08 12:08:00","2023-08-08 12:08:00","6bf33b704cd31dccf25e68480464aa22d3fcad5a","[]","[]","master-1","ba0315406a57514aa54d4847073300db91220594","master","80cb961e5380a3878246d41341ff91378ca59e05",1,0,0,"unknown","JiaT75",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2023-08-08 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-08-08 12:10:40","2023-08-08 12:10:40","created",1669493212,"@Jamaika1 Thanks for the PR! Looks like this typo had been in the code for some time, so your fix is very appreciated.

If you would like your name to appear in the `THANKS` file, I will need the name you wish to appear there since I could not find it on your profile. If you wish to stay anonymous that is ok too :)","",0,0,"","none","JiaT75",59,"Fix error mythread.h","[]","closed",0,"","[]",1,"CONTRIBUTOR","2023-08-08 12:08:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-08 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-08 12:08:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-04 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-04 15:25:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-03 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-03 12:46:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-08-02 13:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-08-02 13:03:14","1970-01-01 00:00:00","published",0,"The Doxygen-generated liblzma API documentation is available at
<https://tukaani.org/xz/liblzma-api/files.html>.

Here is an extract from the NEWS file:

```
5.4.4 (2023-08-02)

    * liblzma and xzdec can now build against WASI SDK when threading
      support is disabled. xz and tests don't build yet.

    * CMake:

        - Fixed a bug preventing other projects from including liblzma
          multiple times using find_package().

        - Don't create broken symlinks in Cygwin and MSYS2 unless
          supported by the environment. This prevented building for the
          default MSYS2 environment. The problem was introduced in
          xz 5.4.0.

    * Documentation:

        - Small improvements to man pages.

        - Small improvements and typo fixes for liblzma API
          documentation.

    * Tests:

        - Added a new section to INSTALL to describe basic test usage
          and address recent questions about building the tests when
          cross compiling.

        - Small fixes and improvements to the tests.

    * Translations:

        - Fixed a mistake that caused one of the error messages to not
          be translated. This only affected versions 5.4.2 and 5.4.3.

        - Updated the Chinese (simplified), Croatian, Esperanto, German,
          Korean, Polish, Romanian, Spanish, Swedish, Ukrainian, and
          Vietnamese translations.

        - Updated the German, Korean, Romanian, and Ukrainian man page
          translations.
```
","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.4","XZ Utils 5.4.4 Stable","none"
"2023-08-02 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-02 12:44:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-01 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-01 14:45:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-01 12:00:00","WatchEvent","JiaT75","WebAssembly/wasi-sdk","2023-08-01 12:53:18","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-31 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-31 14:36:33","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-31 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-31 12:01:38","2023-07-31 12:01:38","created",1658235632,"Thanks for the typo fixes! Maybe we should include codespell as part of the CI pipeline or a local git hook. Or even a manual step for myself before pushing...","",0,0,"","none","JiaT75",58,"Fix typos found by codespell","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-31 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-31 12:02:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-28 15:51:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,0,"","","","none"
"2023-07-28 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-28 14:21:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-27 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-27 13:18:08","2023-07-27 13:18:08","created",1653613611,"On second thought, will be more complicated that I initially thought since `signals_init()` needs to be disabled too. I will merge what you have once I make a fix for the xz side. Thanks for you contributions!","",0,0,"","none","JiaT75",57,"Support build target `wasm32-unknown-unknown` in clang when `ENABLE_THREADS=OFF`","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-27 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-27 13:03:32","2023-07-27 13:03:32","created",1653583605,"Hi! Thanks again for the very detailed PR. I looked more into wasm signal support since at first I thought it was some sort of bug that the signal emulation did not define `sigset_t` or `sigprocmask()`. This seems intentional however so your PR is certainly needed for a successful port to web assembly.

What you have so far seems like it is enough for liblzma to build, but we also should support an xz port. This should be easy to add just by following the example of VMS in src/xz/signal.*. Since the only functions in xz that use `mythread_sigmask()` it should be enough to define signals_block() and signals_unblock() as no-ops in signal.h (and remove implementation from signal.c).

Let me know if you have questions or if something else is preventing us from building xz with wasi-sdk","",0,0,"","none","JiaT75",57,"Support build target `wasm32-unknown-unknown` in clang when `ENABLE_THREADS=OFF`","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-26 14:15:35","2023-07-26 14:15:35","created",1651896648,"Hi! Thanks for the PR. Unfortunatly, I do not think this PR solves a problem. I am guessing the issue is with your build setup instead. If you look at `mythread.h`, the functions referenced in your error message are in the `#elif defined(MYTHREAD_POSIX)` block and should be removed by the preprocessor.

If you are using our `CMakeLists.txt`, then setting `ENABLE_THREADS=OFF` will ensure `MYTHREAD_POSIX` is never added to the compile definitions. Its possible a `make clean` or removing the `CMakeCache.txt` could solve your problem.

Compiling liblzma with WebAssembly sounds like a great project though!","",0,0,"","none","JiaT75",56,"liblzma: Support wasi-sdk with `ENABLE_THREADS=OFF` option","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-26 12:28:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-26 12:36:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-25 13:26:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-24 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-07-24 15:35:19","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-22 10:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-07-22 10:31:45","2023-07-22 10:31:44","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
No Windows CI at all.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/18


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- autotools build set for Windows added
- build is using msys2 with UCRT64 toolchain

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
CMake build part is not provided as part of this PR.

Additional changes:
* bumped checkout action to v3 (not really critical, but I did while trying to understand build failure)
* fixed ""false positive"" uninitialized warning with empty in stream_encoder.c
* fixed missing include in memcmplen.h, because this include is not provided if --disable-threads is requested for build

Windows build run is very slow (comparing to others), but I don't think it could be somehow improved.","",0,0,"","none","arixmkii",34,"Enable CI on Windows hosts for autotools","['CI/CD']","closed",0,"","[]",2,"NONE","2023-07-22 10:31:44","1970-01-01 00:00:00","e3805b4545410a305e2ef15bf8aa70b68cff64f9","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","fb9c50f38a17bf37581de4034b36c8df8ec90a87",0,0,0,"unknown","",5,0,1,96,6,3,"",0,"","",0,0,"","","","none"
"2023-07-22 10:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-22 10:34:25","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:39:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:31:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:28:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:25:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:31:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:06:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:05:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:01:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:56:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:53:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:50:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:29:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:45:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:52:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:25:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:42:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:59:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:53:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:19:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:31:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:57:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:21:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:56:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:51:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:45:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:42:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-07-21 12:59:15","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-21 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 10:11:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-20 14:12:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-20 13:24:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",13,13,"","","","none"
"2023-07-19 14:00:00","IssuesEvent","JiaT75","llvm/llvm-project","2023-07-19 14:25:47","2023-07-19 14:25:47","opened",0,"Hello!

Clang 16.0.0 and older report a warning when compiling a program that uses `__attribute__((__ifunc__()))` with `-Wunused-function`. The resolver function appears to trigger this when it is only referenced by the `__attribute__`. Here is an example program that should trigger the warning:

```C
static void resolved(void) {
    return;
}

static void (*resolver (void)) (void) {
	return resolved;
}

void indirect_function(void) __attribute__((__ifunc__(""resolver"")));

int main() {
    indirect_function();
}
```
GCC does not issue a warning for the above program. [Here](https://godbolt.org/z/9f1TnjG7h) is a godbolt.org snippet of the above code to allow you to easily test it. Let me know if you need anymore information.","",0,0,"","none","JiaT75",63957,"Clang reporting unused function with ifunc resolver","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-19 14:00:00","WatchEvent","JiaT75","llvm/llvm-project","2023-07-19 14:36:31","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-18 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-18 15:25:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-17 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-17 16:53:18","1970-01-01 00:00:00","none",0,"","",0,0,"docs_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-17 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 16:52:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-07-17 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 16:07:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/docs_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-17 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-07-17 15:34:56","2023-07-17 15:34:55","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
xz does not have an option to convert a single string to a full filter chain

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- New --filters command line option
- --long-help update
- man page update

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",12,"Filter to string command line interface","['5.5.0']","closed",0,"","[]",0,"MEMBER","2023-07-17 15:34:55","2023-07-17 15:34:55","f99e2e4e53b7ea89e4eef32ddd4882e0416357c9","[]","[]","filter_to_str_cli","2d1178e3cab84d6de39b4d279415305fd7c2ec92","master","2c189bb00af73dc7ba1a67a9d274d5be03ee3a88",1,0,0,"unknown","JiaT75",0,0,23,956,258,7,"",0,"","",0,0,"","","","none"
"2023-07-17 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-17 15:35:02","1970-01-01 00:00:00","none",0,"","",0,0,"filter_to_str_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-17 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 15:34:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",23,23,"","","","none"
"2023-07-17 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 15:53:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/docs_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",25,2,"","","","none"
"2023-07-14 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-07-14 15:24:25","1970-01-01 00:00:00","none",0,"","",0,0,"docs_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-14 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-14 13:36:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-14 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-14 12:45:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",22,22,"","","","none"
"2023-07-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-13 15:37:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-13 15:35:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-13 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-13 13:59:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",38,22,"","","","none"
"2023-07-10 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-10 13:13:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-10 12:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2023-07-10 12:33:14","2023-07-10 12:33:14","none",121162847,"I saw it was valid in C23 during my searches, but I probably should have mentioned this in my commit message. Oh well, anyone reading our commit messages or Changelog should hopefully know we use C99 :)","",0,0,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"17f8844e6fc355abf997d77637a7447c4f7bbcbd","",0,0,"","","","none"
"2023-07-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-08 13:39:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-07 13:00:00","PullRequestEvent","JiaT75","google/oss-fuzz","2023-07-07 13:49:31","2023-07-07 13:49:31","opened",0,"Indirect function support was added to xz on machines that support it for function dispatching. ifunc is not compatible with -fsanitize=address, so this should be disabled for fuzzing builds.","",0,0,"","none","JiaT75",10667,"xz: Disable ifunc to fix Issue 60259.","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","jiatan_xz_updates","d7e58a7704ac07a8c01e6dc7e5701728d639902d","master","451c04cf8c2ae4654d8188ab23859a1b27b4bce1",0,0,0,"unknown","",0,1,1,2,1,1,"",0,"","",0,0,"","","","none"
"2023-07-07 13:00:00","CreateEvent","JiaT75","JiaT75/oss-fuzz","2023-07-07 13:43:12","1970-01-01 00:00:00","none",0,"","",0,0,"jiatan_xz_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-07 13:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-07-07 13:44:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-07-07 13:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-07-07 13:44:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-07-07 13:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-07-07 13:45:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/jiatan_xz_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,1,"","","","none"
"2023-07-07 12:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-07-07 12:48:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",39,39,"","","","none"
"2023-07-07 12:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-07-07 12:48:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",39,39,"","","","none"
"2023-06-29 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-06-29 13:17:11","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-28 16:15:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,0,"","","","none"
"2023-06-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-28 16:08:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-06-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-28 15:57:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-06-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-28 15:56:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-06-28 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-06-28 13:33:15","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-27 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-06-27 16:01:59","2023-06-27 16:01:59","created",1609816427,"@hansjans162 Just merged from the other branch Thanks for your contribution! ","",0,0,"","none","JiaT75",53,"Replaced crc64_fast constructor with ifunc","[]","closed",0,"","[]",12,"CONTRIBUTOR","2023-06-27 15:59:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-27 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-06-27 15:59:42","2023-06-27 15:59:41","closed",0,"The ifunc attribute is a cleaner and marginally more performant
mechanism for dynamically choosing a routine at runtime.

The PR contains two parts:
1. The first replaces the crc64 construct with the ifunc resolver.
2. The second modifies the build process to account for the ifunc attribute.

HAVE_FUNC_ATTRIBUTE_IFUNC is set if ifuncs can be built
on the system. glibc has supported ifunc since version 2.11 (2009). Building for older machines
may want to manually disable ifunc support when building.
--disable-ifunc can be used with autotools and
USE_ATTR_IFUNC=OFF can be used with CMake to disable the check for ifunc support.
USE_ATTR_IFUNC defaults to ON for CMake and enable_ifunc defaults to yes for autotools.

More about ifuncs can be read [here](https://sourceware.org/glibc/wiki/GNU_IFUNC) or [here](https://www.agner.org/optimize/optimizing_cpp.pdf#page=142).


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc64\_fast currently uses the \_\_attribute\_\_ constructor to choose the crc implementation to use.


## What is the new behavior?
I replaced the \_\_attribute\_\_((\_\_constructor\_\_)) with \_\_attribute\_\_((ifunc())) in crc64_fast.c

- The HAVE_FUNC_ATTRIBUTE_IFUNC flag was added to configure.ac
- The USE_ATTR_IFUNC cmake option was added to CMakeLists.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

Functionality should be identical.


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","hansjans162",53,"Replaced crc64_fast constructor with ifunc","[]","closed",0,"","[]",11,"CONTRIBUTOR","2023-06-27 15:59:41","1970-01-01 00:00:00","8b6c2729de315dcfe9fe437903aa9ba8cb9ead14","[]","[]","ifunc-crc64-fast","063fb88a490d9b171aea43f0f7ae6e75bd6e7564","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",5,0,3,72,25,3,"",0,"","",0,0,"","","","none"
"2023-06-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-27 15:59:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,0,"","","","none"
"2023-06-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-27 15:56:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc-crc64-fast-v2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-06-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-27 15:39:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc-crc64-fast-v2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-06-27 14:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-06-27 14:10:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",504,504,"","","","none"
"2023-06-27 14:00:00","PushEvent","JiaT75","JiaT75/oss-fuzz","2023-06-27 14:10:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",504,504,"","","","none"
"2023-06-23 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-06-23 15:03:07","2023-06-23 15:03:07","created",1239931909,"To keep the style consistent, please change the pointer declarations to be type *var_name instead of type* var_name","src/liblzma/check/crc64_fast.c",38,464,"","none","JiaT75",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -438,35 +438,47 @@ is_clmul_supported(void)
 }
 
 
-#ifdef HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR
-#	define CRC64_FUNC_INIT
-#	define CRC64_SET_FUNC_ATTR __attribute__((__constructor__))
-#else
-#	define CRC64_FUNC_INIT = &crc64_dispatch
-#	define CRC64_SET_FUNC_ATTR
-static uint64_t crc64_dispatch(const uint8_t *buf, size_t size, uint64_t crc);
-#endif
+#ifdef HAVE_FUNC_ATTRIBUTE_IFUNC
+#	ifdef __cplusplus
+// The extern variable ""C"" is required to work with C++'s function name 
+// mangling in C++. If this is not included, the ""crc64_resolver"" will be
+// mangled and won't compile.
+extern ""C"" {
+#	endif
 
+// The resolver must accept no arguments (void), and must specify the return and
+// parameter types in order to avoid warnings. The resolved function return type
+// appears where a regular function's return type would be, and the resolved
+// functions parameters appear after the resolver's arguments (void).
+static uint64_t
+(*crc64_resolver(void)) (const uint8_t*, size_t, uint64_t)
+{
+	return is_clmul_supported() ? crc64_clmul : crc64_generic;
+}
+
+#	ifdef __cplusplus
+}
+#	endif
 
-// Pointer to the the selected CRC64 method.
-static uint64_t (*crc64_func)(const uint8_t *buf, size_t size, uint64_t crc)
-		CRC64_FUNC_INIT;
+// The resolved function can be called as crc64_func().
+static uint64_t crc64_func(const uint8_t* buf, size_t size, uint64_t crc)",38,"d5f5480c575002dc7175ba48646dea5c041aafa7","d5f5480c575002dc7175ba48646dea5c041aafa7",0,0,"","","","none"
"2023-06-23 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-06-23 15:03:08","2023-06-23 15:03:08","created",0,"The ifunc attribute is a cleaner and marginally more performant
mechanism for dynamically choosing a routine at runtime.

The PR contains two parts:
1. The first replaces the crc64 construct with the ifunc resolver.
2. The second modifies the build process to account for the ifunc attribute.

HAVE_FUNC_ATTRIBUTE_IFUNC is set if ifuncs can be built
on the system. glibc has supported ifunc since version 2.11 (2009). Building for older machines
may want to manually disable ifunc support when building.
--disable-ifunc can be used with autotools and
USE_ATTR_IFUNC=OFF can be used with CMake to disable the check for ifunc support.
USE_ATTR_IFUNC defaults to ON for CMake and enable_ifunc defaults to yes for autotools.

More about ifuncs can be read [here](https://sourceware.org/glibc/wiki/GNU_IFUNC) or [here](https://www.agner.org/optimize/optimizing_cpp.pdf#page=142).


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc64\_fast currently uses the \_\_attribute\_\_ constructor to choose the crc implementation to use.


## What is the new behavior?
I replaced the \_\_attribute\_\_((\_\_constructor\_\_)) with \_\_attribute\_\_((ifunc())) in crc64_fast.c

- The HAVE_FUNC_ATTRIBUTE_IFUNC flag was added to configure.ac
- The USE_ATTR_IFUNC cmake option was added to CMakeLists.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

Functionality should be identical.


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","hansjans162",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-06-23 11:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-06-23 11:38:00","2023-06-23 11:38:00","created",1239714381,"This option name is a bit misleading. Enabling it will only check for __attribute__((ifunc())) support, not guarantee they are used. Maybe rename it to CHECK_ATTR_IFUNC?","CMakeLists.txt",8,770,"","none","JiaT75",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -763,6 +763,31 @@ check_c_source_compiles(""
 cmake_pop_check_state()
 tuklib_add_definition_if(liblzma HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR)
 
+# Check for __attribute__((ifunc())) support.
+option(USE_ATTR_IFUNC ""Use __attribute__((ifunc())) if supported by the system""
+        ON)
+
+if (USE_ATTR_IFUNC)",8,"d5f5480c575002dc7175ba48646dea5c041aafa7","6c03aaf6bc1f1608ce3ef8cf61b42680f7cdfaed",0,0,"","","","none"
"2023-06-23 11:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-06-23 11:48:41","2023-06-23 11:48:42","created",1239722714,"We try to keep an 80 character width in this project. Can you wrap these comment lines at 80?","src/liblzma/check/crc64_fast.c",20,449,"","none","JiaT75",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -438,35 +438,47 @@ is_clmul_supported(void)
 }
 
 
-#ifdef HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR
-#	define CRC64_FUNC_INIT
-#	define CRC64_SET_FUNC_ATTR __attribute__((__constructor__))
-#else
-#	define CRC64_FUNC_INIT = &crc64_dispatch
-#	define CRC64_SET_FUNC_ATTR
-static uint64_t crc64_dispatch(const uint8_t *buf, size_t size, uint64_t crc);
-#endif
+#ifdef HAVE_FUNC_ATTRIBUTE_IFUNC
+#	ifdef __cplusplus
+// The extern variable ""C"" is required to work with C++'s function name 
+// mangling in C++. If this is not included, the ""crc64_resolver"" will be
+// mangled and won't compile.
+extern ""C"" {
+#	endif
 
+// The resolver must accept no arguments (void), and must specify the return and",20,"d5f5480c575002dc7175ba48646dea5c041aafa7","d5f5480c575002dc7175ba48646dea5c041aafa7",0,0,"","","","none"
"2023-06-23 11:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-06-23 11:48:57","2023-06-23 11:48:57","created",1239722937,"There is a trailing space at the end of this line","src/liblzma/check/crc64_fast.c",14,443,"","none","JiaT75",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -438,35 +438,47 @@ is_clmul_supported(void)
 }
 
 
-#ifdef HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR
-#	define CRC64_FUNC_INIT
-#	define CRC64_SET_FUNC_ATTR __attribute__((__constructor__))
-#else
-#	define CRC64_FUNC_INIT = &crc64_dispatch
-#	define CRC64_SET_FUNC_ATTR
-static uint64_t crc64_dispatch(const uint8_t *buf, size_t size, uint64_t crc);
-#endif
+#ifdef HAVE_FUNC_ATTRIBUTE_IFUNC
+#	ifdef __cplusplus
+// The extern variable ""C"" is required to work with C++'s function name ",14,"d5f5480c575002dc7175ba48646dea5c041aafa7","d5f5480c575002dc7175ba48646dea5c041aafa7",0,0,"","","","none"
"2023-06-23 11:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-06-23 11:36:09","2023-06-23 11:36:08","created",1604156993,"Thanks for the PR and the helpful links! Overall this seems like a nice improvement to our function picking strategy for CRC64. It will likely be useful when we implement CRC32 CLMUL too :)

I want to do a bit more research about the GNU indirect functions to make its right for this project before we decide to merge. Before that, there are a few style changes that need to be made. I will comment them separately.","",0,0,"","none","JiaT75",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-23 11:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-06-23 11:38:01","2023-06-23 11:38:00","created",0,"The ifunc attribute is a cleaner and marginally more performant
mechanism for dynamically choosing a routine at runtime.

The PR contains two parts:
1. The first replaces the crc64 construct with the ifunc resolver.
2. The second modifies the build process to account for the ifunc attribute.

HAVE_FUNC_ATTRIBUTE_IFUNC is set if ifuncs can be built
on the system. glibc has supported ifunc since version 2.11 (2009). Building for older machines
may want to manually disable ifunc support when building.
--disable-ifunc can be used with autotools and
USE_ATTR_IFUNC=OFF can be used with CMake to disable the check for ifunc support.
USE_ATTR_IFUNC defaults to ON for CMake and enable_ifunc defaults to yes for autotools.

More about ifuncs can be read [here](https://sourceware.org/glibc/wiki/GNU_IFUNC) or [here](https://www.agner.org/optimize/optimizing_cpp.pdf#page=142).


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc64\_fast currently uses the \_\_attribute\_\_ constructor to choose the crc implementation to use.


## What is the new behavior?
I replaced the \_\_attribute\_\_((\_\_constructor\_\_)) with \_\_attribute\_\_((ifunc())) in crc64_fast.c

- The HAVE_FUNC_ATTRIBUTE_IFUNC flag was added to configure.ac
- The USE_ATTR_IFUNC cmake option was added to CMakeLists.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

Functionality should be identical.


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","hansjans162",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-06-23 11:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-06-23 11:48:42","2023-06-23 11:48:42","created",0,"The ifunc attribute is a cleaner and marginally more performant
mechanism for dynamically choosing a routine at runtime.

The PR contains two parts:
1. The first replaces the crc64 construct with the ifunc resolver.
2. The second modifies the build process to account for the ifunc attribute.

HAVE_FUNC_ATTRIBUTE_IFUNC is set if ifuncs can be built
on the system. glibc has supported ifunc since version 2.11 (2009). Building for older machines
may want to manually disable ifunc support when building.
--disable-ifunc can be used with autotools and
USE_ATTR_IFUNC=OFF can be used with CMake to disable the check for ifunc support.
USE_ATTR_IFUNC defaults to ON for CMake and enable_ifunc defaults to yes for autotools.

More about ifuncs can be read [here](https://sourceware.org/glibc/wiki/GNU_IFUNC) or [here](https://www.agner.org/optimize/optimizing_cpp.pdf#page=142).


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc64\_fast currently uses the \_\_attribute\_\_ constructor to choose the crc implementation to use.


## What is the new behavior?
I replaced the \_\_attribute\_\_((\_\_constructor\_\_)) with \_\_attribute\_\_((ifunc())) in crc64_fast.c

- The HAVE_FUNC_ATTRIBUTE_IFUNC flag was added to configure.ac
- The USE_ATTR_IFUNC cmake option was added to CMakeLists.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

Functionality should be identical.


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","hansjans162",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-06-23 11:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-06-23 11:48:58","2023-06-23 11:48:58","created",0,"The ifunc attribute is a cleaner and marginally more performant
mechanism for dynamically choosing a routine at runtime.

The PR contains two parts:
1. The first replaces the crc64 construct with the ifunc resolver.
2. The second modifies the build process to account for the ifunc attribute.

HAVE_FUNC_ATTRIBUTE_IFUNC is set if ifuncs can be built
on the system. glibc has supported ifunc since version 2.11 (2009). Building for older machines
may want to manually disable ifunc support when building.
--disable-ifunc can be used with autotools and
USE_ATTR_IFUNC=OFF can be used with CMake to disable the check for ifunc support.
USE_ATTR_IFUNC defaults to ON for CMake and enable_ifunc defaults to yes for autotools.

More about ifuncs can be read [here](https://sourceware.org/glibc/wiki/GNU_IFUNC) or [here](https://www.agner.org/optimize/optimizing_cpp.pdf#page=142).


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc64\_fast currently uses the \_\_attribute\_\_ constructor to choose the crc implementation to use.


## What is the new behavior?
I replaced the \_\_attribute\_\_((\_\_constructor\_\_)) with \_\_attribute\_\_((ifunc())) in crc64_fast.c

- The HAVE_FUNC_ATTRIBUTE_IFUNC flag was added to configure.ac
- The USE_ATTR_IFUNC cmake option was added to CMakeLists.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

Functionality should be identical.


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","hansjans162",53,"Replaced crc64_fast constructor with ifunc","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","b21f9e43de73a7860fa0ad5f13e1aa70bd48c09c","[]","[]","ifunc-crc64-fast","d5f5480c575002dc7175ba48646dea5c041aafa7","master","dbb3a536ed9873ffa0870321f6873e564c6a9da8",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-06-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-21 14:16:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,16,"","","","none"
"2023-06-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-21 13:47:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,15,"","","","none"
"2023-06-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-20 14:35:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",11,11,"","","","none"
"2023-06-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-20 13:54:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",11,11,"","","","none"
"2023-06-10 11:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-06-10 11:51:51","2023-06-10 11:51:51","created",1585632175,"@arixmkii Are you still working on this? If you don't have time to finish it, no need to worry. I can finish up the last few changes and close this out. ","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",5,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-08 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-08 11:45:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-06-06 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-06-06 16:27:33","1970-01-01 00:00:00","none",0,"","",0,0,"CICD","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-06 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-06 16:30:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,16,"","","","none"
"2023-06-06 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-06 16:23:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-06-06 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-06-06 13:34:56","2023-06-06 13:34:55","created",1578783188,"@bebuch I was able to make the commit message change during the Squash and Merge. The commit is in your name and I only made stylistic edits to the message (I did not change the meaning).

Thanks for your contribution!","",0,0,"","none","JiaT75",51,"protect against double find_package","[]","closed",0,"","[]",3,"CONTRIBUTOR","2023-06-06 13:32:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-06 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-06-06 13:32:47","2023-06-06 13:32:46","closed",0,"Boost iostream [uses `find_package` in quiet mode](https://github.com/boostorg/iostreams/blob/5fe4de84f863964f7573be1146f524886146a5d3/CMakeLists.txt#L16) and then [again uses `find_package` with required](https://github.com/boostorg/iostreams/blob/5fe4de84f863964f7573be1146f524886146a5d3/CMakeLists.txt#LL30C1-L30C49). This second call triggers a `add_library cannot create imported target ""ZLIB::ZLIB"" because another target with the same name already exists.`

This can simply be fixed by skipping the alias part on secondary `find_package` runs.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?

From Boost iostream compilation which finds XZ via config file:

```
CMake Error at C:/Temp/lib/win_x86_64_debug/lib/cmake/zlib/ZLIBConfig.cmake:13 (add_library):
  add_library cannot create imported target ""ZLIB::ZLIB"" because another
  target with the same name already exists.
Call Stack (most recent call first):
  libs/iostreams/CMakeLists.txt:30 (find_package)
  libs/iostreams/CMakeLists.txt:38 (boost_iostreams_option)
```

## What is the new behavior?

`find_package` works on the first and all folloring runs.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No","",0,0,"","none","bebuch",51,"protect against double find_package","[]","closed",0,"","[]",2,"NONE","2023-06-06 13:32:46","2023-06-06 13:32:46","0d94ba69220d894d2a86081821d2d7a89df5a10b","[]","[]","master","eadec2f23b3d4a8ea4775c48d8cb567635904e67","master","e6b92d5817fe91ad27a0f7f57bd0f2144311e383",1,0,0,"unknown","JiaT75",1,0,2,9,7,1,"",0,"","",0,0,"","","","none"
"2023-06-06 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-06-06 13:32:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-06-06 12:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-06-06 12:49:22","2023-06-06 12:49:22","created",1219589226,"There should be 4 spaces here to match the rest of the file","CMakeLists.txt",12,893,"","none","JiaT75",51,"protect against double find_package","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","bd4243fd159f93c63de92e2bb0ca0e8d681390de","[]","[]","master","5f21a5477e62a5ed38ab34dc684415988fa90d33","master","e6b92d5817fe91ad27a0f7f57bd0f2144311e383",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -889,13 +889,15 @@ write_basic_package_version_file(
 set(LZMA_CONFIG_CONTENTS
 ""include(\""\${CMAKE_CURRENT_LIST_DIR}/liblzma-targets.cmake\"")
 
-# Be compatible with the spelling used by the FindLibLZMA module. This
-# doesn't use ALIAS because it would make CMake resolve LibLZMA::LibLZMA
-# to liblzma::liblzma instead of keeping the original spelling. Keeping
-# the original spelling is important for good FindLibLZMA compatibility.
-add_library(LibLZMA::LibLZMA INTERFACE IMPORTED)
-set_target_properties(LibLZMA::LibLZMA PROPERTIES
-                      INTERFACE_LINK_LIBRARIES liblzma::liblzma)
+if(NOT TARGET LibLZMA::LibLZMA)
+       # Be compatible with the spelling used by the FindLibLZMA module. This",12,"5f21a5477e62a5ed38ab34dc684415988fa90d33","5f21a5477e62a5ed38ab34dc684415988fa90d33",0,0,"","","","none"
"2023-06-06 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-06-06 12:56:18","2023-06-06 12:56:17","created",1578717070,"Thanks the for PR! This is a great addition. It seems like the FindLibLZMA module has something similar to protect against multiple find_package() calls, so it seems like a common protection to include.

Can you wrap your commit message with newlines around 73 character width? The first sentence in your commit message is a bit long. The reason we care is because in our releases the Changelog is generated from the commit messages. In order to keep this and the commit log itself looking nice, we have a few standards we try to enforce.","",0,0,"","none","JiaT75",51,"protect against double find_package","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-06 12:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-06-06 12:49:23","2023-06-06 12:49:23","created",0,"Boost iostream [uses `find_package` in quiet mode](https://github.com/boostorg/iostreams/blob/5fe4de84f863964f7573be1146f524886146a5d3/CMakeLists.txt#L16) and then [again uses `find_package` with required](https://github.com/boostorg/iostreams/blob/5fe4de84f863964f7573be1146f524886146a5d3/CMakeLists.txt#LL30C1-L30C49). This second call triggers a `add_library cannot create imported target ""ZLIB::ZLIB"" because another target with the same name already exists.`

This can simply be fixed by skipping the alias part on secondary `find_package` runs.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?

From Boost iostream compilation which finds XZ via config file:

```
CMake Error at C:/Temp/lib/win_x86_64_debug/lib/cmake/zlib/ZLIBConfig.cmake:13 (add_library):
  add_library cannot create imported target ""ZLIB::ZLIB"" because another
  target with the same name already exists.
Call Stack (most recent call first):
  libs/iostreams/CMakeLists.txt:30 (find_package)
  libs/iostreams/CMakeLists.txt:38 (boost_iostreams_option)
```

## What is the new behavior?

`find_package` works on the first and all folloring runs.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No","",0,0,"","none","bebuch",51,"protect against double find_package","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","bd4243fd159f93c63de92e2bb0ca0e8d681390de","[]","[]","master","5f21a5477e62a5ed38ab34dc684415988fa90d33","master","e6b92d5817fe91ad27a0f7f57bd0f2144311e383",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-06-05 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-06-05 15:03:54","2023-06-05 15:03:54","created",1576973201,"Hi! Thank you for the code suggestion. In order for us to accept a change like this, we need more information about the problem that is solves. What is the need to compile the tests programs locally without running them? Is it a cross-compile situation where you want to copy over the test binaries after everything else is built?

If this is the case, then a better solution is to override the TESTS variable in a make check command to be empty on your build machine:

`make check TESTS=`

The TESTS variable, from the Automake docs: 

""If the special variable TESTS is defined, its value is taken to be a list of programs or scripts to run in order to do the testing.""

So, this is the list of tests to execute. If you leave it empty, it will still build all of the tests and then not execute any. Would this solve the issue?","",0,0,"","none","JiaT75",52,"tests/Makefile.am: add target of 'build-PROGRAMS'","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-05-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-31 16:05:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-05-17 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-17 15:13:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-05-16 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-16 15:50:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-05-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-16 13:26:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-05-15 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-15 17:22:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",17,16,"","","","none"
"2023-05-13 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 13:01:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,12,"","","","none"
"2023-05-13 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 13:14:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-05-13 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 13:09:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-05-13 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 13:26:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-05-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 12:48:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-05-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 12:44:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,15,"","","","none"
"2023-05-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-13 12:35:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",27,16,"","","","none"
"2023-05-11 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-05-11 16:04:01","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_mt_block_size","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-05-11 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-11 16:03:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-05-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-11 15:50:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_mt_block_size","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-05-09 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-09 13:57:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_mt_block_size","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-05-09 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-05-09 12:29:43","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_mt_block_size","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-05-09 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-09 12:56:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_mt_block_size","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-05-05 11:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-05-05 11:58:17","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-05-04 15:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-05-04 15:45:51","1970-01-01 00:00:00","published",0,"The Doxygen-generated liblzma API documentation is available at
<https://tukaani.org/xz/liblzma-api/files.html>.

This is the last planned release for the 5.2.12 branch. Patches or new
releases may still be made if severe bugs are found.

The OpenPGP signing key used for this and future releases has changed
to my key (<jiat0218@gmail.com>). The fingerprint is:

22D4 65F2 B4C1 7380 3B20  C6DE 59FC F207 FEA7 F445

The new key is available at <https://tukaani.org/misc/jia_tan_pubkey.txt>

Here is an extract from the NEWS file:

5.2.12 (2023-05-04)

    * Fixed a build system bug that prevented building liblzma as a
      shared library when configured with --disable-threads. This bug
      affected releases 5.2.6 to 5.2.11 and 5.4.0 to 5.4.2.

    * Include <intrin.h> for Windows intrinsic functions where they are
      needed. This fixed a bug that prevented building liblzma using
      clang-cl on Windows.

    * Minor update to the Croatian translation. The small change
      applies to a string in both 5.2 and 5.4 branches.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.2.12","XZ 5.2.12 Old Stable","none"
"2023-05-04 15:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-05-04 15:46:00","1970-01-01 00:00:00","published",0,"The Doxygen-generated liblzma API documentation is available at
<https://tukaani.org/xz/liblzma-api/files.html>.

The OpenPGP signing key used for this and future releases has changed
to my key (<jiat0218@gmail.com>). The fingerprint is:

22D4 65F2 B4C1 7380 3B20  C6DE 59FC F207 FEA7 F445

The new key is available at <https://tukaani.org/misc/jia_tan_pubkey.txt>

Here is an extract from the NEWS file:

    * All fixes from 5.2.12

    * Features in the CMake build can now be disabled as CMake cache
      variables, similar to the Autotools build.

    * Minor update to the Croatian translation.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.3","XZ 5.4.3 Stable","none"
"2023-05-04 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-05-04 14:56:17","1970-01-01 00:00:00","none",0,"","",0,0,"v5.2.12","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-05-04 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 14:15:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-05-04 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 14:17:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-05-04 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 14:17:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-05-04 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 14:54:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-05-04 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 13:34:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-05-04 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 12:52:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,2,"","","","none"
"2023-05-04 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 12:41:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-05-04 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 11:35:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,2,"","","","none"
"2023-05-04 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-04 11:32:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-05-03 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-05-03 13:45:53","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-05-03 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-05-03 13:57:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-04-25 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-25 14:29:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2023-04-25 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-25 14:14:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-04-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-25 13:47:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-04-25 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-04-25 12:07:39","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-24 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-24 15:00:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_decoder_improvements","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-04-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-24 14:33:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_decoder_improvements","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,6,"","","","none"
"2023-04-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-24 14:32:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_decoder_improvements","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-04-21 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-04-21 16:26:56","1970-01-01 00:00:00","none",0,"","",0,0,"filter_to_str2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 16:16:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-04-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 16:31:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",88,7,"","","","none"
"2023-04-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 16:08:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-04-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 16:01:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-04-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 15:57:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-04-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 15:50:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-04-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 14:38:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-04-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 14:14:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",208,0,"","","","none"
"2023-04-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 14:08:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-04-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 13:20:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-04-21 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 12:59:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-04-21 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-21 12:33:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-04-20 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-04-20 12:18:11","1970-01-01 00:00:00","none",0,"","",0,0,"tuklib_integer_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-20 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-04-20 12:17:22","2023-04-20 12:17:21","created",1516228126,"Commits have been pushed to master, so the fix will be in our next release. Thanks for verifying the fix!","",0,0,"","none","JiaT75",48,"[Bug]: tuklib_integer.h(647,2): error: call to undeclared library function '_BitScanReverse' with Clang 16.0.1","['bug']","closed",0,"","[]",3,"NONE","2023-04-20 12:17:21","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-20 12:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-04-20 12:17:22","2023-04-20 12:17:22","closed",0,"### Describe the bug

We compile xz as a Meson subproject. We have AppVeyor VS2019 as CI job, they recently updated their toolchain to LLVM/Clang 16.0.1, we use `clang-cl` to compile everything. After the upgrade, it started producing this error:
```
..\subprojects\xz-5.4.1\src\common\tuklib_integer.h(647,2): error: call to undeclared library function '_BitScanReverse' with type 'unsigned char (unsigned long *, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
        _BitScanReverse(&i, n);
        ^
..\subprojects\xz-5.4.1\src\common\tuklib_integer.h(647,2): note: include the header <intrin.h> or explicitly provide a declaration for '_BitScanReverse'
..\subprojects\xz-5.4.1\src\common\tuklib_integer.h(749,2): error: call to undeclared library function '_BitScanForward' with type 'unsigned char (unsigned long *, unsigned long)'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
        _BitScanForward(&i, n);
        ^
```
See full log here:
https://ci.appveyor.com/project/rizinorg/rizin/builds/46815593/job/ny9b339jydox5pft#L5611

This is the wrap file we use: https://github.com/rizinorg/rizin/blob/dev/subprojects/liblzma.wrap
These are Meson build files: https://github.com/rizinorg/rizin/tree/dev/subprojects/packagefiles/xz-5.4.1

### Version

5.4.1

### Operating System

Windows Server 2019 (AppVeyor VS2019 image)

### Relevant log output

_No response_","",0,0,"","none","XVilka",48,"[Bug]: tuklib_integer.h(647,2): error: call to undeclared library function '_BitScanReverse' with Clang 16.0.1","['bug']","closed",0,"","[]",3,"NONE","2023-04-20 12:17:21","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-20 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-20 12:15:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,1,"","","","none"
"2023-04-19 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-04-19 14:27:07","1970-01-01 00:00:00","none",0,"","",0,0,"tuklib_integer_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-19 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-04-19 14:39:41","2023-04-19 14:39:40","created",1514859469,"Thanks for the bug report! I created a new branch [tuklib integer fix](https://github.com/tukaani-project/xz/tree/tuklib_integer_fix) with a potential fix for this. Can you test this to see if it builds correctly? Only the first commit should be needed for this bug, but the second should possibly silence some warnings for other users (MSVC builds).

Also, I noticed in the liblzma.wrap file that you linked uses a different mirror to pull the release. I would advise against this, since that mirror is not affiliated with us and is not as up to date as this repository. The hashes between the tag on the mirror and the tukaani.org link are different because the GitHub generated .tar.gz does not go through the same release steps that our official source code release does. For your purposes, the differences from the source code release are probably not important since they are mostly for users building with Autotools. We sign both the tags and the source code release, so either should be secure. We have released 5.4.2 a few weeks ago, so 5.4.1 is no longer the most recent stable release.","",0,0,"","none","JiaT75",48,"[Bug]: tuklib_integer.h(647,2): error: call to undeclared library function '_BitScanReverse' with Clang 16.0.1","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-19 12:00:00","WatchEvent","JiaT75","rizinorg/rizin","2023-04-19 12:06:00","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-17 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-17 13:33:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-04-17 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-17 13:31:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",197,3,"","","","none"
"2023-04-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-14 16:11:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_decoder_improvements","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,6,"","","","none"
"2023-04-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-13 12:42:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_decoder_improvements","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-04-07 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-04-07 12:05:57","2023-04-07 12:05:56","created",1500230207,"Looks great. Thanks for the contribution!","",0,0,"","none","JiaT75",47,"Add Security Policy","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-07 12:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-04-07 12:08:32","2023-04-07 12:08:32","closed",0,"### Describe the Feature

A Security Policy should provide clear guidance on how to report potential vulnerabilities and inform the vulnerabilities disclosure window for this repo. It recommended by [Github](https://docs.github.com/en/code-security/getting-started/securing-your-repository#setting-a-security-policy) and [Scorecard](https://github.com/ossf/scorecard).


### Expected Complications

No.

### Will I try to implement this new feature?

Yes

#### Additional context
I'm Gabriela and I work on behalf of Google and the OpenSSF suggesting supply-chain security changes :)

If you agree, I can open a PR to suggest a Security Policy, and we can work together to communicate how the repo can best handle vulnerability reports.","",0,0,"","none","gabibguti",46,"[Feature Request]: Add Security Policy","[]","closed",0,"","[]",1,"CONTRIBUTOR","2023-04-07 12:08:32","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-07 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-04-07 12:08:31","2023-04-07 12:08:31","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Not having a Security Policy file.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: Resolves https://github.com/tukaani-project/xz/issues/46


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Add Security Policy file

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
I've tried to keep the timelines of confirming a vulnerability report and fixing a vulnerability as open as possible. Let me know what you think and if this seems reasonable for maintainence.","",0,0,"","none","gabibguti",47,"Add Security Policy","[]","closed",0,"","[]",4,"NONE","2023-04-07 12:08:30","2023-04-07 12:08:30","261cdef916eb047522dc316f712844be0215b2bd","[]","[]","master","d3a40e73877534ca855d6e52f80e930994eab0bd","master","d0faa85df5a5d253a4625d45313cf5e9277e6cd2",1,0,0,"unknown","JiaT75",1,0,4,14,0,1,"",0,"","",0,0,"","","","none"
"2023-04-07 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-07 12:47:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-04-07 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-07 12:44:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-04-07 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-04-07 12:08:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-04-06 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-04-06 13:20:34","2023-04-06 13:20:34","created",1159788686,"This is true, that we will only apply the security updates when a new release comes out. However, we will also provide patches for security bugs on our project website (https://tukaani.org/xz), so this should be mentioned here. We will provide patches for all supported development branches, which will always be at least the current development branch and the current stable branch. Right now we still maintain an old stable branch, but that might not always be the case.","SECURITY.md",5,5,"","none","JiaT75",47,"Add Security Policy","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","8cbf9f99cea8c5c84acc33f0dbab477b5ce6529c","[]","[]","master","8a721812af39ea69144b56cbc794da0cb591be0c","master","d0faa85df5a5d253a4625d45313cf5e9277e6cd2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,14 @@
+# Security Policy
+
+## Supported Versions
+
+Security updates are applied only to the latest release.",5,"8a721812af39ea69144b56cbc794da0cb591be0c","8a721812af39ea69144b56cbc794da0cb591be0c",0,0,"","","","none"
"2023-04-06 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-04-06 13:20:35","2023-04-06 13:20:34","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Not having a Security Policy file.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: Resolves https://github.com/tukaani-project/xz/issues/46


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Add Security Policy file

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
I've tried to keep the timelines of confirming a vulnerability report and fixing a vulnerability as open as possible. Let me know what you think and if this seems reasonable for maintainence.","",0,0,"","none","gabibguti",47,"Add Security Policy","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","8cbf9f99cea8c5c84acc33f0dbab477b5ce6529c","[]","[]","master","8a721812af39ea69144b56cbc794da0cb591be0c","master","d0faa85df5a5d253a4625d45313cf5e9277e6cd2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-04-05 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-04-05 12:26:34","2023-04-05 12:26:34","created",1497403700,"Hi Gabriela! This seems like a great idea, thanks for the suggestion. At the moment, users are expected to report security reports to our project's email address (xz@tukaani.org). Since we moved to GitHub, it is probably less clear that is our expectation, especially for users who find the project through GitHub. So setting up a SECURITY.md file will be helpful.

You are welcome to suggest an initial version for the Security Policy through a PR. Thanks for the help!","",0,0,"","none","JiaT75",46,"[Feature Request]: Add Security Policy","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-04-04 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-04-04 16:20:50","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_decoder_improvements","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-29 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-29 15:56:26","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_threading","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-29 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-29 15:55:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,0,"","","","none"
"2023-03-29 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-29 15:47:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_threading","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-03-29 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-29 15:28:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_threading","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-29 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-29 13:14:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_threading","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-29 12:00:00","WatchEvent","JiaT75","nidud/asmc","2023-03-29 12:20:41","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-29 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-29 12:14:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_threading","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-28 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-03-28 15:06:26","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_threading","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-28 15:00:00","WatchEvent","JiaT75","Kitware/CMake","2023-03-28 15:07:32","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-24 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-03-24 15:19:01","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-24 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-24 15:43:12","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-24 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-24 15:42:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,1,"","","","none"
"2023-03-24 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-24 15:26:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-24 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-24 15:23:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-23 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-03-23 13:48:54","2023-03-23 13:48:52","closed",0,"This allows users to change the features they build either in CMakeCache.txt or by using a CMake GUI.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
CMake build cannot have the features changes like check types, match finders, encoders, and decoders.

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Features can be configured in CMake GUI or CMakeCache.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
This will allow CI tests to test the different configurations, similar to the Autotools runners.","",0,0,"","none","JiaT75",41,"CMake: Allow configuring features as cache variables","[]","closed",0,"","[]",0,"MEMBER","2023-03-23 13:48:52","2023-03-23 13:48:52","116e81f002c503d3c3cd12726db8f9116e58ef25","[]","[]","cmake_cache_features","e45a8e9de9f50beda52231318be4bcae4ca1a591","master","8be136f667aaeb8f9e16fbd57a83cb282f0c27ff",1,0,0,"unknown","JiaT75",0,0,4,400,144,2,"",0,"","",0,0,"","","","none"
"2023-03-23 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-23 13:48:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-23 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-23 13:42:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_cache_features","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-22 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-22 14:52:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_cache_features","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-03-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-22 12:01:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_cache_features","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,3,"","","","none"
"2023-03-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-21 15:44:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_cache_features","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,3,"","","","none"
"2023-03-21 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-21 12:06:22","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-20 14:00:00","CreateEvent","JiaT75","JiaT75/oss-fuzz","2023-03-20 14:28:53","1970-01-01 00:00:00","none",0,"","",0,0,"jiatan_xz_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-20 12:00:00","ForkEvent","JiaT75","google/oss-fuzz","2023-03-20 12:41:50","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-20 12:00:00","WatchEvent","JiaT75","google/oss-fuzz","2023-03-20 12:29:40","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-18 17:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-03-18 17:14:34","1970-01-01 00:00:00","published",0,"The Doxygen-generated liblzma API are now available online at
<https://tukaani.org/xz/liblzma-api/files.html>.

5.4.2 (2023-03-18)

    * All fixes from 5.2.11 that were not included in 5.4.1.

    * If xz is built with support for the Capsicum sandbox but running
      in an environment that doesn't support Capsicum, xz now runs
      normally without sandboxing instead of exiting with an error.

    * liblzma:

        - Documentation was updated to improve the style, consistency,
          and completeness of the liblzma API headers.

        - The Doxygen-generated HTML documentation for the liblzma API
          header files is now included in the source release and is
          installed as part of ""make install"". All JavaScript is
          removed to simplify license compliance and to reduce the
          install size.

        - Fixed a minor bug in lzma_str_from_filters() that produced
          too many filters in the output string instead of reporting
          an error if the input array had more than four filters. This
          bug did not affect xz.

    * Build systems:

        - autogen.sh now invokes the doxygen tool via the new wrapper
          script doxygen/update-doxygen, unless the command line option
          --no-doxygen is used.

        - Added microlzma_encoder.c and microlzma_decoder.c to the
          VS project files for Windows and to the CMake build. These
          should have been included in 5.3.2alpha.

    * Tests:

        - Added a test to the CMake build that was forgotten in the
          previous release.

        - Added and refactored a few tests.

    * Translations:

        - Updated the Brazilian Portuguese translation.

        - Added Brazilian Portuguese man page translation.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.2","5.4.2 Stable","none"
"2023-03-18 16:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-03-18 16:59:48","1970-01-01 00:00:00","published",0,"Please let us know if there is interest in more releases for the
5.2 branch. We will plan further bug-fix releases for this branch
if people will use it.

5.2.11 (2023-03-18)

    * Removed all possible cases of null pointer + 0. It is undefined
      behavior in C99 and C17. This was detected by a sanitizer and had
      not caused any known issues.

    * Build systems:

        - Added a workaround for building with GCC on MicroBlaze Linux.
          GCC 12 on MicroBlaze doesn't support the __symver__ attribute
          even though __has_attribute(__symver__) returns true. The
          build is now done without the extra RHEL/CentOS 7 symbols
          that were added in XZ Utils 5.2.7. The workaround only
          applies to the Autotools build (not CMake).

        - CMake: Ensure that the C compiler language is set to C99 or
          a newer standard.

        - CMake changes from XZ Utils 5.4.1:

            * Added a workaround for a build failure with
              windres from GNU binutils.

            * Included the Windows resource files in the xz
              and xzdec build rules.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.2.11","XZ 5.2.11 Old Stable","none"
"2023-03-18 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-03-18 15:57:30","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4.2","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-18 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-03-18 15:57:20","1970-01-01 00:00:00","none",0,"","",0,0,"v5.2.11","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-18 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-18 15:43:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-18 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-18 14:38:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-18 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-18 14:36:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-18 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-18 14:03:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-18 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-18 14:02:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-18 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-18 13:13:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-17 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-17 18:54:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-17 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-17 18:50:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-17 17:38:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-17 17:36:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-17 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-17 12:45:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,2,"","","","none"
"2023-03-16 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-16 17:42:38","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen_install_docs","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-16 17:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-03-16 17:42:29","2023-03-16 17:42:28","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- The Doxygen html docs are now included in the release tarball
- If only the liblzma API function documentation is generated, the docs are created in /doc/liblzma
- If all files documentation is generated, the docs are created in /doc/html

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

## Other information
Putting the docs in liblzma folder may be unnecessary. Other distributions seems to place their html documentation files in a directory called ""html"" in the doc directory. If we just want to include it in the ""html"" directory in /doc, then the first and third commit can be omitted.","",0,0,"","none","JiaT75",30,"Include Doxygen html files in release","['documentation','5.5.0']","closed",0,"","[]",2,"MEMBER","2023-03-16 17:42:28","2023-03-16 17:42:28","509157c80c500426ec853bd992d684ebafc8500c","[]","[]","doxygen_install_docs","f3027647c90a62f9c98cd79fdb872765f6a39c42","master","1b7661faa4bbf4a54c6b75900b5059835c382a0f",1,0,0,"unknown","JiaT75",1,0,10,647,354,24,"",0,"","",0,0,"","","","none"
"2023-03-16 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 17:47:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,2,"","","","none"
"2023-03-16 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 17:41:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-16 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 17:34:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-16 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 17:01:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-03-16 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 15:59:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-16 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 15:50:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-16 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 14:18:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-03-16 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-16 14:36:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-03-15 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-15 17:10:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-15 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-15 17:00:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-15 16:00:00","WatchEvent","JiaT75","doxygen/doxygen","2023-03-15 16:08:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-15 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-15 15:54:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-03-15 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-15 14:35:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-03-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-14 16:45:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-14 16:35:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-14 16:30:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-03-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-14 16:18:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",29,4,"","","","none"
"2023-03-13 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-03-13 15:12:28","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-13 15:17:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,2,"","","","none"
"2023-03-13 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-13 12:49:58","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_index","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-13 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-03-13 12:49:54","2023-03-13 12:49:53","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The current test_index.c is using the old test format and is largely incomplete.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Creates helpful mask macros for return values from lzma_index_checks()
- Refactors test_index.c to use tuktest and cover more API functions
- Allow test_index.c to function properly if encoders or decoders are not built

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",8,"Refactor tests in test_index.c","['test','5.4.2']","closed",0,"","[]",0,"MEMBER","2023-03-13 12:49:53","2023-03-13 12:49:53","1b7661faa4bbf4a54c6b75900b5059835c382a0f","[]","[]","tuktest_index","fc0641f6a412852bd845444bcec35b587c0df7d2","master","717aa3651ce582807f379d8654c2516e1594df77",1,0,0,"unknown","JiaT75",4,0,3,1515,619,3,"",0,"","",0,0,"","","","none"
"2023-03-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-13 12:53:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-13 12:49:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-03-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-13 12:48:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",11,3,"","","","none"
"2023-03-08 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-03-08 15:14:41","1970-01-01 00:00:00","none",0,"","",0,0,"capsicum_improvements_improvements","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-07 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-07 15:59:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-03-07 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-07 15:27:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",23,23,"","","","none"
"2023-03-07 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-03-07 12:08:40","2023-03-07 12:08:39","created",1458058427,"Silly mistake by me. I just pushed up [01587dd](https://github.com/tukaani-project/xz/commit/01587dda2a8f13fef7e12fd624e6d05da5f9624f) with your suggestion of hiding it in the `#else` clause.

This seems like the most efficient solution, although I'm guessing compilers would be smart enough to optimize the jump out of your second suggestion.

Hopefully it works this time! Let me know if there are any other issues.","",0,0,"","none","JiaT75",43,"xz: Improve compatibility with systems without capability mode support","['bug','5.4.2']","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-07 12:00:00","WatchEvent","JiaT75","torvalds/linux","2023-03-07 12:14:11","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-07 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-07 12:05:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-06 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-03-06 13:58:13","2023-03-06 13:58:12","created",1456184989,"Hi @delphij! Thanks for the notifying us about the issue and for the PR. I solved it a slightly different way with the newest commits on master to avoid unneeded function calls after ENOSYS and to issue a warning message. Can you verify this solves the problem? Additionally, an extra check should be added to ax_check_capsicum.m4, but that can be added later.","",0,0,"","none","JiaT75",43,"xz: Improve compatibility with systems without capability mode support","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-06 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-06 13:49:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-03-01 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-01 13:42:56","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_preset_doc_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-01 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-01 13:51:48","1970-01-01 00:00:00","none",0,"","",0,0,"NULL_Plus_Zero_Fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-01 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-03-01 13:51:52","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_preset_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-01 13:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-03-01 13:42:34","2023-03-01 13:42:33","closed",0,"### Describe the bug

If `LZMA_MF_HC3` or `LZMA_MF_HC4` are disabled for preset level <=3, or if `LZMA_MF_BT4` is disabled for the other levels, then lzma_lzma_preset still returns success. When `lzma_options_lzma *` is used, it will cause an error.

The solution to this can be done either in code or in documentation. The code change would be simple to check if the needed match finders were configured.

Instead, a documentation change in lzma12.h could make it clear that the preset is valid, but might not work depending on the liblzma configuration (in this case, which match finders were built).

### Version

5.5.0alpha

### Operating System

N/A

### Relevant log output

_No response_","",0,0,"","none","JiaT75",37,"[Bug]: lzma_lzma_preset() returns success if preset is unusable","['bug']","closed",0,"","[]",0,"MEMBER","2023-03-01 13:42:33","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-03-01 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-03-01 13:42:33","2023-03-01 13:42:32","closed",0,"lzma_lzma_preset() does not guarentee that the lzma_options_lzma are usable in an encoder even if it returns false (success). If liblzma is built with default configurations, then the options will always be usable. However if the match finders hc3, hc4, or bt4 are disabled, then the options may not be usable depending on the preset level requested.

The documentation was updated to reflect this complexity, since this behavior was unclear before.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: fixes https://github.com/tukaani-project/xz/issues/37

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",40,"liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.","['documentation','5.4.2']","closed",0,"","[]",0,"MEMBER","2023-03-01 13:42:31","2023-03-01 13:42:31","f1ab1f6b339d16a53ac53efeb97779ecd2bae70f","[]","[]","lzma_preset_doc_update","c1d6a3df5dc9451e3d0a40e8e8a593e96f5176e1","master","4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99",1,0,0,"unknown","JiaT75",0,0,1,5,0,1,"",0,"","",0,0,"","","","none"
"2023-03-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-01 13:42:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-03-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-03-01 13:41:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_preset_doc_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-02-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-28 15:23:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-28 15:14:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-28 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-28 13:12:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-28 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-28 13:10:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",81,2,"","","","none"
"2023-02-28 13:00:00","WatchEvent","JiaT75","lz4/lz4","2023-02-28 13:31:20","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-27 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-27 16:45:15","2023-02-27 16:45:14","created",1446672279,"This should be fixed as of commit 4b7fb3bf41a0ca4c97fad3799949a2aa61b13b99 on master. @autoantwort can you let us know if this does not solve the bug?

This will be in a new stable 5.4.2 release in the near future. Thanks again for reporting this!","",0,0,"","none","JiaT75",42,"project requires c99","['bug','5.4.2']","closed",0,"","[]",4,"NONE","2023-02-27 16:45:14","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-27 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-27 16:45:15","2023-02-27 16:45:14","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
If the compiler uses a very old c standard as default, it will fail to build


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/microsoft/vcpkg/issues/21680#issuecomment-983342257


## What is the new behavior?
Set the required c standard to C99

## Does this introduce a breaking change?

- [ ] Yes
- [x] No



","",0,0,"","none","autoantwort",42,"project requires c99","['bug','5.4.2']","closed",0,"","[]",4,"NONE","2023-02-27 16:45:14","1970-01-01 00:00:00","83c1e7ecdb8e4efe3c347157a70a5c0818a7c2cc","[]","[]","feature/require-c99","b8d83721b7c4a513c72c0c37e1cfedb8642d0758","master","9aa7fdeb04c486d2700967090956af88fdccab7e",0,1,0,"clean","",0,0,1,1,0,1,"",0,"","",0,0,"","","","none"
"2023-02-27 13:00:00","IssueCommentEvent","JiaT75","microsoft/vcpkg","2023-02-27 13:42:20","2023-02-27 13:42:19","created",1446344841,"Hi, XZ Utils co-maintainer here. The problem is our CMakeLists.txt does not currently enforce the requirement for a compiler that supports C99 or add the flags needed to ensure C99. The API header files from liblzma do not require C99, just the source code and internal headers. Our Autotools build system enforces the need for a C99 compiler.

We are planning a new 5.4.2 release soon, so we will make sure to include a fix for this.","",0,0,"","none","JiaT75",21680,"[liblzma] build failure on CentOS","['requires:repro']","open",0,"LilyWangLL","['LilyWangLL']",10,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-27 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-27 13:09:18","2023-02-27 13:09:18","created",1446298005,"The liblzma API headers should be compatible with C89, but the internal headers used by the source code are not. ","",0,0,"","none","JiaT75",42,"project requires c99","['bug','5.4.2']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-27 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-27 12:33:27","2023-02-27 12:33:26","created",1446251018,"Hi! Thanks for the bug report and PR.

All of the targets that need to be compiled require C99, so it would be better to just set the CMAKE_C_STANDARD variable at the top of CMakeLists.txt like this:

```
set(CMAKE_C_STANDARD 99)
```","",0,0,"","none","JiaT75",42,"project requires c99","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-25 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-25 13:27:52","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_cache_features","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-25 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-25 13:44:04","2023-02-25 13:44:03","opened",0,"This allows users to change the features they build either in CMakeCache.txt or by using a CMake GUI.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
CMake build cannot have the features changes like check types, match finders, encoders, and decoders.

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Features can be configured in CMake GUI or CMakeCache.txt

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
This will allow CI tests to test the different configurations, similar to the Autotools runners.","",0,0,"","none","JiaT75",41,"CMake: Allow configuring features as cache variables","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","cmake_cache_features","9a50ef2da1a3b58d89b12a978df0200ebe597b91","master","9aa7fdeb04c486d2700967090956af88fdccab7e",0,0,0,"unknown","",0,0,1,137,34,1,"",0,"","",0,0,"","","","none"
"2023-02-24 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-24 15:58:05","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_preset_doc_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-24 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-24 15:59:55","2023-02-24 15:59:54","opened",0,"lzma_lzma_preset() does not guarentee that the lzma_options_lzma are usable in an encoder even if it returns false (success). If liblzma is built with default configurations, then the options will always be usable. However if the match finders hc3, hc4, or bt4 are disabled, then the options may not be usable depending on the preset level requested.

The documentation was updated to reflect this complexity, since this behavior was unclear before.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: fixes https://github.com/tukaani-project/xz/issues/37

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",40,"liblzma: Clarify lzma_lzma_preset() documentation in lzma12.h.","['documentation','5.4.2']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","lzma_preset_doc_update","b8a7fb345985ddbd4ab160ad95669207b58e9c32","master","9aa7fdeb04c486d2700967090956af88fdccab7e",0,0,0,"unknown","",0,0,1,6,1,1,"",0,"","",0,0,"","","","none"
"2023-02-24 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-24 15:58:15","2023-02-24 15:58:14","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
lzma_lzma_preset() will return success, even if the preset is unusable with the liblzma build.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: fixes https://github.com/tukaani-project/xz/issues/37


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- lzma_lzma_preset() will check if match finder is supported.
- Tests were updated to skip or pass if the requested preset is not usable.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
Alternatively, this could be solved with a documentation change if we want to explicitly say that lzma_lzma_preset() does not guarantee that the preset is usable. Based on the current documentation, it seems that lzma_lzma_preset() should only return success if the preset is usable.
","",0,0,"","none","JiaT75",39,"lzma_lzma_preset() return failure with unsupported Match Finder","['bug','5.5.0']","closed",0,"","[]",0,"MEMBER","2023-02-24 15:58:14","1970-01-01 00:00:00","54b83adb2eb0b726c336ae74f09585622b774f7f","[]","[]","lzma_preset_update","f680b6bee905769e4c54d98bcc65a4f5927328e6","master","fa9065fac54194fe0407fc7f0cc9633fdce13c21",0,1,0,"clean","",0,0,2,127,81,6,"",0,"","",0,0,"","","","none"
"2023-02-24 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz-java","2023-02-24 13:28:53","2023-02-24 13:28:52","created",1443684157,"Now that the XZ for Java repository has officially moved to GitHub this issue has been moved and reopened. This isn't a promise that we will implement the feature, just that we are considering it now.","",0,0,"","none","JiaT75",2,"[Feature Request]: SeekableXZInputStream ability to write straight into java.nio.ByteBuffer","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-24 13:00:00","IssuesEvent","JiaT75","tukaani-project/xz-java","2023-02-24 13:28:53","2023-02-24 13:28:52","reopened",0,"### Describe the Feature

Can you please add methods in SeekableXZInputStream ability to write straight into an existing java.nio.ByteBuffer

This is to replicate something like 

```
ByteBuffer bytebuffer = ByteBuffer.allocateDirect(65536);
RandomAccessFile raf = new RandomAccessFile(filePath, ""r"");
FileChannel fc = raf.getChannel();
ByteBuffer.allocateDirect(this.bufferSize);

// call next statements many ties  by seeking various positions
fc.read(bytebuffer);
bytebuffer.flip();
```




### Expected Complications

ByteBuffer is available since old versions of java, so adding this feature should not be an issue.

### Will I try to implement this new feature?

No","",0,0,"","none","xbotuk",2,"[Feature Request]: SeekableXZInputStream ability to write straight into java.nio.ByteBuffer","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-24 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-24 13:11:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-24 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-24 13:04:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",21,4,"","","","none"
"2023-02-23 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-23 14:02:45","2023-02-23 14:02:44","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
lzma_lzma_preset() will return success, even if the preset is unusable with the liblzma build.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: fixes https://github.com/tukaani-project/xz/issues/37


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- lzma_lzma_preset() will check if match finder is supported.
- Tests were updated to skip or pass if the requested preset is not usable.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
Alternatively, this could be solved with a documentation change if we want to explicitly say that lzma_lzma_preset() does not guarantee that the preset is usable. Based on the current documentation, it seems that lzma_lzma_preset() should only return success if the preset is usable.
","",0,0,"","none","JiaT75",39,"lzma_lzma_preset() return failure with unsupported Match Finder","['bug','5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","lzma_preset_update","674027c5801b9ff4638aefcc08baf23267a8df13","master","fa9065fac54194fe0407fc7f0cc9633fdce13c21",0,0,0,"unknown","",0,0,2,117,81,6,"",0,"","",0,0,"","","","none"
"2023-02-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-23 14:48:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/lzma_preset_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-23 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-23 13:49:26","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_prefix_codechange","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-23 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-23 12:28:06","1970-01-01 00:00:00","none",0,"","",0,0,"container_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-23 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-23 12:13:32","2023-02-23 12:13:31","created",1441658142,"Hi Gabriela!

Thank you for notifying us about this important security practice. I had not set the more restrictive Workflow permissions, so I have just updated the default to be read-only. Our CI tests are quite simple, so read-only is enough permissions for us.

Specifying the permissions explicitly in the ci.yml file probably isn't needed now that the default permissions have been updated, but it also doesn't hurt. I suppose it will keep us safe in case GitHub updates their default permission policy. If you submit a PR to update it, I will be happy to review and accept it :)

XZ Utils is still new to GitHub, so if you have any other security recommendations for us, please notify us.","",0,0,"","none","JiaT75",38,"[Feature Request]: Add minimum permissions to ci.yml workflow","['CI/CD']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-23 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-23 12:28:00","2023-02-23 12:27:59","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [X] Yes
- [ ] No","",0,0,"","none","JiaT75",33,"Improve documentation in container.h ","['documentation']","closed",0,"","[]",0,"MEMBER","2023-02-23 12:27:59","2023-02-23 12:27:59","fa9065fac54194fe0407fc7f0cc9633fdce13c21","[]","[]","container_doc_cleanup","b5b4947929adde80e3a78d4c7d3233d051a755eb","master","c9c8bfae3502842dcead85eeb2b951b437c2cd88",1,0,0,"unknown","JiaT75",0,0,5,115,75,1,"",0,"","",0,0,"","","","none"
"2023-02-23 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-23 12:28:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-02-23 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-23 12:21:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/container_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",25,5,"","","","none"
"2023-02-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-22 13:11:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-22 12:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-02-22 12:57:55","2023-02-22 12:57:54","opened",0,"### Describe the bug

If `LZMA_MF_HC3` or `LZMA_MF_HC4` are disabled for preset level <=3, or if `LZMA_MF_BT4` is disabled for the other levels, then lzma_lzma_preset still returns success. When `lzma_options_lzma *` is used, it will cause an error.

The solution to this can be done either in code or in documentation. The code change would be simple to check if the needed match finders were configured.

Instead, a documentation change in lzma12.h could make it clear that the preset is valid, but might not work depending on the liblzma configuration (in this case, which match finders were built).

### Version

5.5.0alpha

### Operating System

N/A

### Relevant log output

_No response_","",0,0,"","none","JiaT75",37,"[Bug]: lzma_lzma_preset() returns success if preset is unusable","['bug']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-21 15:38:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NULL_Plus_Zero_Fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-21 13:26:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,3,"","","","none"
"2023-02-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-21 13:17:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NULL_Plus_Zero_Fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-21 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-21 12:56:32","1970-01-01 00:00:00","none",0,"","",0,0,"NULL_Plus_Zero_Fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-21 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-21 12:27:28","2023-02-21 12:27:27","created",1438396969,"Thanks for reporting this and helping us fix @vfazio and reporting to gcc! I am closing this since the issue seems resolved with our workaround. Let us know if there are any other issues that you find :)","",0,0,"","none","JiaT75",32,"Detect symver attribute support","['bug','5.4.2']","closed",0,"","[]",13,"NONE","2023-02-21 12:27:28","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-21 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-21 12:27:29","2023-02-21 12:27:28","closed",0,"On Microblaze builds will fail when trying to add symver information because  `__attribute__((symver ..))` is not supported even though `__has_attribute(__symver__)` returns true.

Support for symver needs to be detected via a compile test since `__has_attribute` can report false positives [0].

Add a configure compile check for `__attribute__((symver ..))` to ensure it is supported and define a variable to advertise support.

[0] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101766#c1

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
builds targeting the microblaze fail

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Builds now succeed

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

I tested compiles via GCC 12 and 9 for x86_64 and microblaze targets and didn't encounter issues.

<!-- Any other information that is important to this PR. -->","",0,0,"","none","vfazio",32,"Detect symver attribute support","['bug','5.4.2']","closed",0,"","[]",13,"NONE","2023-02-21 12:27:28","1970-01-01 00:00:00","e4ca3578539e38995b73940bd8816ecd1c48f7e7","[]","[]","vfazio-detect-symver","cb45891df17c4d2bb054bd6b2a843514a4c655e3","master","1dbe12b90cff79bb51923733ac0840747b4b4131",0,1,0,"clean","",0,0,1,10,1,2,"",0,"","",0,0,"","","","none"
"2023-02-17 13:00:00","WatchEvent","JiaT75","facebook/zstd","2023-02-17 13:35:45","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-16 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-16 16:55:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-16 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-16 16:50:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-16 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-16 14:32:00","2023-02-16 14:31:59","created",1433178434,"Now I have the HTML files being installed. They are currently installed to `$(docdir)/liblzma`, for liblzma headers only, or `$(docdir)/html` for full documentation. So, by default, it will install to `/share/doc/xz/liblzma`, which I am not sure if I like.

I don't know of a good clean way to install to `/share/doc/liblzma` (or  `/share/doc/liblzma/html` if that makes more sense) since `$(docdir)` is `/share/doc/xz`. We can always install to `$(docdir)/../liblzma`, but that is hacky. If there is a good clean way to do this, I might be interested to try it.

If we don't like how it is now, the easiest alternative is to always install to `/share/doc/xz/html` and not care about the distinction between liblzma header only documentation and all source files documentation. ","",0,0,"","none","JiaT75",30,"Include Doxygen html files in release","['documentation','5.5.0']","open",0,"","[]",2,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-16 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-16 14:22:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",19,5,"","","","none"
"2023-02-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-16 13:08:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-15 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-15 14:23:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-15 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-15 14:13:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,4,"","","","none"
"2023-02-15 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-15 14:07:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-02-15 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-15 13:46:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",47,7,"","","","none"
"2023-02-15 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-15 12:13:05","2023-02-15 12:13:05","created",1431275182,"This includes the doxygen .html files in the release, but does not install them. I will need to rework this to actually install the files, which seems more useful than just including them.","",0,0,"","none","JiaT75",30,"Include Doxygen html files in release","['documentation','5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-14 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-14 16:59:25","1970-01-01 00:00:00","none",0,"","",0,0,"check_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-14 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-14 16:20:51","1970-01-01 00:00:00","none",0,"","",0,0,"index_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-14 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-14 16:59:17","2023-02-14 16:59:16","closed",0,"All functions now explicitly specify parameter and return values. Also moved the note about SHA-256 functions not being exported to the top of the file.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",29,"liblzma: Improve documentation in check.h.","['documentation']","closed",0,"","[]",0,"MEMBER","2023-02-14 16:59:16","2023-02-14 16:59:16","43ec344c868f930e96879eb9e49212cce92a9884","[]","[]","check_doc_cleanup","353396f62cea84c326bcf4a96be8716f0f390102","master","9c71db4e884fd49aea3d1e711036bff45ca66487",1,0,0,"unknown","JiaT75",0,0,1,28,13,1,"",0,"","",0,0,"","","","none"
"2023-02-14 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-14 16:20:45","2023-02-14 16:20:44","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",35,"Minor updates to documentation in index.h","['documentation']","closed",0,"","[]",0,"MEMBER","2023-02-14 16:20:44","2023-02-14 16:20:44","9c71db4e884fd49aea3d1e711036bff45ca66487","[]","[]","index_doc_cleanup","a100b71ab79ae027b7c5d30d511dd5ca51bb71d0","master","0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96",1,0,0,"unknown","JiaT75",0,0,3,136,54,1,"",0,"","",0,0,"","","","none"
"2023-02-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-14 16:59:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-14 16:58:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/check_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,1,"","","","none"
"2023-02-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-14 16:20:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-02-14 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-14 16:18:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/index_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-14 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-14 13:58:03","1970-01-01 00:00:00","none",0,"","",0,0,"index_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-14 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-14 13:59:44","2023-02-14 13:59:43","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",35,"Minor updates to documentation in index.h","['documentation']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","index_doc_cleanup","3e0c09d5377ad219be1443172aca4214ef175f62","master","0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96",0,0,0,"unknown","",0,0,3,136,54,1,"",0,"","",0,0,"","","","none"
"2023-02-14 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-14 12:41:11","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-14 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-14 12:41:07","2023-02-14 12:41:06","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
Minor updates to base.h API header file. I plan to do similar changes to each API header file, but I figured its a good idea to review the first one or two so we agree on the changes needed.","",0,0,"","none","JiaT75",23,"Minor updates to Doxygen comments in base.h","['documentation']","closed",0,"","[]",0,"MEMBER","2023-02-14 12:41:06","2023-02-14 12:41:05","0c9e4fc2ad6d88d54f299240fcc5a2ce7d695d96","[]","[]","doxygen","f5e8670845393683be20636f609f44f0336c4759","master","862dacef1a4e7e1b28d465956fa4244ed01df154",1,0,0,"unknown","JiaT75",0,0,2,26,6,1,"",0,"","",0,0,"","","","none"
"2023-02-14 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-14 12:41:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-14 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-14 12:40:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",35,2,"","","","none"
"2023-02-13 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-13 16:10:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-13 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-02-13 15:18:39","2023-02-13 15:18:38","created",1428123305,">  Any additional context, what you think could help is highly appreciated.

I am not sure how experienced you are with CMake, but we shouldn't need anything too complicated. I haven't fully thought through it, but here are a few ideas I have had so far:
- The GitHub Windows runner comes with CMake by default. You will not need to install it manually (https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md)
- It's probably a good idea to make most of the work be done in a separate script in the build-aux folder, similar to the concept of build-aux/ci_build.sh. The reason to do this is because the GitHub Workflow .yml files are harder to test/debug since you cannot run them locally. It's a lot easier to develop the script and then use the GitHub Workflow to wrap around it.
- In the script, you should be able to specify the Visual Studios build with the -g option (https://cmake.org/cmake/help/latest/generator/Visual%20Studio%2017%202022.html).
- After the generating step, `cmake --build` should compile and project
- As of right now, CMake should not build the xz command line tool, just liblzma. The same number of tests should still build and pass, but I have not run these tests personally on MSVC so I cannot guarantee they will work as expected. If any of them fail unexpectedly, send us the log and we will fix it :)

I hope this helps! Thanks again for your contributions so far. Let me know what other questions you may have.

","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",4,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-13 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-02-13 13:32:29","2023-02-13 13:57:54","created",1104476726,"Its interesting that this was only highlighted when threads are disabled. It must have something to do with the `_WIN32_WINNT 0x0600` in `mythread.h`. Either way, the proper include was missing, so thank you for addressing this.

On Windows, <intrin.h> also includes <immintrin.h>, so including both is redundant. Instead, these can be combined into something like this:

```
#if defined(TUKLIB_FAST_UNALIGNED_ACCESS) \
		&& (defined(__INTEL_COMPILER) && defined(_M_X64)) \
			|| (defined(_MSC_VER) && defined(_M_X64)))
#        define <intrin.h>
#else if HAVE_IMMINTRIN_H
#        define <immintrin.h>
#endif
```

Also, please include this as a separate commit from the CI changes. It was discovered because of the CI changes, but the fix is unrelated. ","src/liblzma/common/memcmplen.h",4,22,"","none","JiaT75",34,"Enable CI on Windows hosts for autotools","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","1804309c9742c51c2952ca25443f4f3088e0b4d6","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","90d0e628ff11e5030bcc4fc000bca056adda6603",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -19,6 +19,9 @@
 #	include <immintrin.h>
 #endif
 
+#if defined(_M_X64) // MSVC or Intel C compiler on Windows",4,"e84967a34eb5065e010bafe56042a7de648a2edf","e84967a34eb5065e010bafe56042a7de648a2edf",0,0,"","","","none"
"2023-02-13 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-02-13 13:37:27","2023-02-13 13:57:54","created",1104481895,"Similar to the other comment, include this as a separate commit from the CI changes. 

ts funny that it flags this as uninitialized, but not on line 978 in same file. Maybe since its in a switch-case? No change needed to the other use of `mythread_condtime wait_abs;`, just an observation. ","src/liblzma/common/stream_encoder_mt.c",5,746,"","none","JiaT75",34,"Enable CI on Windows hosts for autotools","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","1804309c9742c51c2952ca25443f4f3088e0b4d6","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","90d0e628ff11e5030bcc4fc000bca056adda6603",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -743,7 +743,7 @@ stream_encode_mt(void *coder_ptr, const lzma_allocator *allocator,
 
 		// These are for wait_for_work().
 		bool has_blocked = false;
-		mythread_condtime wait_abs;
+		mythread_condtime wait_abs = {};",5,"e84967a34eb5065e010bafe56042a7de648a2edf","e84967a34eb5065e010bafe56042a7de648a2edf",0,0,"","","","none"
"2023-02-13 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-02-13 13:39:07","2023-02-13 13:57:54","created",1104483761,"The newline was deleted at the end of this file. It's just a minor thing, but can you please bring it back?",".github/workflows/ci.yml",40,185,"","none","JiaT75",34,"Enable CI on Windows hosts for autotools","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","1804309c9742c51c2952ca25443f4f3088e0b4d6","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","90d0e628ff11e5030bcc4fc000bca056adda6603",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -182,4 +182,91 @@ jobs:
         with:
           name: MacOS CMake Test Logs
           path: build-aux/artifacts
-    ",40,"e84967a34eb5065e010bafe56042a7de648a2edf","e84967a34eb5065e010bafe56042a7de648a2edf",0,0,"","","","none"
"2023-02-13 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-02-13 13:41:59","2023-02-13 13:57:54","created",1104487081,"Since the Windows CI takes so long, we can remove some of these less interesting tests. Let's omit the BCJ, Delta, and SHA256 trials. The CRC64 one could still be interesting, so lets keep that one.",".github/workflows/ci.yml",96,239,"","none","JiaT75",34,"Enable CI on Windows hosts for autotools","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","1804309c9742c51c2952ca25443f4f3088e0b4d6","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","90d0e628ff11e5030bcc4fc000bca056adda6603",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -182,4 +182,91 @@ jobs:
         with:
           name: MacOS CMake Test Logs
           path: build-aux/artifacts
-    
\ No newline at end of file
+
+  Windows-Autotools:
+    # Just run on latest Windows
+    runs-on: windows-latest
+    steps:
+      # Fixes line engings, which fails compilation
+      # https://github.com/actions/checkout/issues/226
+      # https://github.com/actions/checkout/issues/135
+      - name: Prepare git
+        run: git config --global core.autocrlf false
+      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
+      - uses: actions/checkout@v3
+      - name: Install Dependencies
+        uses: msys2/setup-msys2@v2
+        with:
+          msystem: UCRT64
+          update: true
+          install: >-
+            base-devel
+            mingw-w64-ucrt-x86_64-toolchain
+            git
+            autoconf
+            automake
+            mingw-w64-ucrt-x86_64-autotools
+            po4a
+
+      - name: Build with full features
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -p build
+      - name: Test with full features
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -p test -n full_features
+
+      - name: Build without encoders
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p build
+      - name: Test without encoders
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -d encoders,shared -p test -n no_encoders
+
+      - name: Build without decoders
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p build
+      - name: Test without decoders
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -d decoders,shared -p test -n no_decoders
+
+      - name: Build without threads
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p build
+      - name: Test without threads
+        shell: msys2 {0}
+        run: ./build-aux/ci_build.sh -b autotools -d threads,shared -p test -n no_threads
+
+      - name: Build without BCJ filters",96,"e84967a34eb5065e010bafe56042a7de648a2edf","e84967a34eb5065e010bafe56042a7de648a2edf",0,0,"","","","none"
"2023-02-13 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-02-13 13:57:55","2023-02-13 13:57:54","created",0,"Overall, this is a great start and we appreciate your efforts! 

Eventually, it would be great to have CMake and some of the other msys2 flavors, but since the Windows tests are so slow they may belong in another workflow that does not run as often (Maybe just as a pre-release sanity check). Anyway, that is out of the scope of this PR.","",0,0,"","none","arixmkii",34,"Enable CI on Windows hosts for autotools","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","1804309c9742c51c2952ca25443f4f3088e0b4d6","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","90d0e628ff11e5030bcc4fc000bca056adda6603",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-02-13 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-02-13 13:57:55","2023-02-13 13:57:54","created",0,"Overall, this is a great start and we appreciate your efforts! 

Eventually, it would be great to have CMake and some of the other msys2 flavors, but since the Windows tests are so slow they may belong in another workflow that does not run as often (Maybe just as a pre-release sanity check). Anyway, that is out of the scope of this PR.","",0,0,"","none","arixmkii",34,"Enable CI on Windows hosts for autotools","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","1804309c9742c51c2952ca25443f4f3088e0b4d6","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","90d0e628ff11e5030bcc4fc000bca056adda6603",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-02-10 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-10 15:02:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,4,"","","","none"
"2023-02-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-10 14:58:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/check_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,1,"","","","none"
"2023-02-10 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-10 13:39:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-08 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-08 13:44:31","1970-01-01 00:00:00","none",0,"","",0,0,"container_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-08 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-08 13:45:45","2023-02-08 13:45:45","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [X] Yes
- [ ] No","",0,0,"","none","JiaT75",33,"Improve documentation in container.h ","['documentation']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","container_doc_cleanup","acc54cfc9bf0e74cb1c785cbebcac209bc18892e","master","1dbe12b90cff79bb51923733ac0840747b4b4131",0,0,0,"unknown","",0,0,5,115,75,1,"",0,"","",0,0,"","","","none"
"2023-02-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-08 13:49:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_install_docs","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-07 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-02-07 17:19:46","2023-02-07 17:19:46","created",1098971027,"Should be -R since -r is not POSIX","Makefile.am",13,105,"","none","JiaT75",30,"Include Doxygen html files in release","['documentation','5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","aeafc6c364fea42548f5be8796a6b0955b9a2956","[]","[]","doxygen_install_docs","d79485eba04374c9c65c9b3306fe37128dbbe16e","master","7673ef5aa80c1af7fb693360dd82f527b46c2c56",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -100,6 +101,8 @@ dist-hook:
 				> ""$$dest/txt/$$BASE.txt""; \
 		done; \
 	fi
+	doxygen Doxyfile
+	cp -r ""doc/$(doxygen_html_dir)"" ""$(distdir)/doc/""",13,"d79485eba04374c9c65c9b3306fe37128dbbe16e","0c13962a58f1b940c96157d35c5e0b49e1cf559b",0,0,"","","","none"
"2023-02-07 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-02-07 17:19:47","2023-02-07 17:19:46","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- The Doxygen html docs are now included in the release tarball
- If only the liblzma API function documentation is generated, the docs are created in /doc/liblzma
- If all files documentation is generated, the docs are created in /doc/html

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

## Other information
Putting the docs in liblzma folder may be unnecessary. Other distributions seems to place their html documentation files in a directory called ""html"" in the doc directory. If we just want to include it in the ""html"" directory in /doc, then the first and third commit can be omitted.","",0,0,"","none","JiaT75",30,"Include Doxygen html files in release","['documentation','5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","aeafc6c364fea42548f5be8796a6b0955b9a2956","[]","[]","doxygen_install_docs","d79485eba04374c9c65c9b3306fe37128dbbe16e","master","7673ef5aa80c1af7fb693360dd82f527b46c2c56",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-02-06 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-06 13:51:54","2023-02-06 13:51:54","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",31,"Minor updates to documentation in filter.h","['documentation']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","filter_doc_cleanup","a8f4f2ffdd9dec9fa0253b1144a214d4fb2f21fd","master","7673ef5aa80c1af7fb693360dd82f527b46c2c56",0,0,0,"unknown","",0,0,4,145,94,1,"",0,"","",0,0,"","","","none"
"2023-02-04 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-04 13:14:22","2023-02-04 13:14:21","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- The Doxygen html docs are now included in the release tarball
- If only the liblzma API function documentation is generated, the docs are created in /doc/liblzma
- If all files documentation is generated, the docs are created in /doc/html

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

## Other information
Putting the docs in liblzma folder may be unnecessary. Other distributions seems to place their html documentation files in a directory called ""html"" in the doc directory. If we just want to include it in the ""html"" directory in /doc, then the first and third commit can be omitted.","",0,0,"","none","JiaT75",30,"Include Doxygen html files in release","['documentation','5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","doxygen_install_docs","d79485eba04374c9c65c9b3306fe37128dbbe16e","master","7673ef5aa80c1af7fb693360dd82f527b46c2c56",0,0,0,"unknown","",0,0,3,8,1,4,"",0,"","",0,0,"","","","none"
"2023-02-04 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-04 13:09:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-04 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-04 12:54:18","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen_install_docs","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-04 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-04 12:12:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-03 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-03 15:22:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-03 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-03 14:58:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",31,31,"","","","none"
"2023-02-03 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-03 12:42:59","1970-01-01 00:00:00","none",0,"","",0,0,"check_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-03 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-03 12:30:27","1970-01-01 00:00:00","none",0,"","",0,0,"CI_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-03 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-03 12:47:13","2023-02-03 12:47:12","opened",0,"All functions now explicitly specify parameter and return values. Also moved the note about SHA-256 functions not being exported to the top of the file.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","JiaT75",29,"liblzma: Improve documentation in check.h.","['documentation']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","check_doc_cleanup","d60e97676c10aa3498bece944e1fcaea6aeb1a40","master","2c78a83c6faec70154d9eb78022a618ed62cdcb3",0,0,0,"unknown","",0,0,1,33,13,1,"",0,"","",0,0,"","","","none"
"2023-02-02 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-02 16:42:33","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_filter_str","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-02 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-02 16:23:03","1970-01-01 00:00:00","none",0,"","",0,0,"block_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-02 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-02 16:42:29","2023-02-02 16:42:28","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): New test

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",28,"Test Filter String API Functions","['test','5.4.2']","closed",0,"","[]",0,"MEMBER","2023-02-02 16:42:28","2023-02-02 16:42:28","2c78a83c6faec70154d9eb78022a618ed62cdcb3","[]","[]","tuktest_filter_str","921277d58b1f262ab10f72bb86721af4d327de69","master","54ad83c1ae2180dcc0cb2445b181dc1e9732a5d6",1,0,0,"unknown","JiaT75",0,0,3,605,2,4,"",0,"","",0,0,"","","","none"
"2023-02-02 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-02 16:22:54","2023-02-02 16:22:54","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
Similar to https://github.com/tukaani-project/xz/pull/23. These are minor updates to these API header files and may not be everything we need to update before publishing.
<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",27,"Minor updates to documentation in block.h","['documentation']","closed",0,"","[]",0,"MEMBER","2023-02-02 16:22:53","2023-02-02 16:22:53","54ad83c1ae2180dcc0cb2445b181dc1e9732a5d6","[]","[]","block_doc_cleanup","c4cd04f7bde2e4d0f84808bce805a2bc0f9b05f4","master","c563a4bc554a96bd0b6aab3c139715b7ec8f6ca3",1,0,0,"unknown","JiaT75",0,0,6,100,25,1,"",0,"","",0,0,"","","","none"
"2023-02-02 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 16:36:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,3,"","","","none"
"2023-02-02 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 16:22:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-02-02 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 16:22:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/block_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,6,"","","","none"
"2023-02-02 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 16:20:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/block_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-02 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 16:17:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/block_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-02-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 14:00:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/block_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-02 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 13:51:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-02 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-02 13:36:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/block_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-01 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-01 15:41:04","1970-01-01 00:00:00","none",0,"","",0,0,"str2filter_validation_code_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-01 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-02-01 15:41:00","1970-01-01 00:00:00","none",0,"","",0,0,"str2filter_validation_comment_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-01 15:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-02-01 15:40:26","2023-02-01 15:40:26","closed",0,"### Describe the bug

Not necessarily a bug, but the behavior is confusing. lzma_str_to_filters() is successful with the filter string ""lzma1"" when LZMA_STR_ALL_FILTERS flag is used, as expected. However, lzma_str_to_filters() fails with ""lzma1"" when LZMA_STR_NO_VALIDATION. This is confusing because the ""validation"" is too vague. Checking if a filter can be used with the .xz format is technically validation. So, either the code should change or the documentation should be updated to clarify this.

### Version

5.4.1

### Operating System

Ubuntu

### Relevant log output

_No response_","",0,0,"","none","JiaT75",24,"[Bug]: lzma_str_to_filters() has confusing behavior with LZMA1 and flags","['bug']","closed",0,"JiaT75","['JiaT75']",1,"MEMBER","2023-02-01 15:40:26","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-02-01 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-02-01 15:05:43","2023-02-01 15:05:42","closed",0,"The LZMA_STR_NO_VALIDATION flag name and description is ambiguous to how it handles individual filters that cannot be used in .xz format (only lzma1 for now). Now LZMA_STR_NO_VALIDATION is a super set of the LZMA_STR_ALL_FILTERS flag, so they don't need to be used together.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/24


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- LZMA_STR_NO_VALIDATION is now a superset of LZMA_STR_ALL_FILTERS in lzma_str_to_filters()

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
This is another option instead of https://github.com/tukaani-project/xz/pull/25. This is a behavior change for an API function, so it would have to be announced properly in the next release.","",0,0,"","none","JiaT75",26,"liblzma: Change use of LZMA_STR_NO_VALIDATION in lzma_str_to_filters().","['5.4.2']","closed",0,"","[]",0,"MEMBER","2023-02-01 15:05:42","1970-01-01 00:00:00","cb02c4bc89c1f61651413cf0d58c15fa2c75b85f","[]","[]","str2filter_validation_code_change","a625f11964aaf461c51c97b66755e87b74add823","master","f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4",0,1,0,"clean","",0,0,1,5,2,2,"",0,"","",0,0,"","","","none"
"2023-02-01 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 15:45:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-02-01 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 15:39:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-01 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 15:39:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/str2filter_validation_comment_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,1,"","","","none"
"2023-02-01 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 14:06:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,2,"","","","none"
"2023-02-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 13:50:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-02-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 13:46:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 13:37:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-02-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 13:27:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-01 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-02-01 13:15:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-02-01 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-02-01 12:56:01","1970-01-01 00:00:00","none",0,"","",0,0,"CI_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-31 16:41:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-31 16:34:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-31 16:32:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_str","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-31 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-31 13:42:53","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_filter_str","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-31 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-31 13:45:36","2023-01-31 13:45:35","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): New test

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",28,"Test Filter String API Functions","['test','5.4.2']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","tuktest_filter_str","c44095ae3b59e2bfa811638f6e7b69c751c873bf","master","610dde15a88f12cc540424eb3eb3ed61f3876f74",0,0,0,"unknown","",0,0,2,599,2,4,"",0,"","",0,0,"","","","none"
"2023-01-30 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-30 14:27:33","1970-01-01 00:00:00","none",0,"","",0,0,"handle_sigtstp","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-27 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-27 15:58:59","2023-01-27 15:58:58","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [X] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
SIGTSTP signal is not caught, so if the process is paused then the compression and decompression stats are no longer accurate.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- SIGTSTP is caught if the system supports it.
- SIGTSTP will be blocked/unblocked while the handler is in effect

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
This can be added for 5.4.2 or 5.5.0. It adds a new string that will need to be translated and its been a ""bug"" for a long time, so 5.5.0 might be more appropriate.

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",21,"Handle SIGTSTP","['bug','5.5.0']","closed",0,"","[]",0,"MEMBER","2023-01-27 15:58:58","1970-01-01 00:00:00","cdaca21138147df5b73eb7659289c207a2af186e","[]","[]","handle_sigtstp","682563ec8c4297b9a4f66ba7d9bfc694ff9d7dba","master","6327a045f34d48fc5afc58ba0d32a82c94403049",0,1,0,"clean","",0,0,7,157,43,8,"",0,"","",0,0,"","","","none"
"2023-01-27 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-27 12:17:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-26 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-26 16:33:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/handle_sigtstp","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-26 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-01-26 12:49:47","2023-01-26 12:49:47","created",1404960566,"Created two PRs for this, but only one should be used. The better choice is probably https://github.com/tukaani-project/xz/pull/25, but I wanted to show both solutions to see which one we like better.","",0,0,"","none","JiaT75",24,"[Bug]: lzma_str_to_filters() has confusing behavior with LZMA1 and flags","['bug']","open",0,"JiaT75","['JiaT75']",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-25 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-25 14:17:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/block_doc_cleanup","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-01-24 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-24 16:29:12","1970-01-01 00:00:00","none",0,"","",0,0,"block_doc_cleanup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-24 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-24 16:33:59","2023-01-24 16:33:58","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
Similar to https://github.com/tukaani-project/xz/pull/23. These are minor updates to these API header files and may not be everything we need to update before publishing.
<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",27,"Minor updates to documentation in block.h","['documentation']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","block_doc_cleanup","eafdfeac9f28ccb12df9c6edf3c76cda39e4bf9d","master","f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4",0,0,0,"unknown","",0,0,2,75,21,1,"",0,"","",0,0,"","","","none"
"2023-01-24 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-24 13:43:21","1970-01-01 00:00:00","none",0,"","",0,0,"str2filter_validation_code_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-24 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-24 13:34:06","1970-01-01 00:00:00","none",0,"","",0,0,"str2filter_validation_comment_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-24 13:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-24 13:08:41","2023-01-24 13:08:41","opened",0,"### Describe the bug

Not necessarily a bug, but the behavior is confusing. lzma_str_to_filters() is successful with the filter string ""lzma1"" when LZMA_STR_ALL_FILTERS flag is used, as expected. However, lzma_str_to_filters() fails with ""lzma1"" when LZMA_STR_NO_VALIDATION. This is confusing because the ""validation"" is too vague. Checking if a filter can be used with the .xz format is technically validation. So, either the code should change or the documentation should be updated to clarify this.

### Version

5.4.1

### Operating System

Ubuntu

### Relevant log output

_No response_","",0,0,"","none","JiaT75",24,"[Bug]: lzma_str_to_filters() has confusing behavior with LZMA1 and flags","['bug']","open",0,"JiaT75","['JiaT75']",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-24 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-24 13:49:54","2023-01-24 13:49:53","opened",0,"The LZMA_STR_NO_VALIDATION flag name and description is ambiguous to how it handles individual filters that cannot be used in .xz format (only lzma1 for now). Now LZMA_STR_NO_VALIDATION is a super set of the LZMA_STR_ALL_FILTERS flag, so they don't need to be used together.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/24


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- LZMA_STR_NO_VALIDATION is now a superset of LZMA_STR_ALL_FILTERS in lzma_str_to_filters()

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
This is another option instead of https://github.com/tukaani-project/xz/pull/25. This is a behavior change for an API function, so it would have to be announced properly in the next release.","",0,0,"","none","JiaT75",26,"liblzma: Change use of LZMA_STR_NO_VALIDATION in lzma_str_to_filters().","['5.4.2']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","str2filter_validation_code_change","a625f11964aaf461c51c97b66755e87b74add823","master","f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4",0,0,0,"unknown","",0,0,1,5,2,2,"",0,"","",0,0,"","","","none"
"2023-01-24 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-24 13:46:07","2023-01-24 13:46:06","opened",0,"The flag description for LZMA_STR_NO_VALIDATION was previously confusing about the treatment for filters than cannot be used with .xz format (lzma1) without using LZMA_STR_ALL_FILTERS. Now, it is clear that LZMA_STR_NO_VALIDATION is not a super set of LZMA_STR_ALL_FILTERS.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/24


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

Either this or the related code change PR should be used to fix this issue.","",0,0,"","none","JiaT75",25,"liblzma: Clarify a comment about LZMA_STR_NO_VALIDATION.","['5.4.2']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","str2filter_validation_comment_change","2910a6a97c92bccdd5bd0bca4afa47f7d2e0002e","master","f35d98e20609e0be6a04ae2604bfb7cb9d5bd5e4",0,0,0,"unknown","",0,0,1,3,2,1,"",0,"","",0,0,"","","","none"
"2023-01-24 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-24 12:55:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-24 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-24 12:25:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-01-23 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-01-23 13:25:32","2023-01-23 13:25:32","created",1400336254,"@arixmkii Eventually, I would like to support the MSYS, UCRT64, and MINGW64 flavors in CI runners. Along with MSVC CMake of course. The other ones either don't run on x86-64 (which is what the GitHub-hosted runners support), or are the same but just use clang. The clang build is already tested by the MacOS runner, so its probably not necessary to test it on Windows. 

I don't develop or use xz or liblzma on Windows, but we have a few users who do. My note about MinGw and CMake was more about testing the autotool and CMake builds on Windows. So, I think using msys2 makes sense since it is likely many of our users do so.

To start, I think just picking one environment would be great. I feel the most useful one would be UCRT64 if we also have CMake testing msvcrt. Since we already have a lot of runners and configurations, maybe the other environments could be in a separate Workflow that we run manually pre-release or if we are addressing a Windows specific bug.

Thanks for offering to help with this! I was planning on working on this soon, but I kept delaying it to work on other things. Your help would be greatly appreciated if you have the time to do it :)","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",2,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-21 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-21 14:10:57","1970-01-01 00:00:00","none",0,"","",0,0,"duplicated_custom_suffix_check","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-21 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-21 14:10:52","2023-01-21 14:10:52","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
There were duplicated checks for a custom suffix set when using --format=raw in both the encoder and decoder.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- The check is now done when parsing arguments

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",13,"xz: Refactor duplicated check for custom suffix when using --format=raw","['5.5.0']","closed",0,"","[]",0,"MEMBER","2023-01-21 14:10:51","2023-01-21 14:10:51","cc5aa9ab138beeecaee5a1e81197591893ee9ca0","[]","[]","duplicated_custom_suffix_check","0da27056d29e714423ee42da1bfa343fca6976f3","master","9663141274e01592a281a7f2df5d7a31a1dac8bf",1,0,0,"unknown","JiaT75",0,0,1,23,18,3,"",0,"","",0,0,"","","","none"
"2023-01-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-21 14:10:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-21 14:02:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/duplicated_custom_suffix_check","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-21 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-21 13:51:02","2023-01-21 13:51:01","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
Minor updates to base.h API header file. I plan to do similar changes to each API header file, but I figured its a good idea to review the first one or two so we agree on the changes needed.","",0,0,"","none","JiaT75",23,"Minor updates to Doxygen comments in base.h","['documentation']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","doxygen","6deec64a6e910b2b26c94c757a4330e691903187","master","9663141274e01592a281a7f2df5d7a31a1dac8bf",0,0,0,"unknown","",0,0,2,26,6,1,"",0,"","",0,0,"","","","none"
"2023-01-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-21 13:52:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/duplicated_custom_suffix_check","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",59,1,"","","","none"
"2023-01-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-21 13:48:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,2,"","","","none"
"2023-01-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-21 13:38:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-21 13:34:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-01-20 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-20 13:29:02","2023-01-20 13:29:02","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The -r, --recursive option was commented out in the code as a placeholder.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- tuklib_list.h header file only linked list implementation was added
- All filename reading now uses tuklib_list instead of a string array
- XZ now supports -r, --recursive option to traverse directories

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",22,"XZ recursive CLI","['5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xz_recursive_cli","672f43b580beb9b1a93455b44bdf75439a75c36d","master","6327a045f34d48fc5afc58ba0d32a82c94403049",0,0,0,"unknown","",0,0,7,433,110,10,"",0,"","",0,0,"","","","none"
"2023-01-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-20 13:23:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-01-19 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-19 17:10:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/handle_sigtstp","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",13,6,"","","","none"
"2023-01-19 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-19 17:07:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/handle_sigtstp","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-01-19 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-19 16:42:27","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-19 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-19 16:51:14","2023-01-19 16:51:13","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Doxygen was outdated and never used

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Doxygen will now only generate liblzma API functions documentation
- No longer generate LaTex documentation
- Update Doxygen from 1.4.7 to 1.8.17

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",4,"Doxygen","['documentation','5.5.0']","closed",0,"","[]",1,"MEMBER","2023-01-19 16:51:13","2023-01-19 16:51:13","6327a045f34d48fc5afc58ba0d32a82c94403049","[]","[]","doxygen","d8f5bf35086634671354a4d9cabff6bbaee50b6d","master","b43ff180fb2e372adce876bfa155fc9bcf0c3db4",1,0,0,"unknown","JiaT75",0,0,3,1983,667,16,"",0,"","",0,0,"","","","none"
"2023-01-19 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-19 16:53:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,7,"","","","none"
"2023-01-19 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-19 16:51:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-01-19 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-19 16:48:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",97,3,"","","","none"
"2023-01-19 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-19 13:17:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-18 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-18 14:12:21","1970-01-01 00:00:00","none",0,"","",0,0,"CI_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-18 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-18 14:04:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-18 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-18 13:14:20","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-18 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-18 13:58:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-17 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-17 16:21:28","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-17 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-17 14:00:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/handle_sigtstp","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-01-17 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-17 13:52:25","1970-01-01 00:00:00","none",0,"","",0,0,"handle_sigtstp","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-01-16 14:32:33","2023-01-16 14:32:31","created",1384152806,"Hi! Thank you for the feature request. Unfortunately, this is the wrong repository for this since this is XZ Utils (the C version). XZ for Java has not been moved to GitHub yet, so the code repository is still located at https://git.tukaani.org/xz-java.git.

So, until we move XZ for Java to GitHub, you will need to request features or report bugs either to xz@tukaani.org or the xz-devel mailing list. Instructions for subscribing to the mailing list are documented here: https://tukaani.org/xz/lists.html. You do not need to subscribe to the mailing list to email xz@tukaani.org, but then only the maintainers will be able to see your mails.

Thanks again for the feature request!","",0,0,"","none","JiaT75",19,"[Feature Request]: SeekableXZInputStream ability to write straight into java.nio.ByteBuffer","[]","closed",0,"","[]",1,"NONE","2023-01-16 14:32:31","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-01-16 14:23:50","2023-01-16 14:23:49","created",1384142183,"Hi! Thank you for the bug report, but I will close this bug report because it is a documented feature of XZ Utils. 7zip and XZ Utils are almost completely compatible with how they treat .xz and .lzma files, but here is an example of where they differ.

My quick maths determined this file has the settings pb = 1, lp = 3, lc = 5, which is unsupported by XZ Utils. XZ Utils will only compress or decompress .lzma and .xz files if lp + lc <=4.

This is is documented in doc/lzma-file-format.txt (~ line 105 as of 2022-07-13) and src/liblzma/api/lzma/lzma12.h (~ line 280 as of version 5.4.1). I was not part of the project when this decision was made, but my understanding is that files with lc + lp > 4 are unlikely to improve compression significantly and will use a lot more memory and computation time when compressing or decompressing. 

Since .lzma has been a legacy format since 2009 and .xz does not support these types of settings, we do not plan to change this. Old .lzma files that have been created with these settings can still be decompressed with 7zip and new files should be using the .xz format anyway.","",0,0,"","none","JiaT75",20,"[Bug]: reject a valid lzma file","['bug']","closed",0,"","[]",1,"NONE","2023-01-16 14:23:49","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 14:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-16 14:23:51","2023-01-16 14:23:50","closed",0,"### Describe the bug

Hi, I recently fuzz the xz for parsing lzma format file and found one interesting case.
Specifically, xz rejects one valid lzma format file  while another parser, the 7zip accepts it.

Meanwhile, I use the command `./7zz e -so -tlzma:s0 invalid.lzma` for 7zip, and  use `xz -d -c --format=lzma invalid.lzma` for xz.

I have contacted 7zip, it seems that xz should not reject it. 

The contact link:  [https://sourceforge.net/p/sevenzip/bugs/2380/](https://sourceforge.net/p/sevenzip/bugs/2380/)

The interesting file is attached.[invalid.zip](https://github.com/tukaani-project/xz/files/10425749/invalid.zip)





### Version

5.2.7

### Operating System

ubuntu 22.04

### Relevant log output

_No response_","",0,0,"","none","boofish",20,"[Bug]: reject a valid lzma file","['bug']","closed",0,"","[]",1,"NONE","2023-01-16 14:23:49","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 14:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-16 14:32:32","2023-01-16 14:32:31","closed",0,"### Describe the Feature

Can you please add methods in SeekableXZInputStream ability to write straight into an existing java.nio.ByteBuffer

This is to replicate something like 

```
ByteBuffer bytebuffer = ByteBuffer.allocateDirect(65536);
RandomAccessFile raf = new RandomAccessFile(filePath, ""r"");
FileChannel fc = raf.getChannel();
ByteBuffer.allocateDirect(this.bufferSize);

// call next statements many ties  by seeking various positions
fc.read(bytebuffer);
bytebuffer.flip();
```




### Expected Complications

ByteBuffer is available since old versions of java, so adding this feature should not be an issue.

### Will I try to implement this new feature?

No","",0,0,"","none","xbotuk",19,"[Feature Request]: SeekableXZInputStream ability to write straight into java.nio.ByteBuffer","[]","closed",0,"","[]",1,"NONE","2023-01-16 14:32:31","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-01-16 13:37:39","2023-01-16 13:37:39","created",1384074313,"Solved by commit to master 123255b6ed15f4428b2aa92e4962015a5362f6bf","",0,0,"","none","JiaT75",14,"[Bug]: Inconsistent behavior with --format=raw and --list --verbose --verbose","['bug','5.5.0']","closed",0,"","[]",1,"MEMBER","2023-01-16 13:37:39","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 13:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-16 13:37:40","2023-01-16 13:37:39","closed",0,"### Describe the bug

If --format is set to anything other than raw, xz will only print the list information, or an error (--list works only on .xz files (--format=xz or --format=auto)). When --format=raw, xz will print:
Filter chain: --lzma2=dict=8MiB,lc=3,lp=0,pb=2,mode=normal,nice=64,mf=bt4,depth=0 [or the actual filter chain specified]
9 MiB of memory is required. The limiter is disabled.
--list works only on .xz files (--format=xz or --format=auto)

This is not a critical bug, but it is a small inconsistency.

### Version

master @ 8d372bd94066b1a5b05

### Operating System

Ubuntu

### Relevant log output

```shell
./src/xz/xz --format=raw --suffix=.xz --lzma2 -lvv  config.h.xz
xz: Filter chain: --lzma2=dict=8MiB,lc=3,lp=0,pb=2,mode=normal,nice=64,mf=bt4,depth=0
xz: 9 MiB of memory is required. The limiter is disabled.
xz: --list works only on .xz files (--format=xz or --format=auto)

-----------------------------------------------

./src/xz/xz --format=lzma --suffix=.xz --lzma2 -lvv  config.h.xz
xz: --list works only on .xz files (--format=xz or --format=auto)

-----------------------------------------------

./src/xz/xz --format=xz --suffix=.xz --lzma2 -lvv  config.h.xz
config.h.xz (1/1)
  Streams:            1
  Blocks:             1
  Compressed size:    4,044 B
  Uncompressed size:  16.5 KiB (16,852 B)
  Ratio:              0.240
  Check:              CRC64
  Stream padding:     0 B
  Streams:
    Stream    Blocks      CompOffset    UncompOffset        CompSize      UncompSize  Ratio  Check      Padding
         1         1               0               0           4,044          16,852  0.240  CRC64            0
  Blocks:
    Stream     Block      CompOffset    UncompOffset       TotalSize      UncompSize  Ratio  Check      CheckVal          Header  Flags        CompSize    MemUsage  Filters
         1         1              12               0           4,008          16,852  0.238  CRC64      b4fdba2a9a1834bb      12  --              3,987       9 MiB  --lzma2=dict=8MiB
  Memory needed:      9 MiB
  Sizes in headers:   No
  Minimum XZ Utils version: 5.0.0
```
","",0,0,"","none","JiaT75",14,"[Bug]: Inconsistent behavior with --format=raw and --list --verbose --verbose","['bug','5.5.0']","closed",0,"","[]",1,"MEMBER","2023-01-16 13:37:39","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-16 13:36:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-13 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-13 14:22:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-12 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-12 16:20:58","1970-01-01 00:00:00","none",0,"","",0,0,"CI_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-12 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-12 16:20:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,0,"","","","none"
"2023-01-12 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-12 15:23:35","1970-01-01 00:00:00","none",0,"","",0,0,"CI_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-12 15:00:00","WatchEvent","JiaT75","tukaani-project/xz","2023-01-12 15:51:36","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-12 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-12 15:51:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-12 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-12 15:45:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-12 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-12 15:31:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 18:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-01-11 18:13:39","1970-01-01 00:00:00","published",0,"5.4.1 (2023-01-11)

    * liblzma:

        - Fixed the return value of lzma_microlzma_encoder() if the
          LZMA options lc/lp/pb are invalid. Invalid lc/lp/pb options
          made the function return LZMA_STREAM_END without encoding
          anything instead of returning LZMA_OPTIONS_ERROR.

        - Windows / Visual Studio: Workaround a possible compiler bug
          when targeting 32-bit x86 and compiling the CLMUL version of
          the CRC64 code. The CLMUL code isn't enabled by the Windows
          project files but it is in the CMake-based builds.

    * Build systems:

        - Windows-specific CMake changes:

            * Don't try to enable CLMUL CRC64 code if _mm_set_epi64x()
              isn't available. This fixes CMake-based build with Visual
              Studio 2013.

            * Created a workaround for a build failure with windres
              from GNU binutils. It is used only when the C compiler
              is GCC (not Clang). The workaround is incompatible
              with llvm-windres, resulting in ""XZx20Utils"" instead
              of ""XZ Utils"" in the resource file, but without the
              workaround llvm-windres works correctly. See the
              comment in CMakeLists.txt for details.

            * Included the resource files in the xz and xzdec build
              rules. Building the command line tools is still
              experimental but possible with MinGW-w64.

        - Visual Studio: Added stream_decoder_mt.c to the project
          files. Now the threaded decompressor lzma_stream_decoder_mt()
          gets built. CMake-based build wasn't affected.

        - Updated windows/INSTALL-MSVC.txt to mention that CMake-based
          build is now the preferred method with Visual Studio. The
          project files will probably be removed after 5.4.x releases.

        - Changes to #defines in config.h:

            * HAVE_DECL_CLOCK_MONOTONIC was replaced by
              HAVE_CLOCK_MONOTONIC. The old macro was always defined
              in configure-generated config.h to either 0 or 1. The
              new macro is defined (to 1) only if the declaration of
              CLOCK_MONOTONIC is available. This matches the way most
              other config.h macros work and makes things simpler with
              other build systems.

            * HAVE_DECL_PROGRAM_INVOCATION_NAME was replaced by
              HAVE_PROGRAM_INVOCATION_NAME for the same reason.

    * Tests:

        - Fixed test script compatibility with ancient /bin/sh
          versions. Now the five test_compress_* tests should
          no longer fail on Solaris 10.

        - Added and refactored a few tests.

    * Translations:

        - Updated the Catalan and Esperanto translations.

        - Added Korean and Ukrainian man page translations.
","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.1","5.4.1 Stable","none"
"2023-01-11 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-11 15:58:56","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update_5.4.1","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-11 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-11 15:58:18","2023-01-11 15:58:17","closed",0,"This is just a draft for the NEWS update for 5.4.1 stable release. If we add anything else (CMake/Windows updates, test_index tests), then I will update this PR. Let me know your thoughts!

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): NEWS update


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",15,"News Draft for 5.4.1","['5.4.1']","closed",0,"","[]",0,"MEMBER","2023-01-11 15:58:17","2023-01-11 15:58:17","62efd48a825e8f439e84c85e165d8774ddc68fd2","[]","[]","NEWS_update_5.4.1","7963453058d2a4c515b4b4368c9d838bc4194ff5","master","d1561c47ec8cd3844a785d3741dc932f9b9c5790",1,0,0,"unknown","JiaT75",1,0,1,70,0,1,"",0,"","",0,0,"","","","none"
"2023-01-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 15:58:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 15:56:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,1,"","","","none"
"2023-01-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 15:51:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 15:45:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 15:41:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 15:32:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-11 14:35:25","1970-01-01 00:00:00","none",0,"","",0,0,"clang_format_nonliteral_warning","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-11 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-11 14:46:57","1970-01-01 00:00:00","none",0,"","",0,0,"clang_format_nonliteral_warning","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-11 14:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-11 14:54:18","2023-01-11 14:54:17","closed",0,"### Describe the bug

The CI/CD scripts detected this once the -werror was added. 

### Version

5.5.0 (master @57464bb4ebd6c0)

### Operating System

MacOS

### Relevant log output

```shell
/Users/runner/work/xz/xz/build-aux/../src/xz/message.c:726:20: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
                vfprintf(stderr, fmt, ap);
```
","",0,0,"","none","JiaT75",16,"[Bug]: MacOS autotool build fails when -werror flag is used","['bug']","closed",0,"","[]",1,"MEMBER","2023-01-11 14:54:17","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-11 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-11 14:46:49","2023-01-11 14:46:48","closed",0,"clang and gcc differ in how they handle -Wformat-nonliteral. gcc will allow a non-literal format string as long as the function takes its format arguments as a va_list.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Disable a clang warning


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",17,"xz: Fix warning -Wformat-nonliteral on clang in message.c.","[]","closed",0,"","[]",0,"MEMBER","2023-01-11 14:46:48","2023-01-11 14:46:48","d1561c47ec8cd3844a785d3741dc932f9b9c5790","[]","[]","clang_format_nonliteral_warning","27bcfb5e4b5de0cb3ee8831d03bcf29bb7b34952","master","8c0f115cc489331c48df77beca92fe378039d919",1,0,0,"unknown","JiaT75",0,0,1,9,0,1,"",0,"","",0,0,"","","","none"
"2023-01-11 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 14:46:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 12:59:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-11 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-11 12:48:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-10 17:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-10 17:14:46","2023-01-10 17:14:46","opened",0,"### Describe the bug

The CI/CD scripts detected this once the -werror was added. 

### Version

5.5.0 (master @57464bb4ebd6c0)

### Operating System

MacOS

### Relevant log output

```shell
/Users/runner/work/xz/xz/build-aux/../src/xz/message.c:726:20: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
                vfprintf(stderr, fmt, ap);
```
","",0,0,"","none","JiaT75",16,"[Bug]: MacOS autotool build fails when -werror flag is used","['bug']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-10 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-10 17:22:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-10 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-10 17:10:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-10 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-10 15:25:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-10 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-10 15:01:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-10 14:59:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update_5.4.1","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-09 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-09 17:23:06","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_filter_flags","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-09 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-09 16:49:23","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-09 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-09 16:54:24","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update_5.4.1","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-09 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-09 16:54:37","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-09 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-09 16:57:07","2023-01-09 16:57:06","opened",0,"This is just a draft for the NEWS update for 5.4.1 stable release. If we add anything else (CMake/Windows updates, test_index tests), then I will update this PR. Let me know your thoughts!

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): NEWS update


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",15,"News Draft for 5.4.1","['5.4.1']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","NEWS_update_5.4.1","b8ecf0919d993dc2438eda64bbbf4f4f6fcaf62b","master","0c210ca7f489e971e94e1ddc72b0b0806e3c7935",0,0,0,"unknown","",0,0,1,51,0,1,"",0,"","",0,0,"","","","none"
"2023-01-09 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-01-09 16:59:01","2023-01-09 16:59:01","created",1064865709,"I took this entry from the commit log, but I was wondering why we updated to 3.13...3.25. Since this says the changes won't affect this project, we need to give a reason why this update was done.","NEWS",22,23,"","none","JiaT75",15,"News Draft for 5.4.1","['5.4.1']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","b5e0cc5e986823be74e9907d362760c8adec9614","[]","[]","NEWS_update_5.4.1","b8ecf0919d993dc2438eda64bbbf4f4f6fcaf62b","master","0c210ca7f489e971e94e1ddc72b0b0806e3c7935",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -2,6 +2,57 @@
 XZ Utils Release Notes
 ======================
 
+5.4.1 (2022-01-10)
+
+    * liblzma:
+
+        - Created a workaround for a bug in CLMUL CRC64 feature for
+          MSVC (VS2015-2022).
+
+        - Fixed lzma_microlzma_encoder() posssibly returning a boolean
+          from the result of an inner function call. Now, it will
+          always return a proper lzma_ret value.
+
+        - Added a NULL check to lzma_index_hash_append() for consistency
+          with parameter validation done in lzma_index_append().
+
+        - Minor API documentation and internal header file updates.
+
+    * Build systems:
+
+        - Updated cmake_minimum_required from 3.13...3.16 to 3.13...3.25.",22,"b8ecf0919d993dc2438eda64bbbf4f4f6fcaf62b","b8ecf0919d993dc2438eda64bbbf4f4f6fcaf62b",0,0,"","","","none"
"2023-01-09 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-01-09 16:59:02","2023-01-09 16:59:01","created",0,"This is just a draft for the NEWS update for 5.4.1 stable release. If we add anything else (CMake/Windows updates, test_index tests), then I will update this PR. Let me know your thoughts!

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): NEWS update


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",15,"News Draft for 5.4.1","['5.4.1']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","b5e0cc5e986823be74e9907d362760c8adec9614","[]","[]","NEWS_update_5.4.1","b8ecf0919d993dc2438eda64bbbf4f4f6fcaf62b","master","0c210ca7f489e971e94e1ddc72b0b0806e3c7935",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-01-09 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-09 12:42:38","2023-01-09 12:42:37","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The filter flags tests are mostly commented out and do not provide much code coverage

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Tests cover lzma_filter_flags_size, lzma_filter_flags_encode, and lzma_filter_flags_decode

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
Once this PR and test index(#8) are merged, we can finally remove the artifacts from the old test code (expect, succeed, fail macros, etc).","",0,0,"","none","JiaT75",9,"Tests: Refactors existing filter flags tests.","['5.4.1','test']","closed",0,"","[]",0,"MEMBER","2023-01-09 12:42:37","1970-01-01 00:00:00","e54c5ad9482a8e7d5a75ed442cec9af9db7bbe94","[]","[]","tuktest_filter_flags","f97debbf13aab219f39916578ab1bbbfedcd5e7f","master","36edc65ab4cf10a131f239acbd423b4510ba52d5",0,1,0,"unstable","",0,0,2,459,197,1,"",0,"","",0,0,"","","","none"
"2023-01-09 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-09 12:41:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-09 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-09 12:34:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_flags","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-07 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-07 13:17:17","1970-01-01 00:00:00","none",0,"","",0,0,"duplicated_custom_suffix_check","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-07 13:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-07 13:39:13","2023-01-07 13:39:13","opened",0,"### Describe the bug

If --format is set to anything other than raw, xz will only print the list information, or an error (--list works only on .xz files (--format=xz or --format=auto)). When --format=raw, xz will print:
Filter chain: --lzma2=dict=8MiB,lc=3,lp=0,pb=2,mode=normal,nice=64,mf=bt4,depth=0 [or the actual filter chain specified]
9 MiB of memory is required. The limiter is disabled.
--list works only on .xz files (--format=xz or --format=auto)

This is not a critical bug, but it is a small inconsistency.

### Version

master @ 8d372bd94066b1a5b05

### Operating System

Ubuntu

### Relevant log output

```shell
./src/xz/xz --format=raw --suffix=.xz --lzma2 -lvv  config.h.xz
xz: Filter chain: --lzma2=dict=8MiB,lc=3,lp=0,pb=2,mode=normal,nice=64,mf=bt4,depth=0
xz: 9 MiB of memory is required. The limiter is disabled.
xz: --list works only on .xz files (--format=xz or --format=auto)

-----------------------------------------------

./src/xz/xz --format=lzma --suffix=.xz --lzma2 -lvv  config.h.xz
xz: --list works only on .xz files (--format=xz or --format=auto)

-----------------------------------------------

./src/xz/xz --format=xz --suffix=.xz --lzma2 -lvv  config.h.xz
config.h.xz (1/1)
  Streams:            1
  Blocks:             1
  Compressed size:    4,044 B
  Uncompressed size:  16.5 KiB (16,852 B)
  Ratio:              0.240
  Check:              CRC64
  Stream padding:     0 B
  Streams:
    Stream    Blocks      CompOffset    UncompOffset        CompSize      UncompSize  Ratio  Check      Padding
         1         1               0               0           4,044          16,852  0.240  CRC64            0
  Blocks:
    Stream     Block      CompOffset    UncompOffset       TotalSize      UncompSize  Ratio  Check      CheckVal          Header  Flags        CompSize    MemUsage  Filters
         1         1              12               0           4,008          16,852  0.238  CRC64      b4fdba2a9a1834bb      12  --              3,987       9 MiB  --lzma2=dict=8MiB
  Memory needed:      9 MiB
  Sizes in headers:   No
  Minimum XZ Utils version: 5.0.0
```
","",0,0,"","none","JiaT75",14,"[Bug]: Inconsistent behavior with --format=raw and --list --verbose --verbose","['bug']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-07 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-07 13:24:22","2023-01-07 13:24:22","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
There were duplicated checks for a custom suffix set when using --format=raw in both the encoder and decoder.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- The check is now done when parsing arguments

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information
This will change behavior in weird situations when using --format=raw. If someone combines --format=raw and --list, the output is still an error, but it is different.

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",13,"xz: Refactor duplicated check for custom suffix when using --format=raw","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","duplicated_custom_suffix_check","b9adf4d5e41c7d3b1e543902d4182702938bbc9d","master","8d372bd94066b1a5b0570b2550f83c2868486adf",0,0,0,"unknown","",0,0,1,21,18,3,"",0,"","",0,0,"","","","none"
"2023-01-07 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-07 13:55:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/duplicated_custom_suffix_check","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-07 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-07 13:51:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/duplicated_custom_suffix_check","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-07 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-07 13:15:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-01-07 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-07 13:07:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-07 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-07 12:58:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-06 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-06 16:10:54","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_index_hash","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-06 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-06 16:10:51","2023-01-06 16:10:50","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): New test


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- New test added for index_hash API functions
- Increased code covered by tests

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",7,"Tuktest index hash","['5.4.1','test']","closed",0,"","[]",0,"MEMBER","2023-01-06 16:10:50","2023-01-06 16:10:50","6fd39664de47801e670a16617863196bfbde4755","[]","[]","tuktest_index_hash","fc0c788469159f634f09ff23c8cef6925c91da57","master","dfecda875211f737d0db92dc1d3c58a3a2afb0c0",1,0,0,"unknown","JiaT75",0,0,13,414,8,13,"",0,"","",0,0,"","","","none"
"2023-01-06 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-06 16:20:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_flags","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",25,1,"","","","none"
"2023-01-06 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-06 16:18:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-06 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-06 16:10:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,1,"","","","none"
"2023-01-06 12:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2023-01-06 12:24:32","2023-01-06 12:24:32","none",95260132,"The option was here for a reason. --filters is described in --long-help right before the single filter options, so I don't see why this was moved.","src/xz/args.c",5,210,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"c1b3991c51824c89c731308ae159ec2db94e627e","",0,0,"","","","none"
"2023-01-06 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-06 12:44:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-05 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-05 16:30:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-05 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-05 14:31:40","1970-01-01 00:00:00","none",0,"","",0,0,"filter_to_str_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-05 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-05 14:35:55","2023-01-05 14:35:55","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
xz does not have an option to convert a single string to a full filter chain

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- New --filters command line option
- --long-help update
- man page update

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",12,"Filter to string command line interface","['5.5.0']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","filter_to_str_cli","08a10962fd55fc9f0eba2ba57f6672dd38c0991c","master","7657ce1c3c4abff7560336a7b687d98e0e2bd14f",0,0,0,"unknown","",0,0,3,80,7,6,"",0,"","",0,0,"","","","none"
"2023-01-05 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-05 13:14:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index_hash","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-04 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-04 16:31:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2023-01-04 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-04 16:21:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-01-04 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-04 15:59:03","1970-01-01 00:00:00","none",0,"","",0,0,"solaris_bug","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-04 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-04 15:58:59","2023-01-04 15:58:58","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Tests fail on Solaris 10 because of non portable shell parameter expansion.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 
https://github.com/tukaani-project/xz/issues/10

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Only effects test_compress based tests.
- Alters the create_compress_files.c to require the full filename as an argument instead of just ""abc"", ""text"", or ""random.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
I tried using ${parameter:offset} instead, but dash did not support this. Shell scripting is fun...","",0,0,"","none","JiaT75",11,"Tests: Replace non portable shell parameter expansion","['bug']","closed",0,"","[]",0,"MEMBER","2023-01-04 15:58:58","2023-01-04 15:58:58","52380678f42364daa4510f92f6d3b18ec98c3638","[]","[]","solaris_bug","71aaddef6c67606db0e117407f9bceb87a89005e","master","d0eb345bb7d148a62883ee299adec2b74a0f6f3b",1,0,0,"unknown","JiaT75",0,0,1,16,10,4,"",0,"","",0,0,"","","","none"
"2023-01-04 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-04 15:58:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-04 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-04 15:50:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-04 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-01-04 12:53:27","1970-01-01 00:00:00","none",0,"","",0,0,"solaris_bug","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-03 17:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-01-03 17:26:28","2023-01-03 17:26:27","opened",0,"### Describe the bug

The following tests have been reported to fail on Solaris 10:
- FAIL: test_compress_prepared_bcj_sparc
-  FAIL: test_compress_prepared_bcj_x86
-  FAIL: test_compress_generated_abc
-  FAIL: test_compress_generated_random
-  FAIL: test_compress_generated_text

Thanks to both İhsan Doğan and Dennis Clarke for reporting this.

### Version

xz and liblzma 5.4.0

### Operating System

Solaris 10

### Relevant log output

```shell
Log file provided by İhsan Doğan <ihsan@dogan.ch> 

cat work/solaris10-sparc/build-isa-sparcv8plus/xz-5.4.0/tests/test-suite.log 
==========================================
   XZ Utils 5.4.0: tests/test-suite.log
==========================================

# TOTAL: 16
# PASS:  11
# SKIP:  0
# XFAIL: 0
# FAIL:  5
# XPASS: 0
# ERROR: 0

.. contents:: :depth: 2

FAIL: test_compress_prepared_bcj_sparc
======================================

./test_compress.sh: bad substitution
FAIL test_compress_prepared_bcj_sparc (exit status: 1)

FAIL: test_compress_prepared_bcj_x86
====================================

./test_compress.sh: bad substitution
FAIL test_compress_prepared_bcj_x86 (exit status: 1)

FAIL: test_compress_generated_abc
=================================

./test_compress.sh: bad substitution
FAIL test_compress_generated_abc (exit status: 1)

FAIL: test_compress_generated_random
====================================

./test_compress.sh: bad substitution
FAIL test_compress_generated_random (exit status: 1)

FAIL: test_compress_generated_text
==================================

./test_compress.sh: bad substitution
FAIL test_compress_generated_text (exit status: 1)
```
","",0,0,"","none","JiaT75",10,"[Bug]: Multiple tests failing on Solaris 10","['bug']","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-03 17:00:00","PushEvent","JiaT75","tukaani-project/.github","2023-01-03 17:17:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-03 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-03 13:45:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,10,"","","","none"
"2023-01-03 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-03 13:06:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-03 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-03 12:38:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-01-02 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-01-02 14:33:53","1970-01-01 00:00:00","none",0,"","",0,0,"program_name_invocation_decl","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-01-02 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-01-02 14:33:49","2023-01-02 14:33:48","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
HAVE_DECL_PROGRAM_INVOCATION_NAME macro definition is inconsistent across build systems and is always defined, even if set to 0.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- HAVE_DECL_PROGRAM_INVOCATION_NAME -> HAVE_PROGRAM_INVOCATION_NAME
- Consistent across all build systems
- HAVE_PROGRAM_INVOCATION_NAME is only defined when set to 1

## Does this introduce a breaking change?

- [ ] Yes
- [X No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",6,"Build: Only define HAVE_DECL_PROGRAM_INVOCATION_NAME if it is set to 1.","[]","closed",0,"","[]",0,"MEMBER","2023-01-02 14:33:48","2023-01-02 14:33:48","bb740e3b117f1a3c65152d01e5755523a908ecb1","[]","[]","program_name_invocation_decl","19f0f0bc059ba3372a449fd30ed4c37078d39536","master","dfecda875211f737d0db92dc1d3c58a3a2afb0c0",1,0,0,"unknown","JiaT75",0,0,1,8,6,4,"",0,"","",0,0,"","","","none"
"2023-01-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-02 14:33:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-02 14:26:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-01-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-02 14:20:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index_hash","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",17,4,"","","","none"
"2023-01-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-02 14:19:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_filter_flags","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,1,"","","","none"
"2023-01-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-02 14:18:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,2,"","","","none"
"2023-01-02 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-01-02 14:17:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/program_name_invocation_decl","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,1,"","","","none"
"2022-12-30 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-30 15:37:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",11,11,"","","","none"
"2022-12-29 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-29 15:35:02","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_filter_flags","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-29 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-29 15:41:04","2022-12-29 15:41:03","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The filter flags tests are mostly commented out and do not provide much code coverage

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Tests cover lzma_filter_flags_size, lzma_filter_flags_encode, and lzma_filter_flags_decode

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
Once this PR and test index(#8) are merged, we can finally remove the artifacts from the old test code (expect, succeed, fail macros, etc).","",0,0,"","none","JiaT75",9,"Tests: Refactors existing filter flags tests.","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","tuktest_filter_flags","cd6ee614c7a494ac06a7aa262935d24845b28eef","master","8566d3013e5a40c397fe0e897f3512131dba80d3",0,0,0,"unknown","",0,0,1,459,198,3,"",0,"","",0,0,"","","","none"
"2022-12-29 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-29 14:06:30","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_index","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-29 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-29 14:20:33","2022-12-29 14:20:32","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The current test_index.c is using the old test format and is largely incomplete.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Creates helpful mask macros for return values from lzma_index_checks()
- Refactors test_index.c to use tuktest and cover more API functions
- Allow test_index.c to function properly if encoders or decoders are not built

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",8,"Refactor tests in test_index.c","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","tuktest_index","debf683d805bcb057278745d3c24193596136b3e","master","8566d3013e5a40c397fe0e897f3512131dba80d3",0,0,0,"unknown","",0,0,2,1465,538,4,"",0,"","",0,0,"","","","none"
"2022-12-29 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-29 13:00:53","1970-01-01 00:00:00","none",0,"","",0,0,"program_name_invocation_decl","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-29 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-29 13:19:22","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_index_hash","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-29 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-29 13:04:37","2022-12-29 13:04:36","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [X] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
HAVE_DECL_PROGRAM_INVOCATION_NAME macro definition is inconsistent across build systems and is always defined, even if set to 0.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- HAVE_DECL_PROGRAM_INVOCATION_NAME -> HAVE_PROGRAM_INVOCATION_NAME
- Consistent across all build systems
- HAVE_PROGRAM_INVOCATION_NAME is only defined when set to 1

## Does this introduce a breaking change?

- [ ] Yes
- [X No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",6,"Build: Only define HAVE_DECL_PROGRAM_INVOCATION_NAME if it is set to 1.","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","program_name_invocation_decl","35f4a89230c3411ba98c5c46ff2359c4ba6c5b71","master","8566d3013e5a40c397fe0e897f3512131dba80d3",0,0,0,"unknown","",0,0,1,8,6,4,"",0,"","",0,0,"","","","none"
"2022-12-29 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-29 13:20:59","2022-12-29 13:20:58","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): New test


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- New test added for index_hash API functions
- Increased code covered by tests

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",7,"Tuktest index hash","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","tuktest_index_hash","fe3b8e075d8e6608294e1a05e4e7e06d0cc6125b","master","8566d3013e5a40c397fe0e897f3512131dba80d3",0,0,0,"unknown","",0,0,4,394,6,10,"",0,"","",0,0,"","","","none"
"2022-12-29 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-29 13:25:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index_hash","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2022-12-29 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-29 13:01:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/program_name_invocation_decl","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-29 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2022-12-29 12:02:18","1970-01-01 00:00:00","none",0,"","",0,0,"mytime_tweaks","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-28 18:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-28 18:12:48","2022-12-28 18:12:48","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
mytime.c requires mythread.h to include <time.h> if POSIX threads are enabled. Also, HAVE_DECL_CLOCK_MONOTONIC is always set to 0 or 1

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
-  mytime.c conditionally includes either <time.h> or <sys/time.h>, depending on the configuration.
- HAVE_DECL_CLOCK_MONOTONIC is now only set if it is set to 1 in both autotools and CMake.
- mythread.h will always include <time.h>, but conditionally includes <sys/time.h> now.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",5,"Mytime tweaks","[]","closed",0,"","[]",0,"MEMBER","2022-12-28 18:12:48","2022-12-28 18:12:48","8566d3013e5a40c397fe0e897f3512131dba80d3","[]","[]","mytime_tweaks","988258a9a3ba6ef8bdd39233736d605d24820b9a","master","8f5be197348e313ff567735afc76afa40649fec6",1,0,0,"unknown","JiaT75",2,0,3,20,12,4,"",0,"","",0,0,"","","","none"
"2022-12-28 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 18:12:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,1,"","","","none"
"2022-12-28 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 17:55:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/mytime_tweaks","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-28 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 17:32:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/mytime_tweaks","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2022-12-28 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 17:25:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/mytime_tweaks","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-28 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 17:22:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/mytime_tweaks","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-28 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-28 16:24:36","2022-12-28 16:24:36","created",1058458095,"Should be elif defined(HAVE_SYS_TIME_H)","src/common/mythread.h",26,320,"","none","JiaT75",5,"Mytime tweaks","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","138ba453e5b18be4931b311018bea9e65779ecb4","[]","[]","mytime_tweaks","874237e3b9be97baade9e09bc0d2af744820bb0f","master","8f5be197348e313ff567735afc76afa40649fec6",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -310,7 +317,7 @@ mythread_condtime_set(mythread_condtime *condtime, const mythread_cond *cond,
 
 	condtime->tv_sec += now.tv_sec;
 	condtime->tv_nsec += now.tv_nsec;
-#else
+#elif HAVE_SYS_TIME_H",26,"874237e3b9be97baade9e09bc0d2af744820bb0f","e3957f96205a0dc4c5332c4c157c7300c038321c",0,0,"","","","none"
"2022-12-28 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-28 16:28:01","2022-12-28 16:28:01","created",1058459971,"Should be #if defined(HAVE_SYS_TIME_H) && !defined(HAVE_CLOCK_GETTIME)","src/common/mythread.h",10,108,"","none","JiaT75",5,"Mytime tweaks","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","138ba453e5b18be4931b311018bea9e65779ecb4","[]","[]","mytime_tweaks","874237e3b9be97baade9e09bc0d2af744820bb0f","master","8f5be197348e313ff567735afc76afa40649fec6",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -100,12 +100,19 @@ mythread_sigmask(int how, const sigset_t *restrict set,
 // Using pthreads //
 ////////////////////
 
-#include <sys/time.h>
 #include <pthread.h>
 #include <signal.h>
 #include <time.h>
 #include <errno.h>
 
+#if HAVE_SYS_TIME_H && !defined(HAVE_CLOCK_GETTIME)",10,"874237e3b9be97baade9e09bc0d2af744820bb0f","e3957f96205a0dc4c5332c4c157c7300c038321c",0,0,"","","","none"
"2022-12-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 16:44:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/mytime_tweaks","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2022-12-28 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-28 16:24:37","2022-12-28 16:24:36","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
mytime.c requires mythread.h to include <time.h> if POSIX threads are enabled. Also, HAVE_DECL_CLOCK_MONOTONIC is always set to 0 or 1

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
-  mytime.c conditionally includes either <time.h> or <sys/time.h>, depending on the configuration.
- HAVE_DECL_CLOCK_MONOTONIC is now only set if it is set to 1 in both autotools and CMake.
- mythread.h will always include <time.h>, but conditionally includes <sys/time.h> now.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",5,"Mytime tweaks","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","138ba453e5b18be4931b311018bea9e65779ecb4","[]","[]","mytime_tweaks","874237e3b9be97baade9e09bc0d2af744820bb0f","master","8f5be197348e313ff567735afc76afa40649fec6",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-28 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-28 16:28:02","2022-12-28 16:28:01","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
mytime.c requires mythread.h to include <time.h> if POSIX threads are enabled. Also, HAVE_DECL_CLOCK_MONOTONIC is always set to 0 or 1

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
-  mytime.c conditionally includes either <time.h> or <sys/time.h>, depending on the configuration.
- HAVE_DECL_CLOCK_MONOTONIC is now only set if it is set to 1 in both autotools and CMake.
- mythread.h will always include <time.h>, but conditionally includes <sys/time.h> now.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",5,"Mytime tweaks","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","138ba453e5b18be4931b311018bea9e65779ecb4","[]","[]","mytime_tweaks","874237e3b9be97baade9e09bc0d2af744820bb0f","master","8f5be197348e313ff567735afc76afa40649fec6",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-28 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-28 13:44:40","1970-01-01 00:00:00","none",0,"","",0,0,"mytime_tweaks","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-28 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-28 13:50:29","2022-12-28 13:50:28","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
mytime.c requires mythread.h to include <time.h> if POSIX threads are enabled. Also, HAVE_DECL_CLOCK_MONOTONIC is always set to 0 or 1

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
-  mytime.c conditionally includes either <time.h> or <sys/time.h>, depending on the configuration.
- HAVE_DECL_CLOCK_MONOTONIC is now only set if it is set to 1 in both autotools and CMake.
- mythread.h will always include <time.h>, but conditionally includes <sys/time.h> now.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",5,"Mytime tweaks","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","mytime_tweaks","c62333369e380153babb62a492264b269f3b69b1","master","8f5be197348e313ff567735afc76afa40649fec6",0,0,0,"unknown","",0,0,3,34,12,4,"",0,"","",0,0,"","","","none"
"2022-12-28 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-28 13:58:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/mytime_tweaks","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-27 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-27 17:21:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-27 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-27 17:15:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-22 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-22 16:37:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-22 15:15:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-21 16:21:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-21 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2022-12-21 13:12:16","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_lzip_decoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-21 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-21 13:12:05","2022-12-21 13:12:04","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","closed",0,"","[]",0,"MEMBER","2022-12-21 13:12:04","2022-12-21 13:12:04","8a5e35d00306cf082681d55ef13e8647d6ca5f21","[]","[]","tuktest_lzip_decoder","141ba5bb05d67565280c67a7b4b60a8b05ab4c48","master","09a114805e1d4f9a02a06cee7dbf2f5014d1f710",1,0,0,"unknown","JiaT75",21,0,1,474,0,3,"",0,"","",0,0,"","","","none"
"2022-12-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-21 13:12:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-20 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 16:52:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-20 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 16:51:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-20 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-20 14:48:31","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-20 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2022-12-20 14:05:28","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen_insource_build_gitignore","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-20 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2022-12-20 14:08:52","2022-12-20 14:08:52","created",1359420514,"We will still need to have a few updates for the documentation before it is ready to be published on the website, but I am still working through them. It better to break these PRs up to make it a bit more manageable. I figured this was a good start.","",0,0,"","none","JiaT75",4,"Doxygen","[]","open",0,"","[]",1,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-20 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-20 14:05:22","2022-12-20 14:05:21","closed",0,"In source builds are not recommended, but we should still ignore the generated artifacts.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): .gitignore updates


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Doxygen output files were not ignored in an in source build

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Generated Doxygen docs are ignored by git

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",3,"Doxygen: Update .gitignore for generating docs for in source build.","[]","closed",0,"","[]",0,"MEMBER","2022-12-20 14:05:21","2022-12-20 14:05:21","30a6f5f5b8cfb94cf6227dce3b168d4d125b4fc6","[]","[]","doxygen_insource_build_gitignore","57ca881ece05e6773b42a5a6d7b88f30685d5259","master","067ca271c3339bcfff2427a149ffabba7b077e76",1,0,0,"unknown","JiaT75",0,0,1,2,0,1,"",0,"","",0,0,"","","","none"
"2022-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 14:25:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 14:05:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 14:04:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen_insource_build_gitignore","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-20 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-20 13:51:23","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-20 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-20 13:57:35","2022-12-20 13:57:34","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Doxygen was outdated and never used

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Doxygen will now only generate liblzma API functions documentation
- No longer generate LaTex documentation
- Update Doxygen from 1.4.7 to 1.8.17

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",4,"Doxygen","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","doxygen","8adc8cb1dbe7e3456ab0f0028a17fab53fa5341b","master","067ca271c3339bcfff2427a149ffabba7b077e76",0,0,0,"unknown","",0,0,4,2158,880,17,"",0,"","",0,0,"","","","none"
"2022-12-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 13:58:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 13:57:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-20 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-20 12:49:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2022-12-19 15:38:20","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_insource_build_gitignore","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-19 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-19 15:38:13","2022-12-19 15:38:12","closed",0,"In source builds are not recommended, but we can make it easier by ignoring the generated artifacts from CMake.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): .gitignore updates


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
CMake artifacts were not properly ignored if an in source build is done.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- CMake build artifacts are ignored by git tracking

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",2,"CMake: Update .gitignore for CMake artifacts from in source build.","[]","closed",0,"","[]",0,"MEMBER","2022-12-19 15:38:12","2022-12-19 15:38:12","d6fed05468208ad481ba14cfaed29782632ca196","[]","[]","cmake_insource_build_gitignore","2fd28d2b7cec3468324a6f15eff7e73c285b1d7d","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",1,0,0,"unknown","JiaT75",0,0,1,23,0,1,"",0,"","",0,0,"","","","none"
"2022-12-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-19 15:38:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2022-12-16 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-16 13:05:56","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_insource_build_gitignore","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-16 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-16 13:27:21","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen_insource_build_gitignore","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-16 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-16 13:11:04","2022-12-16 13:11:03","opened",0,"In source builds are not recommended, but we can make it easier by ignoring the generated artifacts from CMake.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): .gitignore updates


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
CMake artifacts were not properly ignored if an in source build is done.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- CMake build artifacts are ignored by git tracking

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",2,"CMake: Update .gitignore for CMake artifacts from in source build.","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","cmake_insource_build_gitignore","2fd28d2b7cec3468324a6f15eff7e73c285b1d7d","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,1,23,0,1,"",0,"","",0,0,"","","","none"
"2022-12-16 13:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2022-12-16 13:31:00","2022-12-16 13:30:59","opened",0,"In source builds are not recommended, but we should still ignore the generated artifacts.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): .gitignore updates


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Doxygen output files were not ignored in an in source build

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Generated Doxygen docs are ignored by git

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",3,"Doxygen: Update .gitignore for generating docs for in source build.","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","doxygen_insource_build_gitignore","a8c0cf9814c4ea402b4033231174bdb044cc8f6a","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,1,3,0,1,"",0,"","",0,0,"","","","none"
"2022-12-16 12:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-16 12:52:01","2022-12-16 12:52:01","created",1050731875,"I would rather check the CRC on the output to make this a more self contained test. What if the memlimit code somehow disables CRC checking and corrupts the output? Reading the lzip_decoder.c, its obvious this isn't the case, but the test doesn't know that. Its very few lines of code to check the output and makes the test more complete","tests/test_lzip_decoder.c",410,410,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","2d680ab6fdaec2b379e153ea18ca8137a1ee1210","[]","[]","tuktest_lzip_decoder","141ba5bb05d67565280c67a7b4b60a8b05ab4c48","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT 1 << 20
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Helper function to decode a good file with no flags and plenty
+// high memlimit
+static void
+basic_lzip_decode(const char* src, const uint8_t* expected_result,
+		size_t expected_result_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_result_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_out = expected_result_size;
+
+	// Feed 1 byte at a time to the decoder to look for any bugs
+	// when switching between decoding sequences
+	lzma_ret ret = LZMA_OK;
+	while (ret == LZMA_OK) {
+		strm.avail_in = 1;
+		ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, expected_result_size);
+	assert_array_eq(output_buffer, expected_result,
+			expected_result_size);
+	lzma_end(&strm);
+}
+
+
+static void
+test_options(void)
+{
+	// Test NULL stream
+	assert_lzma_ret(lzma_lzip_decoder(NULL, MEMLIMIT, 0),
+			LZMA_PROG_ERROR);
+
+	// Test invalid flags
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, UINT32_MAX),
+			LZMA_OPTIONS_ERROR);
+	// Memlimit tests are done elsewhere
+}
+
+
+static void
+test_v0_decode(void) {
+	// This tests if liblzma can decode lzip version 0 files.
+	// lzip 1.17 and older can decomperss this, but lzip 1.18
+	// and newer can no longer decode these files.
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1);
+}
+
+
+static void
+test_v1_decode(void) {
+	// This tests decoding a basic lzip v1 file
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1);
+}
+
+
+// Helper function to decode a good file with trailing bytes after
+// the lzip stream
+static void
+trailing_helper(const char* src, const uint8_t *expected_result,
+		size_t expected_size, const uint8_t *expected_trailing,
+		size_t expected_trailing_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_in = file_size;
+	strm.avail_out = expected_size;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+	assert_uint(strm.total_in, <, file_size);
+	assert_uint_eq(strm.total_out, expected_size);
+	assert_array_eq(output_buffer, expected_result,
+			strm.total_out);
+
+	// Trailing data should be readable from strm.next_in
+	assert_uint_eq(strm.avail_in, expected_trailing_size);
+	assert_array_eq(strm.next_in, expected_trailing, strm.avail_in);
+	lzma_end(&strm);
+}
+
+
+// Helper function to decode a bad file and compare to returned error to
+// what the caller expects
+static void
+decode_expect_error(const char* src, lzma_ret expected_error)
+{
+	lzma_stream strm = LZMA_STREAM_INIT;
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	uint8_t output_buffer[DECODE_CHUNK_SIZE];
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	lzma_ret ret = LZMA_OK;
+
+	while (ret == LZMA_OK) {
+		// Discard output since we are only looking for errors
+		strm.next_out = output_buffer;
+		strm.avail_out = DECODE_CHUNK_SIZE;
+		if (strm.avail_in == 0)
+			ret = lzma_code(&strm, LZMA_FINISH);
+		else
+			ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, expected_error);
+	lzma_end(&strm);
+}
+
+
+static void
+test_v0_trailing(void) {
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	const char expected_trailing_data[] = ""Trailing garbage\n"";
+	trailing_helper(""files/good-1-v0-trailing-1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1,
+			(const uint8_t *) expected_trailing_data,
+			sizeof(expected_trailing_data) - 1);
+}
+
+
+static void
+test_v1_trailing(void) {
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	const char expected_trailing_data[] = ""Trailing garbage\n"";
+	trailing_helper(""files/good-1-v1-trailing-1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1,
+			(const uint8_t *) expected_trailing_data,
+			sizeof(expected_trailing_data) - 1);
+
+	// The second files/good-1-v1-trailing-2.lz will have the same
+	// expected output and trailing output as
+	// files/good-1-v1-trailing-1.lz, but this tests if the prefix
+	// to the trailing data contains lzip magic bytes.
+	// When this happens, the expected behavior is to silently ignore
+	// the magic byte prefix and consume it from the input file.
+	trailing_helper(""files/good-1-v1-trailing-2.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1,
+			(const uint8_t *) expected_trailing_data,
+			sizeof(expected_trailing_data) - 1);
+
+	// Expect LZMA_BUF error if a file ends with the lzip magic bytes
+	// but does not contain any data after
+	decode_expect_error(""files/bad-1-v1-trailing-magic.lz"",
+			LZMA_BUF_ERROR);
+}
+
+
+static void
+test_concatentated(void)
+{
+	// First test a file with one v0 member and one v1 member
+	// The first member should contain ""Hello\n"" and
+	// the second member should contain ""World!\n""
+	const char expected_result[] = ""Hello\nWorld!\n"";
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	size_t file_size;
+	uint8_t *v0_v1 = tuktest_file_from_srcdir(""files/good-2-v0-v1.lz"",
+		&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	uint8_t output_buffer[DECODE_CHUNK_SIZE];
+
+	strm.avail_in = file_size;
+	strm.next_in = v0_v1;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	// The second file contains one v1 member and one v2 member
+	uint8_t *v1_v0 = tuktest_file_from_srcdir(""files/good-2-v1-v0.lz"",
+		&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = v1_v0;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	// The third file contains 2 v1 members
+	uint8_t *v1_v1 = tuktest_file_from_srcdir(""files/good-2-v1-v1.lz"",
+		&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = v1_v1;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	lzma_end(&strm);
+}
+
+
+static void
+test_crc(void) {
+	// Test invalid checksum
+	lzma_stream strm = LZMA_STREAM_INIT;
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(""files/bad-1-v1-crc32.lz"",
+			&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	uint8_t output_buffer[sizeof(expected_result) - 1];
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = sizeof(output_buffer);
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_DATA_ERROR);
+
+	// Test ignoring the checksum value - should decode successfully
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED | LZMA_IGNORE_CHECK), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = sizeof(output_buffer);
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	// Test tell check
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED | LZMA_TELL_ANY_CHECK), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = sizeof(output_buffer);
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_GET_CHECK);
+	assert_uint_eq(lzma_get_check(&strm), LZMA_CHECK_CRC32);
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_DATA_ERROR);
+	lzma_end(&strm);
+}
+
+
+static void
+test_invalid_magic_bytes(void) {
+	uint8_t lzip_id_string[] = { 0x4C, 0x5A, 0x49, 0x50 };
+	lzma_stream strm = LZMA_STREAM_INIT;
+
+	for (uint32_t i = 0; i < ARRAY_SIZE(lzip_id_string); i++) {
+		// Corrupt magic bytes
+		lzip_id_string[i] ^= 1;
+		uint8_t output_buffer[DECODE_CHUNK_SIZE];
+
+		assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0),
+				LZMA_OK);
+
+		strm.next_in = lzip_id_string;
+		strm.avail_in = sizeof(lzip_id_string);
+		strm.next_out = output_buffer;
+		strm.avail_out = DECODE_CHUNK_SIZE;
+
+		assert_lzma_ret(lzma_code(&strm, LZMA_RUN),
+				LZMA_FORMAT_ERROR);
+
+		// Reset magic bytes
+		lzip_id_string[i] ^= 1;
+	}
+
+	lzma_end(&strm);
+}
+
+
+static void
+test_invalid_version(void)
+{
+	// The file contains a version number that is not 0 or 1,
+	// so it should cause an error
+	decode_expect_error(""files/unsupported-1-v234.lz"",
+			LZMA_OPTIONS_ERROR);
+}
+
+
+static void
+test_invalid_dictionary_size(void) {
+	// First file has too small dictionary size field
+	decode_expect_error(""files/bad-1-v1-dict-1.lz"", LZMA_DATA_ERROR);
+	
+	// Second file has too large dictionary size field
+	decode_expect_error(""files/bad-1-v1-dict-2.lz"", LZMA_DATA_ERROR);
+}
+
+
+static void
+test_invalid_uncomp_size(void) {
+	// Test invalid v0 lzip file uncomp size
+	decode_expect_error(""files/bad-1-v0-uncomp-size.lz"",
+			LZMA_DATA_ERROR);
+	
+	// Test invalid v1 lzip file uncomp size
+	decode_expect_error(""files/bad-1-v1-uncomp-size.lz"",
+			LZMA_DATA_ERROR);
+}
+
+
+static void
+test_invalid_member_size(void) {
+	decode_expect_error(""files/bad-1-v1-member-size.lz"",
+			LZMA_DATA_ERROR);
+}
+
+
+static void
+test_invalid_memlimit(void) {",393,"141ba5bb05d67565280c67a7b4b60a8b05ab4c48","6d96d4584f165b191e4d70618e18a2910c5be423",0,0,"","","","none"
"2022-12-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-16 12:49:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_lzip_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-16 12:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-16 12:52:02","2022-12-16 12:52:01","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","2d680ab6fdaec2b379e153ea18ca8137a1ee1210","[]","[]","tuktest_lzip_decoder","141ba5bb05d67565280c67a7b4b60a8b05ab4c48","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-15 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-15 16:37:54","2022-12-15 16:37:55","created",1049880053,"Maybe this is too philosophical about the purpose of the tests, but using the checksum as the content verification assumes that the checksum was properly checked. The more paranoid approach is to also verify the checksum value ","tests/test_lzip_decoder.c",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","5b9b1104932cc045edadebeb35ffbd61d2af8895","[]","[]","tuktest_lzip_decoder","de69d098e860c456bf7fc2dfd1b8e03d9e94700f","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT 1 << 20
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Helper function to decode a good file with no flags and plenty
+// high memlimit
+static void
+basic_lzip_decode(const char* src, const uint8_t* expected_result,
+		size_t expected_result_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_result_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_out = expected_result_size;
+
+	// Feed 1 byte at a time to the decoder to look for any bugs
+	// when switching between decoding sequences
+	lzma_ret ret = LZMA_OK;
+	while (ret == LZMA_OK) {
+		strm.avail_in = 1;
+		ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, expected_result_size);
+	assert_array_eq(output_buffer, expected_result,
+			expected_result_size);
+	lzma_end(&strm);
+}
+
+
+static void
+test_options(void)
+{
+	// Test NULL stream
+	assert_lzma_ret(lzma_lzip_decoder(NULL, MEMLIMIT, 0),
+			LZMA_PROG_ERROR);
+
+	// Test invalid flags
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, UINT32_MAX),
+			LZMA_OPTIONS_ERROR);
+	// Memlimit tests are done elsewhere
+}
+
+
+static void
+test_v0_decode(void) {
+	// This tests if liblzma can decode lzip version 0 files.
+	// lzip 1.17 and older can decomperss this, but lzip 1.18
+	// and newer can no longer decode these files.
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",",78,"de69d098e860c456bf7fc2dfd1b8e03d9e94700f","6d96d4584f165b191e4d70618e18a2910c5be423",0,0,"","","","none"
"2022-12-15 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-15 16:40:32","2022-12-15 16:40:32","created",1049883908,"I suppose the simple tedious solution is to convert the ASCII characters to hex and hardcode those, but I like hardcoding the CRC better since we shouldn't ever regenerate the test file with a new checksum type. I will work on implementing that","tests/test_lzip_decoder.c",29,29,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","5b9b1104932cc045edadebeb35ffbd61d2af8895","[]","[]","tuktest_lzip_decoder","de69d098e860c456bf7fc2dfd1b8e03d9e94700f","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT (1U << 20)
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Avoiding using the ASCII string because of potential EBCDIC system
+// compatibility. The string is: ""Hello\nWorld!\n""
+static const char hello_world[] = {'H', 'e', 'l', 'l', 'o', '\n',
+			'W', 'o', 'r', 'l', 'd', '!', '\n', 0};
+// The string is ""Trailing garbage\n""
+static const char trailing_garbage[] = {'T', 'r', 'a', 'i', 'l', 'i',
+		'n', 'g', ' ', 'g', 'a', 'r', 'b', 'a', 'g', 'e', '\n', 0};
+",29,"de69d098e860c456bf7fc2dfd1b8e03d9e94700f","de69d098e860c456bf7fc2dfd1b8e03d9e94700f",0,0,"","","","none"
"2022-12-15 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-15 16:37:55","2022-12-15 16:37:55","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","5b9b1104932cc045edadebeb35ffbd61d2af8895","[]","[]","tuktest_lzip_decoder","de69d098e860c456bf7fc2dfd1b8e03d9e94700f","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-15 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-15 16:40:33","2022-12-15 16:40:32","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","5b9b1104932cc045edadebeb35ffbd61d2af8895","[]","[]","tuktest_lzip_decoder","de69d098e860c456bf7fc2dfd1b8e03d9e94700f","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-15 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-15 15:00:58","2022-12-15 15:00:59","created",1049748535,"I think there is value in showing that if we have too low memlimit, we can up it and continue decoding. This seems like a common use case that we need to assert works","tests/test_lzip_decoder.c",393,393,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT 1 << 20
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Helper function to decode a good file with no flags and plenty
+// high memlimit
+static void
+basic_lzip_decode(const char* src, const uint8_t* expected_result,
+		size_t expected_result_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_result_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_out = expected_result_size;
+
+	// Feed 1 byte at a time to the decoder to look for any bugs
+	// when switching between decoding sequences
+	lzma_ret ret = LZMA_OK;
+	while (ret == LZMA_OK) {
+		strm.avail_in = 1;
+		ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, expected_result_size);
+	assert_array_eq(output_buffer, expected_result,
+			expected_result_size);
+	lzma_end(&strm);
+}
+
+
+static void
+test_options(void)
+{
+	// Test NULL stream
+	assert_lzma_ret(lzma_lzip_decoder(NULL, MEMLIMIT, 0),
+			LZMA_PROG_ERROR);
+
+	// Test invalid flags
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, UINT32_MAX),
+			LZMA_OPTIONS_ERROR);
+	// Memlimit tests are done elsewhere
+}
+
+
+static void
+test_v0_decode(void) {
+	// This tests if liblzma can decode lzip version 0 files.
+	// lzip 1.17 and older can decomperss this, but lzip 1.18
+	// and newer can no longer decode these files.
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1);
+}
+
+
+static void
+test_v1_decode(void) {
+	// This tests decoding a basic lzip v1 file
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1);
+}
+
+
+// Helper function to decode a good file with trailing bytes after
+// the lzip stream
+static void
+trailing_helper(const char* src, const uint8_t *expected_result,
+		size_t expected_size, const uint8_t *expected_trailing,
+		size_t expected_trailing_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_in = file_size;
+	strm.avail_out = expected_size;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+	assert_uint(strm.total_in, <, file_size);
+	assert_uint_eq(strm.total_out, expected_size);
+	assert_array_eq(output_buffer, expected_result,
+			strm.total_out);
+
+	// Trailing data should be readable from strm.next_in
+	assert_uint_eq(strm.avail_in, expected_trailing_size);
+	assert_array_eq(strm.next_in, expected_trailing, strm.avail_in);
+	lzma_end(&strm);
+}
+
+
+// Helper function to decode a bad file and compare to returned error to
+// what the caller expects
+static void
+decode_expect_error(const char* src, lzma_ret expected_error)
+{
+	lzma_stream strm = LZMA_STREAM_INIT;
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	uint8_t output_buffer[DECODE_CHUNK_SIZE];
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	lzma_ret ret = LZMA_OK;
+
+	while (ret == LZMA_OK) {
+		// Discard output since we are only looking for errors
+		strm.next_out = output_buffer;
+		strm.avail_out = DECODE_CHUNK_SIZE;
+		if (strm.avail_in == 0)
+			ret = lzma_code(&strm, LZMA_FINISH);
+		else
+			ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, expected_error);
+	lzma_end(&strm);
+}
+
+
+static void
+test_v0_trailing(void) {
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	const char expected_trailing_data[] = ""Trailing garbage\n"";
+	trailing_helper(""files/good-1-v0-trailing-1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1,
+			(const uint8_t *) expected_trailing_data,
+			sizeof(expected_trailing_data) - 1);
+}
+
+
+static void
+test_v1_trailing(void) {
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	const char expected_trailing_data[] = ""Trailing garbage\n"";
+	trailing_helper(""files/good-1-v1-trailing-1.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1,
+			(const uint8_t *) expected_trailing_data,
+			sizeof(expected_trailing_data) - 1);
+
+	// The second files/good-1-v1-trailing-2.lz will have the same
+	// expected output and trailing output as
+	// files/good-1-v1-trailing-1.lz, but this tests if the prefix
+	// to the trailing data contains lzip magic bytes.
+	// When this happens, the expected behavior is to silently ignore
+	// the magic byte prefix and consume it from the input file.
+	trailing_helper(""files/good-1-v1-trailing-2.lz"",
+			(const uint8_t *) expected_result,
+			sizeof(expected_result) - 1,
+			(const uint8_t *) expected_trailing_data,
+			sizeof(expected_trailing_data) - 1);
+
+	// Expect LZMA_BUF error if a file ends with the lzip magic bytes
+	// but does not contain any data after
+	decode_expect_error(""files/bad-1-v1-trailing-magic.lz"",
+			LZMA_BUF_ERROR);
+}
+
+
+static void
+test_concatentated(void)
+{
+	// First test a file with one v0 member and one v1 member
+	// The first member should contain ""Hello\n"" and
+	// the second member should contain ""World!\n""
+	const char expected_result[] = ""Hello\nWorld!\n"";
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	size_t file_size;
+	uint8_t *v0_v1 = tuktest_file_from_srcdir(""files/good-2-v0-v1.lz"",
+		&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	uint8_t output_buffer[DECODE_CHUNK_SIZE];
+
+	strm.avail_in = file_size;
+	strm.next_in = v0_v1;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	// The second file contains one v1 member and one v2 member
+	uint8_t *v1_v0 = tuktest_file_from_srcdir(""files/good-2-v1-v0.lz"",
+		&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = v1_v0;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	// The third file contains 2 v1 members
+	uint8_t *v1_v1 = tuktest_file_from_srcdir(""files/good-2-v1-v1.lz"",
+		&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = v1_v1;
+	strm.avail_out = DECODE_CHUNK_SIZE;
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	lzma_end(&strm);
+}
+
+
+static void
+test_crc(void) {
+	// Test invalid checksum
+	lzma_stream strm = LZMA_STREAM_INIT;
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(""files/bad-1-v1-crc32.lz"",
+			&file_size);
+
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED), LZMA_OK);
+
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	uint8_t output_buffer[sizeof(expected_result) - 1];
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = sizeof(output_buffer);
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_DATA_ERROR);
+
+	// Test ignoring the checksum value - should decode successfully
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED | LZMA_IGNORE_CHECK), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = sizeof(output_buffer);
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, sizeof(expected_result) - 1);
+	assert_array_eq(output_buffer, expected_result, strm.total_out);
+
+	// Test tell check
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT,
+			LZMA_CONCATENATED | LZMA_TELL_ANY_CHECK), LZMA_OK);
+
+	strm.avail_in = file_size;
+	strm.next_in = data;
+	strm.avail_out = sizeof(output_buffer);
+	strm.next_out = output_buffer;
+
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_GET_CHECK);
+	assert_uint_eq(lzma_get_check(&strm), LZMA_CHECK_CRC32);
+	assert_lzma_ret(lzma_code(&strm, LZMA_FINISH), LZMA_DATA_ERROR);
+	lzma_end(&strm);
+}
+
+
+static void
+test_invalid_magic_bytes(void) {
+	uint8_t lzip_id_string[] = { 0x4C, 0x5A, 0x49, 0x50 };
+	lzma_stream strm = LZMA_STREAM_INIT;
+
+	for (uint32_t i = 0; i < ARRAY_SIZE(lzip_id_string); i++) {
+		// Corrupt magic bytes
+		lzip_id_string[i] ^= 1;
+		uint8_t output_buffer[DECODE_CHUNK_SIZE];
+
+		assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0),
+				LZMA_OK);
+
+		strm.next_in = lzip_id_string;
+		strm.avail_in = sizeof(lzip_id_string);
+		strm.next_out = output_buffer;
+		strm.avail_out = DECODE_CHUNK_SIZE;
+
+		assert_lzma_ret(lzma_code(&strm, LZMA_RUN),
+				LZMA_FORMAT_ERROR);
+
+		// Reset magic bytes
+		lzip_id_string[i] ^= 1;
+	}
+
+	lzma_end(&strm);
+}
+
+
+static void
+test_invalid_version(void)
+{
+	// The file contains a version number that is not 0 or 1,
+	// so it should cause an error
+	decode_expect_error(""files/unsupported-1-v234.lz"",
+			LZMA_OPTIONS_ERROR);
+}
+
+
+static void
+test_invalid_dictionary_size(void) {
+	// First file has too small dictionary size field
+	decode_expect_error(""files/bad-1-v1-dict-1.lz"", LZMA_DATA_ERROR);
+	
+	// Second file has too large dictionary size field
+	decode_expect_error(""files/bad-1-v1-dict-2.lz"", LZMA_DATA_ERROR);
+}
+
+
+static void
+test_invalid_uncomp_size(void) {
+	// Test invalid v0 lzip file uncomp size
+	decode_expect_error(""files/bad-1-v0-uncomp-size.lz"",
+			LZMA_DATA_ERROR);
+	
+	// Test invalid v1 lzip file uncomp size
+	decode_expect_error(""files/bad-1-v1-uncomp-size.lz"",
+			LZMA_DATA_ERROR);
+}
+
+
+static void
+test_invalid_member_size(void) {
+	decode_expect_error(""files/bad-1-v1-member-size.lz"",
+			LZMA_DATA_ERROR);
+}
+
+
+static void
+test_invalid_memlimit(void) {",393,"6d96d4584f165b191e4d70618e18a2910c5be423","6d96d4584f165b191e4d70618e18a2910c5be423",0,0,"","","","none"
"2022-12-15 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-15 15:03:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_lzip_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-15 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-15 15:00:59","2022-12-15 15:00:59","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-15 14:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-15 14:21:36","2022-12-15 14:21:37","created",1049699406,"I know I'm quite inconsistent with this. Thanks for pointing it out (again)","tests/test_lzip_decoder.c",25,25,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT 1 << 20
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Helper function to decode a good file with no flags and plenty
+// high memlimit
+static void
+basic_lzip_decode(const char* src, const uint8_t* expected_result,",25,"6d96d4584f165b191e4d70618e18a2910c5be423","6d96d4584f165b191e4d70618e18a2910c5be423",0,0,"","","","none"
"2022-12-15 14:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-15 14:31:33","2022-12-15 14:31:34","created",1049711423,"Its useful if we break something in the lzip decoder that causes this to fail. This will tell us the lzma_ret value, but the test_files.sh won't. Also, this checks the actual contents of the file match, but test_files.sh just check if the decoder returns success or not.","tests/test_lzip_decoder.c",78,78,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT 1 << 20
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Helper function to decode a good file with no flags and plenty
+// high memlimit
+static void
+basic_lzip_decode(const char* src, const uint8_t* expected_result,
+		size_t expected_result_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_result_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_out = expected_result_size;
+
+	// Feed 1 byte at a time to the decoder to look for any bugs
+	// when switching between decoding sequences
+	lzma_ret ret = LZMA_OK;
+	while (ret == LZMA_OK) {
+		strm.avail_in = 1;
+		ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, expected_result_size);
+	assert_array_eq(output_buffer, expected_result,
+			expected_result_size);
+	lzma_end(&strm);
+}
+
+
+static void
+test_options(void)
+{
+	// Test NULL stream
+	assert_lzma_ret(lzma_lzip_decoder(NULL, MEMLIMIT, 0),
+			LZMA_PROG_ERROR);
+
+	// Test invalid flags
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, UINT32_MAX),
+			LZMA_OPTIONS_ERROR);
+	// Memlimit tests are done elsewhere
+}
+
+
+static void
+test_v0_decode(void) {
+	// This tests if liblzma can decode lzip version 0 files.
+	// lzip 1.17 and older can decomperss this, but lzip 1.18
+	// and newer can no longer decode these files.
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",",78,"6d96d4584f165b191e4d70618e18a2910c5be423","6d96d4584f165b191e4d70618e18a2910c5be423",0,0,"","","","none"
"2022-12-15 14:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2022-12-15 14:40:57","2022-12-15 14:40:57","created",1049723392,"I made a typo anyway. It should be:
	basic_lzip_decode(""files/good-1-v0.lz"",
                        (const uint8_t *) expected_result,
			sizeof(expected_result) - 1);","tests/test_lzip_decoder.c",78,78,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,454 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       test_lzip_decoder.c
+/// \brief      Tests decoding lzip data
+//
+//  Author:     Jia Tan
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include ""tests.h""
+
+#ifdef HAVE_LZIP_DECODER
+
+// Memlimit large enough to pass all of the test files
+#define MEMLIMIT 1 << 20
+#define DECODE_CHUNK_SIZE 1024
+
+
+// Helper function to decode a good file with no flags and plenty
+// high memlimit
+static void
+basic_lzip_decode(const char* src, const uint8_t* expected_result,
+		size_t expected_result_size) {
+	size_t file_size;
+	uint8_t *data = tuktest_file_from_srcdir(src, &file_size);
+
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, 0), LZMA_OK);
+
+	uint8_t *output_buffer = tuktest_malloc(expected_result_size);
+
+	strm.next_in = data;
+	strm.next_out = output_buffer;
+	strm.avail_out = expected_result_size;
+
+	// Feed 1 byte at a time to the decoder to look for any bugs
+	// when switching between decoding sequences
+	lzma_ret ret = LZMA_OK;
+	while (ret == LZMA_OK) {
+		strm.avail_in = 1;
+		ret = lzma_code(&strm, LZMA_RUN);
+	}
+
+	assert_lzma_ret(ret, LZMA_STREAM_END);
+
+	assert_uint_eq(strm.total_in, file_size);
+	assert_uint_eq(strm.total_out, expected_result_size);
+	assert_array_eq(output_buffer, expected_result,
+			expected_result_size);
+	lzma_end(&strm);
+}
+
+
+static void
+test_options(void)
+{
+	// Test NULL stream
+	assert_lzma_ret(lzma_lzip_decoder(NULL, MEMLIMIT, 0),
+			LZMA_PROG_ERROR);
+
+	// Test invalid flags
+	lzma_stream strm = LZMA_STREAM_INIT;
+	assert_lzma_ret(lzma_lzip_decoder(&strm, MEMLIMIT, UINT32_MAX),
+			LZMA_OPTIONS_ERROR);
+	// Memlimit tests are done elsewhere
+}
+
+
+static void
+test_v0_decode(void) {
+	// This tests if liblzma can decode lzip version 0 files.
+	// lzip 1.17 and older can decomperss this, but lzip 1.18
+	// and newer can no longer decode these files.
+	const char expected_result[] = ""Hello\nWorld!\n"";
+	basic_lzip_decode(""files/good-1-v1.lz"",",78,"6d96d4584f165b191e4d70618e18a2910c5be423","6d96d4584f165b191e4d70618e18a2910c5be423",0,0,"","","","none"
"2022-12-15 14:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-15 14:21:37","2022-12-15 14:21:37","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-15 14:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-15 14:31:34","2022-12-15 14:31:34","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-15 14:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2022-12-15 14:40:57","2022-12-15 14:40:57","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): Test for recently added feature


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
This PR does not alter behavior

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
N/A

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",1,"Tests: Adds lzip decoder tests","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3f2ef947ff54eeeee8ea8c78cd61d2e14a2540c8","[]","[]","tuktest_lzip_decoder","6d96d4584f165b191e4d70618e18a2910c5be423","master","b69da6d4bb6bb11fc0cf066920791990d2b22a06",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2022-12-14 17:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-14 17:01:13","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_lzip_decoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-14 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-14 12:08:18","1970-01-01 00:00:00","none",0,"","",0,0,"v5.0","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-14 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-14 12:08:49","1970-01-01 00:00:00","none",0,"","",0,0,"v5.2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-13 20:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-13 20:18:03","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4.0","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-13 20:00:00","CreateEvent","JiaT75","tukaani-project/xz","2022-12-13 20:18:03","1970-01-01 00:00:00","none",0,"","",0,0,"v5.2.10","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-13 20:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-13 20:15:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2022-12-13 20:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2022-12-13 20:25:03","1970-01-01 00:00:00","published",0,"5.2.10 (2022-12-13)

    * xz: Don't modify argv[] when parsing the --memlimit* and
      --block-list command line options. This fixes confusing
      arguments in process listing (like ""ps auxf"").

    * GNU/Linux only: Use __has_attribute(__symver__) to detect if
      that attribute is supported. This fixes build on Mandriva where
      Clang is patched to define __GNUC__ to 11 by default (instead
      of 4 as used by Clang upstream).","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.2.10","5.2.10 Stable","none"
"2022-12-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2022-12-13 12:43:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2022-12-12 16:00:00","PushEvent","JiaT75","tukaani-project/.github","2022-12-12 16:04:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-12 16:00:00","PushEvent","JiaT75","tukaani-project/.github","2022-12-12 16:02:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-12 14:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-12-12 14:34:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-09 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-12-09 13:38:30","2022-12-09 13:38:30","closed",0,"","",0,0,"","none","JiaT75",61,"xz option parsing modified argv[]","['5.4.0 Optional']","closed",0,"","[]",0,"OWNER","2022-12-09 13:38:30","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-09 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-12-09 13:29:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-12-05 16:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-12-05 16:10:57","2022-12-05 16:10:56","closed",0,"It is used internally by LZMA2 and also lzma_alone_decoder().","",0,0,"","none","JiaT75",7,"Raw LZMA1 encoding and decoding without end-of-stream / end-of-payload marker should be exposed in the public API","['5.4.0 Optional']","closed",0,"","[]",1,"OWNER","2022-12-05 16:10:56","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-02 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-12-02 13:19:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,15,"","","","none"
"2022-12-01 17:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-12-01 17:14:58","2022-12-01 17:14:57","closed",0,"If an application or library uses liblzma and wishes the user to specify compression settings, it's currently too complicated to support any advanced settings like adding x86 BCJ filter. Currently such applications support just a preset level (integer 0-9). liblzma should have a string-to-filter-chain function. Then, for example, libarchive/bsdtar could let user specify a liblzma-specific string of compression options and pass that to liblzma as is.

The syntax to specify filter chains on the xz command line is likely a bit confusing. Using the above liblzma function in xz with  a new option would make the filter-chain specifications consistent between applications.","",0,0,"","none","JiaT75",6,"Create a string-to-filter-chain function to simplify filter options in liblzma","[]","closed",0,"","[]",1,"OWNER","2022-12-01 17:14:57","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-12-01 17:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-12-01 17:14:12","2022-12-01 17:14:12","closed",0,"","",0,0,"","none","JiaT75",42,"LZMA_SYNC_FLUSH support in block encoder","['5.4.0 Optional']","closed",0,"","[]",0,"OWNER","2022-12-01 17:14:12","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-30 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-30 13:00:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2022-11-28 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-28 14:47:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",29,29,"","","","none"
"2022-11-22 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-22 16:37:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-22 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-22 15:26:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-22 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-22 15:32:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-21 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 16:26:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-21 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 16:48:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-21 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 16:17:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-21 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 16:12:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-21 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 16:53:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-21 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 15:55:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-21 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-21 15:50:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-19 15:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 15:25:38","1970-01-01 00:00:00","none",0,"","",0,0,"ci_scripts","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-19 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 15:12:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-19 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 15:07:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-19 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 15:03:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-19 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 15:01:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-11-19 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 15:00:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2022-11-19 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 14:59:38","1970-01-01 00:00:00","none",0,"","",0,0,"ci_scripts","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-19 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-19 14:17:53","2022-11-19 14:17:53","opened",0,"","",0,0,"","none","JiaT75",60,"CMake cannot disable threads, encoders, decoders, etc like autotools can","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-16 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-16 12:07:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-11-15 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-15 15:36:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",21,21,"","","","none"
"2022-11-15 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-15 12:04:47","2022-11-15 12:04:47","closed",0,"A patch for this has been submitted. Just need to review and make any necessary changes","",0,0,"","none","JiaT75",41,"Faster CRC64 implementation","['5.4.0']","closed",0,"","[]",0,"OWNER","2022-11-15 12:04:47","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-11 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-11 14:52:37","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_lzip_decoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-11 14:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-11 14:29:50","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_skip_scripts","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-11 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-11 14:37:59","2022-11-11 14:37:59","closed",0,"A patch was submitted for adding .lz decoder support to xz. This needs to be reviewed and fixed before it can be merged.","",0,0,"","none","JiaT75",36,".lz decoder support","['5.4.0']","closed",0,"","[]",0,"OWNER","2022-11-11 14:37:59","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-11 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-11 14:13:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2022-11-10 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-10 14:22:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",29,29,"","","","none"
"2022-11-08 16:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-08 16:06:02","1970-01-01 00:00:00","none",0,"","",0,0,"crc_fast_slight_speedup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-08 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-08 12:49:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_index","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",36,2,"","","","none"
"2022-11-05 11:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-05 11:37:01","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_skip_bcj","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-05 11:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-05 11:36:51","1970-01-01 00:00:00","none",0,"","",0,0,"lzip_v3","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-04 15:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-04 15:32:42","1970-01-01 00:00:00","none",0,"","",0,0,"lzip_v3","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-11-02 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-11-02 14:18:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2022-10-28 17:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-28 17:21:15","1970-01-01 00:00:00","none",0,"","",0,0,"crc64_speedup","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-28 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-28 12:10:06","1970-01-01 00:00:00","none",0,"","",0,0,"lzip_decoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-28 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-28 12:20:39","2022-10-28 12:20:38","closed",0,"The error message and behavior is inconsistent when an input file has an unsupported check and the --ignore-check option is not used. 
The error message ""Unsupported type of integrity check; not verifying file integrity"" implies the file will be decompressed, but currently it is not. Either the error message needs to be changed or the file needs to be decompressed, but still return an error code.","",0,0,"","none","JiaT75",59,"XZ not decompressing when check type is unsupported","['bug','5.4.0']","closed",0,"","[]",0,"OWNER","2022-10-28 12:20:38","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-28 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-28 12:10:26","2022-10-28 12:10:25","closed",0,"Need to make sure it does not conflict with other OSes","",0,0,"","none","JiaT75",58,"Support pledge sandbox on OpenBSD","['5.4.0']","closed",0,"","[]",0,"OWNER","2022-10-28 12:10:25","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-27 15:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-27 15:55:06","1970-01-01 00:00:00","none",0,"","",0,0,"lzip_decoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-27 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-27 15:46:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,16,"","","","none"
"2022-10-25 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-25 12:35:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-10-24 16:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-24 16:21:00","2022-10-24 16:21:00","opened",0,"The error message and behavior is inconsistent when an input file has an unsupported check and the --ignore-check option is not used. 
The error message ""Unsupported type of integrity check; not verifying file integrity"" implies the file will be decompressed, but currently it is not. Either the error message needs to be changed or the file needs to be decompressed, but still return an error code.","",0,0,"","none","JiaT75",59,"XZ not decompressing when check type is unsupported","['bug','5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-21 16:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-21 16:10:46","2022-10-21 16:10:46","opened",0,"It would be nice to query xz to see what filters, encoder, decoder, multihreading, and check types it supports, etc.
This would help with testing and for users who are linking against a liblzma that might now have been built with full support for everything.","",0,0,"","none","JiaT75",57,"Create an xz option to list supported features from liblzma","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-20 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-20 14:13:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:22:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:25:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:27:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:43:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:44:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:47:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-19 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-19 13:59:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-18 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-18 13:09:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-18 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-18 13:24:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-18 13:00:00","PushEvent","JiaT75","Tukaani-Project/.github","2022-10-18 13:28:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-10-18 12:00:00","CreateEvent","JiaT75","Tukaani-Project/.github","2022-10-18 12:20:43","1970-01-01 00:00:00","none",0,"","",0,0,"","repository","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-18 12:00:00","CreateEvent","JiaT75","Tukaani-Project/.github","2022-10-18 12:20:43","1970-01-01 00:00:00","none",0,"","",0,0,"main","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-12 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-12 12:09:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2022-10-11 12:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-11 12:52:09","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_skip_scripts","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-11 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-11 12:13:08","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_encoder_disable","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-11 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-11 12:55:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_test_filter_flags","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",92,0,"","","","none"
"2022-10-07 13:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-07 13:24:28","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_blockheader_tests","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-07 13:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-07 13:24:18","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_convert_stream_flags","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-07 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-07 13:22:48","2022-10-07 13:22:48","closed",0,"","",0,0,"","none","JiaT75",23,"Create tests for all API functions in src/liblzma/api/lzma/stream_flags.h","['tests','5.4.0']","closed",0,"","[]",1,"OWNER","2022-10-07 13:22:48","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-06 13:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-06 13:45:30","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_disable_fixes","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-06 12:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-06 12:50:14","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_encoder_disable","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-10-05 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-05 14:46:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,5,"","","","none"
"2022-10-05 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-10-05 13:06:06","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_disable_fixes","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-30 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-30 12:38:10","2022-09-30 12:38:10","closed",0,"","",0,0,"","none","JiaT75",54,"Turkish translations for XZ 5.2.7","[]","closed",0,"","[]",0,"OWNER","2022-09-30 12:38:10","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-29 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-29 12:30:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,1,"","","","none"
"2022-09-28 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-28 14:19:50","2022-09-28 14:19:49","created",1260987843,"Branch ready in [tuktest_index](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuktest_index)","",0,0,"","none","JiaT75",21,"Create tests for all API functions in src/liblzma/api/lzma/index.h","['tests','5.4.0']","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-23 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-23 15:08:36","2022-09-23 15:08:35","opened",0,"This could be useful for the string to filter chain functionality and mostly for multi threaded encoder to catch filter chain issues in the init function.

Right now, filter chain issues will be caught by lzma_raw_encoder_memusage (in the init function) or by filter inits in the worker threads.

Filter chain validation should probably be added to lzma_filter_encoder and lzma_filter_decoder and will likely be reused by memusage functions. The logic for lzma1/2 and delta filters will most likely just be simply moved into this new validation function.","",0,0,"","none","JiaT75",56,"Create API function to validate filter chains","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-22 13:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-22 13:32:10","1970-01-01 00:00:00","none",0,"","",0,0,"code_coverage","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-22 13:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-22 13:31:56","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_filter","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-21 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-21 12:05:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2022-09-13 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-13 12:39:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_xz_scripts","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,1,"","","","none"
"2022-09-12 15:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-12 15:10:18","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_xz_scripts","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-12 15:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-12 15:11:25","2022-09-12 15:11:24","created",1243887612,"Branch staged in [cmake_xz_scripts](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/cmake_xz_scripts), but still needs to merge and refactor other CMake changes before it is fully ready.","",0,0,"","none","JiaT75",48,"CMake support for xz scripts and their symlinks","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-12 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-12 12:14:44","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_tuktest_support","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-12 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-12 12:14:39","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_unused_function_warning","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-12 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-12 12:14:47","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_support_symlinks","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-12 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-12 12:07:37","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_in_progress","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-09 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-09 15:00:24","2022-09-09 15:00:23","opened",0,"lzma_stream_encoder_mt() should not allow LZMA1 as a filter because the xz spec and the single threaded version does not allow this. The multithreaded encoder uses  lzma_raw_encoder_memusage() to validate the filters, but this allows for LZMA1. Single-threaded uses lzma_block_encoder_init() which disallows LZMA1 because it calls lzma_filter_flags_encode() which is where the problem is caught.","",0,0,"","none","JiaT75",55,"lzma_stream_encoder_mt allows LZMA1 as a filter","['5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-09 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-09 12:14:48","2022-09-09 12:14:48","closed",0,"Since tuktest is a header file only test framework, many test programs end up with unused function warnings for functions that are not needed in that specific test. Tuktest needs a simple way to suppress these warnings because test programs should not be expected to use all functions from tuktest.","",0,0,"","none","JiaT75",44,"Suppress unused function warning in tuktest","['5.4.0']","closed",0,"","[]",1,"OWNER","2022-09-09 12:14:48","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-09 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-09 12:14:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-09-08 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-08 13:28:09","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_in_progress","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-08 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-08 13:51:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_in_progress","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-09-02 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-02 13:43:21","2022-09-02 13:43:20","created",1235523023,"Branch ready in [tuktest_index_hash](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuktest_index_hash)","",0,0,"","none","JiaT75",20,"Create tests for all API functions in src/liblzma/api/lzma/index_hash.h","['tests','5.4.0']","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-09-02 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-09-02 12:44:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-08-31 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-31 13:46:29","2022-08-31 13:46:29","closed",0,"CMake should install the symlinks for:

- unxz
- xzcat
- lzma
- unlzma
- lzcat","",0,0,"","none","JiaT75",47,"CMake support for xz symlinks","['5.4.0 Optional']","closed",0,"","[]",0,"OWNER","2022-08-31 13:46:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-30 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-30 13:03:49","2022-08-30 13:03:48","opened",0,"","",0,0,"","none","JiaT75",54,"Turkish translations for XZ 5.2.7","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-26 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-26 12:15:43","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_in_progress","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-25 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-25 14:24:12","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_in_progress","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 15:02:56","2022-08-24 15:02:56","opened",0,"CMake should create:

- xzdiff
- xzcmp (symlink to xzdiff)
- lzdiff (symlink to xzdiff)
- xzgrep
- xzegrep (symlink to xzgrep)
- xzfgrep (symlink to xzgrep)
- xzmore
- lzmore (symlink to xzmore)
- xzless
- lzless (symlink to xzless)","",0,0,"","none","JiaT75",48,"CMake support for xz scripts and their symlinks","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 15:17:42","2022-08-24 15:17:42","opened",0,"","",0,0,"","none","JiaT75",49,"CMake support for lzmainfo","['5.4.0 Optional']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 15:19:53","2022-08-24 15:19:52","opened",0,"","",0,0,"","none","JiaT75",50,"CMake support for lzmadec","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 15:20:26","2022-08-24 15:20:25","opened",0,"","",0,0,"","none","JiaT75",51,"CMake support for xz translations","['5.4.0 Optional']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 15:24:45","2022-08-24 15:24:45","opened",0,"Should only execute when xz is built and systems that can execute bash scripts","",0,0,"","none","JiaT75",52,"CMake support for xz tuktests","['5.4.0 Optional']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 15:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 15:33:39","2022-08-24 15:33:39","opened",0,"","",0,0,"","none","JiaT75",53,"CMake support for getopt_long","['5.4.0 Optional']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 12:06:59","2022-08-24 12:06:59","closed",0,"Using CMake, ""make test"" command should run at least the liblzma tests. Support for the scripts can be conditional on having the right shell","",0,0,"","none","JiaT75",46,"CMake support for tuktest","['5.4.0']","closed",0,"","[]",0,"OWNER","2022-08-24 12:06:59","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 12:08:18","2022-08-24 12:08:17","opened",0,"CMake should install the symlinks for:

- unxz
- xzcat
- lzma
- unlzma
- lzcat","",0,0,"","none","JiaT75",47,"CMake support for xz symlinks","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-24 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-24 12:06:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",26,23,"","","","none"
"2022-08-19 15:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-19 15:10:55","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_tuktest_support","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-19 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-19 12:19:24","2022-08-19 12:19:24","opened",0,"Using CMake, ""make test"" command should run at least the liblzma tests. Support for the scripts can be conditional on having the right shell","",0,0,"","none","JiaT75",46,"CMake support for tuktest","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-18 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-18 14:14:49","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_index_hash","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-17 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-17 12:30:57","2022-08-17 12:30:57","opened",0,"The fail fast mode for multi-threaded decoding needs testing and cleaning up before the 5.40 release. The fail fast mode is for when errors should be reported as soon as possible instead of matching the single threaded decoder behavior. This will cause the multi-threaded decoder to possibly produce different output when errors are detected as compared to single threaded mode.","",0,0,"","none","JiaT75",45,"Fail fast multithreaded decoder behavior needs finishing","['5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 13:01:54","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_unused_function_warning","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 13:19:52","2022-08-16 13:19:52","created",1216629199,"Branch ready in [tuktest_unused_function_warning](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuktest_unused_function_warning)","",0,0,"","none","JiaT75",44,"Suppress unused function warning in tuktest","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 13:19:34","2022-08-16 13:19:26","opened",0,"Since tuktest is a header file only test framework, many test programs end up with unused function warnings for functions that are not needed in that specific test. Tuktest needs a simple way to suppress these warnings because test programs should not be expected to use all functions from tuktest.","",0,0,"","none","JiaT75",44,"Suppress unused function warning in tuktest","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 12:58:30","1970-01-01 00:00:00","none",0,"","",0,0,"match_finder_small_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 12:41:35","2022-08-16 12:41:34","closed",0,"For more information about editorconfig and which text editors support it, you can visit https://editorconfig.org","",0,0,"","none","JiaT75",3,"Create .editorconfig file to help standardize code style","[]","closed",0,"","[]",1,"OWNER","2022-08-16 12:41:34","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 12:40:54","2022-08-16 12:40:54","closed",0,"Multithreaded mode sets the compressed and uncompressed values in the block headers, but single threaded mode does not. Because of this, the same file will compress to two different outputs depending on if single or multithreaded mode is used. The user needs a way to specify to always use multithreaded mode in order to prevent the memory limiting from forcing single threaded mode and changing the output","",0,0,"","none","JiaT75",10,"Addressing errors in reproducible builds in XZ","[]","closed",0,"","[]",1,"OWNER","2022-08-16 12:40:54","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-16 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-16 12:13:26","2022-08-16 12:13:26","closed",0,"","",0,0,"","none","JiaT75",43,"LZMA_FINISH should trigger LZMA_BUF_ERROR right away on truncated  xz files","['5.4.0 Optional']","closed",0,"","[]",0,"OWNER","2022-08-16 12:13:26","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-15 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-15 12:07:23","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_finish_buf_error_truncated","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-15 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-15 12:06:34","2022-08-15 12:06:34","closed",0,"Right now, lzma_code needs to be called multiple times before LZMA_BUF_ERROR is returned, even if LZMA_FINISH is specified.","",0,0,"","none","JiaT75",33,"LZMA_FINISH action in the lzma stream decoders should cause BUF_ERROR right away on truncated xz files","['5.4.0 Optional']","closed",0,"","[]",1,"OWNER","2022-08-15 12:06:34","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-15 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-15 12:08:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2022-08-08 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-08 14:16:31","2022-08-08 14:16:31","closed",0,"A few bugs have been fixed and improvements made. This will require changing the license from GPLv2 to GPLv3.","",0,0,"","none","JiaT75",39,"Import recent changes from zgrep to xzgrep","['5.2.6']","closed",0,"","[]",0,"OWNER","2022-08-08 14:16:31","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-08-08 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-08-08 14:00:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,6,"","","","none"
"2022-07-22 12:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-22 12:40:04","1970-01-01 00:00:00","none",0,"","",0,0,"match_finder_small_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-18 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-18 14:44:47","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_test_filter_flags","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-18 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-18 14:49:11","2022-07-18 14:49:11","created",1187595919,"Branch ready in [tuktest_convert_stream_flags](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuktest_convert_stream_flags)","",0,0,"","none","JiaT75",23,"Create tests for all API functions in src/liblzma/api/lzma/stream_flags.h","['tests','5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-18 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-18 14:49:58","2022-07-18 14:49:58","created",1187596828,"Branch ready in [tuktest_test_filter_flags](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuktest_test_filter_flags)","",0,0,"","none","JiaT75",38,"Convert test_filter_flags.c to tuktest","['5.4.0']","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-15 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-15 13:00:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:59:03","2022-07-13 14:59:03","opened",0,"","",0,0,"","none","JiaT75",43,"LZMA_FINISH should trigger LZMA_BUF_ERROR right away on truncated  xz files","['5.4.0 Optional']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:57:35","2022-07-13 14:57:34","opened",0,"A patch for this has been submitted. Just need to review and make any necessary changes","",0,0,"","none","JiaT75",41,"Faster CRC64 implementation","['5.4.0 Optional']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:56:45","2022-07-13 14:56:45","opened",0,"Will likely require documentation changes too.","",0,0,"","none","JiaT75",40,"Allow .lzma files with the uncompressed size specified in the header to have an end of stream marker","['5.2.6']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:55:59","2022-07-13 14:55:59","opened",0,"A few bugs have been fixed and improvements made. This will require changing the license from GPLv2 to GPLv3.","",0,0,"","none","JiaT75",39,"Import recent changes from zgrep to xzgrep","['5.2.6']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:54:52","2022-07-13 14:54:52","opened",0,"","",0,0,"","none","JiaT75",38,"Convert test_filter_flags.c to tuktest","['5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:52:25","2022-07-13 14:52:24","opened",0,"","",0,0,"","none","JiaT75",37,"NULL check needed in block_header_decode","['5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 14:47:11","2022-07-13 14:47:11","opened",0,"A patch was submitted for adding .lz decoder support to xz. This needs to be reviewed and fixed before it can be merged.","",0,0,"","none","JiaT75",36,".lz decoder support","['5.4.0']","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-13 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-13 13:31:57","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_convert_stream_flags","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-07-11 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-07-11 12:23:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2022-06-17 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:53","1970-01-01 00:00:00","none",0,"","",0,0,"memory_usage_threads_0","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:52","1970-01-01 00:00:00","none",0,"","",0,0,"addressing_reproducible_builds","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:40","1970-01-01 00:00:00","none",0,"","",0,0,"test_lzma_api_check_functions","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:36","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_hardware","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:21","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_check","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:18","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_vli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:17:04","2022-06-17 12:17:03","closed",0,"XZ will run out of memory if there are too many possible threads and not enough memory to support them. When the user specifies threads=0, XZ should decide the optimal amount of threads. Right now, this does not function correctly since using the optimal amount of threads should not cause memory issues.","",0,0,"","none","JiaT75",4,"Automatic memory usage limiting for ""xz --threads=0""","[]","closed",0,"","[]",1,"OWNER","2022-06-17 12:17:03","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:16:14","2022-06-17 12:16:14","closed",0,"","",0,0,"","none","JiaT75",31,"Block signals in tuklib_exit","[]","closed",0,"","[]",1,"OWNER","2022-06-17 12:16:14","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:15:41","2022-06-17 12:15:41","closed",0,"The goal is to use a standardized test framework to ease writing of tests in XZ. Much of the functionality remains untested, so it will be helpful for long term project stability to have more tests","",0,0,"","none","JiaT75",1,"Update testing framework to use STest","[]","closed",0,"","[]",1,"OWNER","2022-06-17 12:15:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:15:20","2022-06-17 12:15:19","closed",0,"","",0,0,"","none","JiaT75",24,"Create tests for all API functions in src/liblzma/api/lzma/vli.h","['tests']","closed",0,"","[]",1,"OWNER","2022-06-17 12:15:19","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:14:18","2022-06-17 12:14:18","closed",0,"These tests may be trivial since values depend on the architecture where the tests are running ","",0,0,"","none","JiaT75",19,"Create tests for all API functions in src/liblzma/api/lzma/hardware.h","['tests']","closed",0,"","[]",1,"OWNER","2022-06-17 12:14:18","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-17 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-17 12:11:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,2,"","","","none"
"2022-06-16 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-16 14:16:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_check","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2022-06-16 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-16 12:06:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",11,1,"","","","none"
"2022-06-15 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-15 14:29:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_check","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2022-06-14 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-14 12:45:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_string","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,1,"","","","none"
"2022-06-10 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-10 13:56:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-06-10 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-10 12:43:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/no_end_marker_API_export","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-06-10 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-10 12:35:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/no_end_marker_API_export","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",39,1,"","","","none"
"2022-06-07 12:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-07 12:33:41","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_vli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-07 12:00:00","DeleteEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-07 12:44:59","1970-01-01 00:00:00","none",0,"","",0,0,"test_lzma_vli_functions","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-07 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-07 12:26:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/code_coverage","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-06-06 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-06 12:56:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuktest_hardware","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-06-03 15:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-03 15:00:09","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_hardware","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-03 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-03 13:48:38","1970-01-01 00:00:00","none",0,"","",0,0,"tuktest_check","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-06-03 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-06-03 13:49:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,1,"","","","none"
"2022-05-26 16:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-26 16:22:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/code_coverage","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-05-26 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-26 15:47:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/code_coverage","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-05-26 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-26 13:46:22","1970-01-01 00:00:00","none",0,"","",0,0,"code_coverage","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-05-26 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-26 13:47:13","2022-05-26 13:47:13","created",1138598060,"First iteration branch ready in [code_coverage](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/code_coverage)","",0,0,"","none","JiaT75",34,"Add code coverage statistics to test framework","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-05-25 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-25 12:25:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_lzma_api_check_functions","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-05-24 12:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-24 12:39:49","1970-01-01 00:00:00","none",0,"","",0,0,"check","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-05-18 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-18 13:01:49","2022-05-18 13:01:49","created",1129989018,"Branch ready in [support_LZMA_SYNC_FLUSH_mt_encoder](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/support_LZMA_SYNC_FLUSH_mt_encoder)","",0,0,"","none","JiaT75",26,"Support LZMA_SYNC_FLUSH in stream_encoder_mt","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-05-17 12:00:00","PushEvent","JiaT75","JiaT75/STest","2022-05-17 12:45:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2022-05-16 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-16 13:13:03","1970-01-01 00:00:00","none",0,"","",0,0,"support_LZMA_SYNC_FLUSH_mt_encoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-05-05 12:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-05 12:57:37","1970-01-01 00:00:00","none",0,"","",0,0,"test_block_api","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-05-05 12:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-05-05 12:58:26","2022-05-05 12:58:26","created",1118516803,"Branch ready in [test_block_api](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/test_block_api)","",0,0,"","none","JiaT75",17,"Create tests for all API functions in src/liblzma/api/lzma/block.h","['tests']","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-04-21 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-21 13:42:18","2022-04-21 13:42:18","created",1105224938,"Branch ready in [lzma_finish_buf_error_truncated](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/lzma_finish_buf_error_truncated)","",0,0,"","none","JiaT75",33,"LZMA_FINISH action in the lzma stream decoders should cause BUF_ERROR right away on truncated xz files","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-04-21 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-21 13:41:19","2022-04-21 13:41:19","opened",0,"","",0,0,"","none","JiaT75",33,"LZMA_FINISH action in the lzma stream decoders should cause BUF_ERROR right away on truncated xz files","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-04-19 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-19 14:46:26","2022-04-19 14:46:26","created",1102745856,"Branch ready in [filter_to_string](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/filter_to_string)","",0,0,"","none","JiaT75",6,"Create a string-to-filter-chain function to simplify filter options in liblzma","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-04-19 14:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-19 14:06:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_string","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-04-19 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-19 12:19:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",17,7,"","","","none"
"2022-04-08 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-08 12:21:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-04-08 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-08 12:17:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2022-04-01 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-04-01 13:17:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-28 12:00:00","IssueCommentEvent","JiaT75","libarchive/libarchive","2022-03-28 12:23:57","2022-03-28 12:23:57","created",1080585186,"Looks like this was solved better in https://github.com/libarchive/libarchive/commit/cfaa28168a07ea4a53276b63068f94fce37d6aff","",0,0,"","none","JiaT75",1682,"Moved negative check for input byte count to after min calculation","[]","closed",0,"","[]",2,"CONTRIBUTOR","2022-03-28 12:23:57","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-28 12:00:00","PullRequestEvent","JiaT75","libarchive/libarchive","2022-03-28 12:23:58","2022-03-28 12:23:57","closed",0,"Based on the investigation done by Lasse Collin, the bug in #1672 is caused by the in_bytes variable being set to a negative number because zip->entry_bytes_remaining was negative. The LZMA avail_in value is unsigned, so it was treating the available in as a large positive number and trying to continue reading input. This resulted in the invalid read segmentation fault.  

This is a quick fix to the issue. I tested it on the file provided by [icycityone](https://github.com/icycityone) and it no longer segmentation faults. I am not sure if a deeper fix is needed to prevent zip->entry_bytes_remaining from being negative, but this will at least solve the problem in the short term. 

Thank you to [icycityone](https://github.com/icycityone) for discovering and reporting this bug and thank you to Lasse Collin for discovering the source of the problem. 

fixes #1672 ","",0,0,"","none","JiaT75",1682,"Moved negative check for input byte count to after min calculation","[]","closed",0,"","[]",3,"CONTRIBUTOR","2022-03-28 12:23:57","1970-01-01 00:00:00","b5191dcebb2cff85c3cbdb1b1f102440806d39fc","[]","[]","fix_reported_lzma_bug","1c5fb69969743220dc6baac841ae1b882e581428","master","6d56dfd6ef13625561da83c605d2a12cb146088c",0,1,0,"clean","",0,0,1,8,5,1,"",0,"","",0,0,"","","","none"
"2022-03-22 14:00:00","CreateEvent","JiaT75","JiaT75/libarchive","2022-03-22 14:36:28","1970-01-01 00:00:00","none",0,"","",0,0,"fix_reported_lzma_bug","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-22 14:00:00","PushEvent","JiaT75","JiaT75/libarchive","2022-03-22 14:56:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/fix_reported_lzma_bug","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-18 12:00:00","IssueCommentEvent","JiaT75","libarchive/libarchive","2022-03-18 12:28:03","2022-03-18 12:28:03","created",1072364013,"@mmatuska  @icycityone can either of you provide the crashfile in this thread or to my email jiat0218@gmail.com? I have been working with liblzma quite a bit recently and I can help determine if this is a libarchive or liblzma problem","",0,0,"","none","JiaT75",1672,"The libarchive lib exist a READ memory access Vulnerability","[]","open",0,"","[]",24,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-15 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-15 12:28:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-14 12:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-14 12:37:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-11 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-11 13:16:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-10 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-10 13:29:21","1970-01-01 00:00:00","none",0,"","",0,0,"test_multithreaded_decoder","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-10 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-10 13:08:31","2022-03-10 13:08:30","opened",0,"","",0,0,"","none","JiaT75",32,"Create tests for multithreaded decoder","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-10 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-10 13:46:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_multithreaded_decoder","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-09 15:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-09 15:24:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/test_filter_api_functions","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-03-07 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-07 13:21:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2022-03-02 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-02 14:35:45","2022-03-02 14:35:45","created",1056999406,"Branch ready in [tuklib_exit_block_signals](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuklib_exit_block_signals)","",0,0,"","none","JiaT75",31,"Block signals in tuklib_exit","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-02 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-02 14:23:22","1970-01-01 00:00:00","none",0,"","",0,0,"tuklib_exit_block_signals","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-03-02 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-03-02 14:23:55","2022-03-02 14:23:54","opened",0,"Branch ready in [tuklib_exit_block_signals](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/tuklib_exit_block_signals)","",0,0,"","none","JiaT75",31,"Block signals in tuklib_exit","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-28 15:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-28 15:15:35","2022-02-28 15:15:35","created",1054358792,"Branch ready in [error_to_string_API_func](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/error_to_string_API_func)","",0,0,"","none","JiaT75",30,"Create an error to string function for liblzma","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-28 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-28 14:50:16","1970-01-01 00:00:00","none",0,"","",0,0,"error_to_string_API_func","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-25 14:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-25 14:25:33","2022-02-25 14:25:33","opened",0,"This is tricky, because the same error codes are used with slightly different meanings, and this cannot be fixed anymore.","",0,0,"","none","JiaT75",30,"Create an error to string function for liblzma","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-24 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-24 14:13:42","2022-02-24 14:13:42","created",1049901200,"Branch ready in [test_lzma_hardware_functions](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/test_lzma_hardware_functions)","",0,0,"","none","JiaT75",19,"Create tests for all API functions in src/liblzma/api/lzma/hardware.h","['tests']","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-24 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-24 14:13:17","1970-01-01 00:00:00","none",0,"","",0,0,"test_lzma_hardware_functions","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-24 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-24 13:52:06","2022-02-24 13:52:06","opened",0,"","",0,0,"","none","JiaT75",28,"Create CI pipeline for Windows","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-24 13:00:00","IssuesEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-24 13:52:21","2022-02-24 13:52:20","opened",0,"","",0,0,"","none","JiaT75",29,"Create CI pipeline for MacOS","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-24 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-24 13:44:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-02-24 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-24 13:47:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2022-02-23 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-23 13:40:40","2022-02-23 13:40:39","created",1048793345,"Branch ready [allow_update_to_change_mode_lzma](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/allow_update_to_change_mode_lzma)","",0,0,"","none","JiaT75",27,"Support changing lzma_options_lzma.mode with lzma_filters_update()","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-23 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-23 13:39:39","1970-01-01 00:00:00","none",0,"","",0,0,"allow_update_to_change_mode_lzma","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-22 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-22 14:49:50","2022-02-22 14:49:50","created",1047873898,"Branch ready at [arm64_filter](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/arm64_filter)","",0,0,"","none","JiaT75",8,"ARM64 BCJ filter","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-22 13:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-22 13:45:02","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_filter","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-22 13:00:00","PushEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-22 13:22:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/main","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2022-02-16 14:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-16 14:53:49","2022-02-16 14:53:49","created",1041575101,"Branch ready [memory_usage_threads_0](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/memory_usage_threads_0)","",0,0,"","none","JiaT75",4,"Automatic memory usage limiting for ""xz --threads=0""","[]","open",0,"","[]",1,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-16 14:00:00","CreateEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-16 14:53:18","1970-01-01 00:00:00","none",0,"","",0,0,"memory_usage_threads_0","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2022-02-16 13:00:00","IssueCommentEvent","JiaT75","JiaT75/XZ_Utils_Unofficial","2022-02-16 13:11:33","2022-02-16 13:11:33","created",1041477084,"Branch ready in [add_editorconfig_file](https://github.com/JiaT75/XZ_Utils_Unofficial/tree/add_editorconfig_file)","",0,0,"","none","JiaT75",3,"Create .editorconfig file to help standardize code style","[]","open",0,"","[]",0,"OWNER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"

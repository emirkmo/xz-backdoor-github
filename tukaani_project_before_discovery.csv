"file_time","event_type","actor_login","repo_name","created_at","updated_at","action","comment_id","body","path","position","line","ref","ref_type","creator_user_login","number","title","labels","state","locked","assignee","assignees","comments","author_association","closed_at","merged_at","merge_commit_sha","requested_reviewers","requested_teams","head_ref","head_sha","base_ref","base_sha","merged","mergeable","rebaseable","mergeable_state","merged_by","review_comments","maintainer_can_modify","commits","additions","deletions","changed_files","diff_hunk","original_position","commit_id","original_commit_id","push_size","push_distinct_size","member_login","release_tag_name","release_name","review_state"
"DateTime","Enum8('CommitCommentEvent' = 1, 'CreateEvent' = 2, 'DeleteEvent' = 3, 'ForkEvent' = 4, 'GollumEvent' = 5, 'IssueCommentEvent' = 6, 'IssuesEvent' = 7, 'MemberEvent' = 8, 'PublicEvent' = 9, 'PullRequestEvent' = 10, 'PullRequestReviewCommentEvent' = 11, 'PushEvent' = 12, 'ReleaseEvent' = 13, 'SponsorshipEvent' = 14, 'WatchEvent' = 15, 'GistEvent' = 16, 'FollowEvent' = 17, 'DownloadEvent' = 18, 'PullRequestReviewEvent' = 19, 'ForkApplyEvent' = 20, 'Event' = 21, 'TeamAddEvent' = 22)","LowCardinality(String)","LowCardinality(String)","DateTime","DateTime","Enum8('none' = 0, 'created' = 1, 'added' = 2, 'edited' = 3, 'deleted' = 4, 'opened' = 5, 'closed' = 6, 'reopened' = 7, 'assigned' = 8, 'unassigned' = 9, 'labeled' = 10, 'unlabeled' = 11, 'review_requested' = 12, 'review_request_removed' = 13, 'synchronize' = 14, 'started' = 15, 'published' = 16, 'update' = 17, 'create' = 18, 'fork' = 19, 'merged' = 20)","UInt64","String","String","Int32","Int32","LowCardinality(String)","Enum8('none' = 0, 'branch' = 1, 'tag' = 2, 'repository' = 3, 'unknown' = 4)","LowCardinality(String)","UInt32","String","Array(LowCardinality(String))","Enum8('none' = 0, 'open' = 1, 'closed' = 2)","UInt8","LowCardinality(String)","Array(LowCardinality(String))","UInt32","Enum8('NONE' = 0, 'CONTRIBUTOR' = 1, 'OWNER' = 2, 'COLLABORATOR' = 3, 'MEMBER' = 4, 'MANNEQUIN' = 5)","DateTime","DateTime","String","Array(LowCardinality(String))","Array(LowCardinality(String))","LowCardinality(String)","String","LowCardinality(String)","String","UInt8","UInt8","UInt8","Enum8('unknown' = 0, 'dirty' = 1, 'clean' = 2, 'unstable' = 3, 'draft' = 4, 'blocked' = 5)","LowCardinality(String)","UInt32","UInt8","UInt32","UInt32","UInt32","UInt32","String","UInt32","String","String","UInt32","UInt32","LowCardinality(String)","String","String","Enum8('none' = 0, 'approved' = 1, 'changes_requested' = 2, 'commented' = 3, 'dismissed' = 4, 'pending' = 5)"
"2024-03-29 11:00:00","IssueCommentEvent","LaurentBonnaud","tukaani-project/xz","2024-03-29 11:22:46","2024-03-29 11:22:45","created",2027101490,"Hi,
zstd has a nice integrated benchmark feature:
```
$ zstd -b
 3#Synthetic 50%     :  10000000 ->   3230847 (x3.095),  346.2 MB/s, 2616.6 MB/s
```
It is useful to have an easily reproducible test.
In xz it could help to test which variant among
* Basic C version
* Branchless C
* x86-64 inline assembly

is the fastest on a given system.

It would be even better if all 3 variants could be compiled into the same binary and chosen at runtime.
","",0,0,"","none","LaurentBonnaud",83,"[Feature Request]: Is there a real-world benchmark for xz?","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-29 02:00:00","WatchEvent","xiyuning","tukaani-project/xz-java","2024-03-29 02:57:45","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-28 20:00:00","WatchEvent","tvierling","tukaani-project/xz","2024-03-28 20:17:49","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-28 14:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-03-28 14:59:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-28 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz-embedded","2024-03-28 13:27:31","1970-01-01 00:00:00","none",0,"","",0,0,"github_files","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-28 12:00:00","WatchEvent","rdrygas","tukaani-project/xz","2024-03-28 12:46:34","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-27 06:00:00","ForkEvent","codejeffrey","tukaani-project/xz-java","2024-03-27 06:07:13","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-26 17:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-26 17:33:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/bytearrayview","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-03-26 17:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-26 17:45:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/bytearrayview","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-26 12:09:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-26 12:11:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,0,"","","","none"
"2024-03-26 04:00:00","WatchEvent","cs2130","tukaani-project/xz","2024-03-26 04:28:14","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-25 18:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-25 18:20:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/bytearrayview","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-25 18:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-25 18:32:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/bytearrayview","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-25 17:08:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/github_files","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-25 16:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2024-03-25 16:47:59","1970-01-01 00:00:00","none",0,"","",0,0,"github_files","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-22 15:47:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-22 14:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 14:40:30","1970-01-01 00:00:00","none",0,"","",0,0,"v20240322","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-22 14:54:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-22 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-22 14:56:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-22 14:00:00","ReleaseEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 14:51:38","1970-01-01 00:00:00","published",0,"Notable changes since last release (20240124):

- Switched to the BSD Zero Clause License. Prior versions of the files and releases remain in the public domain.

- Added RISC-V filter support.

- Updates to `xz_wrap.sh`:

    * The dictionary size was increased from 32 MiB to 128 MiB

    * Architecture specific LZMA2 compression settings are now used, typically resulting in 0-2% improvement.

    * ARM64, RISC-V, and ARM-Thumb BCJ filters are now used when compressing those kernel images.

    * Single threaded mode is explicitly used now because XZ Utils 5.6.0 and later uses multi threaded mode by default.

- Optimized BCJ decoder loop conditions for slightly better speed.

- Changed the userspace Makefile to use C11 instead of C89.

- Updated documentation.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v20240322","XZ Embedded 20240322","none"
"2024-03-22 13:00:00","CreateEvent","Larhzu","tukaani-project/xz-java","2024-03-22 13:47:34","1970-01-01 00:00:00","none",0,"","",0,0,"bytearrayview","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz-java","2024-03-22 13:48:10","1970-01-01 00:00:00","none",0,"","",0,0,"array_compare","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz-java","2024-03-22 13:48:10","1970-01-01 00:00:00","none",0,"","",0,0,"crc64_varhandle2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz-java","2024-03-22 13:48:10","1970-01-01 00:00:00","none",0,"","",0,0,"crc64_varhandle","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 13:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-22 13:48:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/bytearrayview","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-03-22 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 12:23:35","1970-01-01 00:00:00","none",0,"","",0,0,"userspace_misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 12:15:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/userspace_misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 12:23:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2024-03-22 11:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2024-03-22 11:48:30","1970-01-01 00:00:00","none",0,"","",0,0,"userspace_misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-22 11:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-22 11:36:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-22 06:00:00","WatchEvent","Nekto89","tukaani-project/xz","2024-03-22 06:07:28","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-20 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz-embedded","2024-03-20 19:40:10","2024-03-20 19:40:08","created",2010477152,"It's in the master branch now under the 0BSD license. It was [submitted to Linux](https://lore.kernel.org/lkml/20240320183846.19475-1-lasse.collin@tukaani.org/T/#m6420529145b5f53f4e56060b7d9fa4f353717257) too.

Note the changes to xz_wrap.sh in the master branch or in the linked Linux patchset. Those alignment tweaks are an easy way to get a small extra improvement in compression.","",0,0,"","none","Larhzu",1,"[Feature Request]: RISC-V BCJ filter","[]","closed",0,"","[]",3,"NONE","2024-03-20 19:40:08","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-20 19:00:00","IssuesEvent","Larhzu","tukaani-project/xz-embedded","2024-03-20 19:40:09","2024-03-20 19:40:08","closed",0,"### Describe the Feature

Thank you for your outstanding work on the project and for completing the RISC-V filter recently! 
However, the RISC-V filter is missing in this repo, xz-embedded.
It would be great to integrate the filter. Is there any plan to do so? I am willing to help.

### Expected Complications

_No response_

### Will I try to implement this new feature?

No","",0,0,"","none","ivq",1,"[Feature Request]: RISC-V BCJ filter","[]","closed",0,"","[]",3,"NONE","2024-03-20 19:40:08","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-20 19:00:00","PullRequestEvent","Larhzu","tukaani-project/xz","2024-03-20 19:04:09","2024-03-20 19:04:08","closed",0,"NVHPC compiler has several issues that make it impossible to build liblzma:
  - the compiler cannot handle unions that contain pointers that are not the first members (in some cases);
  - the compiler cannot handle the assembler code in range_decoder.h (LZMA_RANGE_DECODER_CONFIG has to be set to zero);
  - the compiler fails to produce valid code for delta_decode if the vectorization is enabled, which results in failed tests.

This introduces NVHPC-specific workarounds that address the issues.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [x] Other (please describe): workarounds for the compiler


## What is the current behavior?
It's not possible to build and get the tests pass with any existing release of the NVHPC compiler even when configuring as follows:
```console
$ ./configure --disable-symbol-versions CPPFLAGS='-DLZMA_RANGE_DECODER_CONFIG=0' CFLAGS='-O'
```
(`-O` is the same as the default `-O2` but without SIMD)


## What is the new behavior?
It is possible to build and get the tests pass with any existing release of the NVHPC compiler when configuring as follows:
```console
$ ./configure --disable-symbol-versions
```

## Does this introduce a breaking change?

- [ ] Yes
- [x] No


## Other information

I don't know if there is any interest in supporting NVHPC and I'd understand if there's none.","",0,0,"","none","skosukhin",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","closed",0,"","[]",5,"CONTRIBUTOR","2024-03-20 19:04:08","1970-01-01 00:00:00","","[]","[]","nvhpc-workarounds","44fe303a5395315819dc1e6ba782b7aa6cf75583","master","a4f2e20d8466369b1bb277c66f75c9e4ba9cc378",0,0,0,"dirty","",0,0,1,8,2,3,"",0,"","",0,0,"","","","none"
"2024-03-20 19:00:00","PullRequestEvent","Larhzu","tukaani-project/xz","2024-03-20 19:04:54","2024-03-20 19:04:53","closed",0,"There are cases when the users want to decide themselves whether they want to have the generic (even on GNU/Linux) or the linux (even if we do not recommend that) symbol versioning variant. The former might be needed to circumvent compiler issues (i.e. the compiler does not support all features that are required for the linux versioning), the latter might help in overriding the assumptions made in the configure script.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [x] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
It's not possible to override the symbol versioning variant on GNU/Linux:
```console
$ ./configure --enable-symbol-versions=auto | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=yes | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=no | grep 'library symbol versioning'
checking if library symbol versioning should be used... no
$ ./configure --enable-symbol-versions=linux | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=generic | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=something-else | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions --disable-shared | grep 'library symbol versioning'
checking if library symbol versioning should be used... no (not building a shared library)
$ ./configure --with-pic | grep 'library symbol versioning'
checking if library symbol versioning should be used... 
configure: error: 
    On GNU/Linux, building both shared and static library at the same time
    is not supported if --with-pic or --without-pic is used.
    Use either --disable-shared or --disable-static to build one type
    of library at a time. If both types are needed, build one at a time,
    possibly picking only src/liblzma/.libs/liblzma.a from the static build.
```

## What is the new behavior?
It is possible to override the symbol versioning variant:
```console
$ ./configure --enable-symbol-versions=auto | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=yes | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=no | grep 'library symbol versioning'
checking if library symbol versioning should be used... no
$ ./configure --enable-symbol-versions=linux | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=generic | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (generic)
$ ./configure --enable-symbol-versions=something-else | grep 'library symbol versioning'
checking if library symbol versioning should be used... 
configure: error: unknown symbol versioning variant 'something-else'
$ ./configure --enable-symbol-versions --disable-shared | grep 'library symbol versioning'
checking if library symbol versioning should be used... no (not building a shared library)
$ ./configure --with-pic | grep 'library symbol versioning'
checking if library symbol versioning should be used... 
configure: error: 
    On GNU/Linux, building both shared and static library at the same time
    is not supported if --with-pic or --without-pic is used.
    Use either --disable-shared or --disable-static to build one type
    of library at a time. If both types are needed, build one at a time,
    possibly picking only src/liblzma/.libs/liblzma.a from the static build.
```

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

## Other information

It looks like `--enable-symbol-versions=generic` was an unintended feature that existed before 0682439.","",0,0,"","none","skosukhin",90,"Build: Let the users override the symbol versioning variant.","[]","closed",0,"","[]",3,"CONTRIBUTOR","2024-03-20 19:04:53","1970-01-01 00:00:00","","[]","[]","config-symbol-versioning","91fbb69ecaa994a0c6eacc03d154e094c1f5b413","master","a4f2e20d8466369b1bb277c66f75c9e4ba9cc378",0,0,0,"dirty","",0,0,1,50,41,1,"",0,"","",0,0,"","","","none"
"2024-03-20 18:00:00","DeleteEvent","Larhzu","tukaani-project/xz-embedded","2024-03-20 18:25:35","1970-01-01 00:00:00","none",0,"","",0,0,"misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-20 18:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-20 18:25:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",20,20,"","","","none"
"2024-03-20 17:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-20 17:02:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-03-20 11:00:00","ForkEvent","phusidcn","tukaani-project/xz","2024-03-20 11:13:56","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-20 09:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-20 09:16:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-19 19:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-19 19:48:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-19 11:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-03-19 11:47:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-18 18:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 18:41:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,18,"","","","none"
"2024-03-18 17:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 17:06:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-18 15:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 15:37:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-18 11:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 11:12:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-03-18 11:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 11:06:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-18 10:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 10:30:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-18 10:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-18 10:20:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",20,20,"","","","none"
"2024-03-18 07:00:00","WatchEvent","NicolasSchuler","tukaani-project/xz","2024-03-18 07:31:18","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-17 19:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-17 19:02:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-17 16:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-17 16:16:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",19,19,"","","","none"
"2024-03-17 13:00:00","WatchEvent","thimslugga","tukaani-project/xz","2024-03-17 13:35:04","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-16 18:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-16 18:43:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",17,17,"","","","none"
"2024-03-15 16:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-03-15 16:08:17","2024-03-15 16:08:15","created",1999984957,"The code selected with 0x100 is the simplest assembly piece and it has
fewer input and output variables too. So it could be something about
the number of variables or the length of the assembly code but this is
just a guess.

Keeping the code disabled with NVIDIA HPC seems the simplest solution
for now. I like to make the code portable as in ""works reliably"" but
getting the best speed has some bias towards FOSS toolchains and
operating systems.

The PRs #90 and #91 are now merged to master along with related commits
that should make the symbol version autodetection work too.

Thank you for reporting the issues and for the patches!
","",0,0,"","none","Larhzu",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",5,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-15 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-15 16:06:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,5,"","","","none"
"2024-03-15 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-15 15:47:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-15 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-15 15:31:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-03-15 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-15 15:16:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-15 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-15 14:36:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-15 13:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-15 13:16:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-15 13:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-15 13:07:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-15 12:00:00","CreateEvent","Larhzu","tukaani-project/xz-embedded","2024-03-15 12:34:48","1970-01-01 00:00:00","none",0,"","",0,0,"misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-15 12:00:00","PushEvent","Larhzu","tukaani-project/xz-embedded","2024-03-15 12:37:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,16,"","","","none"
"2024-03-14 13:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-14 13:28:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/array_compare","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-14 08:00:00","WatchEvent","Rroscha","tukaani-project/xz","2024-03-14 08:37:31","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 20:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-03-13 20:45:46","2024-03-13 20:45:45","created",1995747754,"Thanks! I've collected this into pr90_pr91 branch with matching CMake
fixes.

> It looks like `--enable-symbol-versions=generic` was an unintended
> feature that existed before 0682439.

Quite possibly so. I agree it should be configurable.

> `__has_attribute(__symver__)` for the Nvidia compiler is `0` and it
> chokes with `__asm__("".symver ..."")`:

It is clear that the compiler doesn't support symbol versioning in any
form. The linker still does, thus thus the ""generic"" versioning works.

> -	__asm__("".symver "" #intname "","" extnamever);
> +	__asm__("".symver "" #intname "","" extnamever "";"");

As you noticed, the additional symbols didn't appear. The correct way
is to use the ""generic"" versioning which doesn't even attempt to add
those extra symbol versions. This is assuming that the toolchain truly
is targeting glibc (configure thinks it is).

> This could be checked by the configure script, I guess (one should be
> careful with using something non-portable like `readelf` in a
> configure script though).

configure and CMakeLists.txt could check for __NVCOMPILER. I suppose
that would be reasonable. I plan to add that in the near future, unless
the problem is that the build isn't actually targeting glibc and
configure is misdetecting that.

Not very many users should be affected by changing from ""linux"" to
""generic"". The ""linux"" one only helps with binary compatibility with
some executables which hopefully aren't too common.

> Another question, when someone specifies `./configure
> --enable-symbol-versions=yes --disable-shared `

It's simplest to just ignore --enable-symbol-versions in this case.
Symbol versions make no sense in static libraries but they can cause
breakage in some cases. If we rejected the option with static-only
builds it could complicate build scripts that use mostly the same
options for building shared and static liblzma in separate runs.
","",0,0,"","none","Larhzu",90,"Build: Let the users override the symbol versioning variant.","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-13 20:14:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2024-03-13 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-13 20:18:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2024-03-13 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-13 20:00:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/pr90_pr91","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2024-03-13 19:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-03-13 19:52:25","1970-01-01 00:00:00","none",0,"","",0,0,"pr90_pr91","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 17:00:00","IssueCommentEvent","skosukhin","tukaani-project/xz","2024-03-13 17:13:31","2024-03-13 17:13:29","created",1995041079,"> Does NVHPC support any kind of inline assembly, or is there something we are using that specifically is a problem?

I don't know much about the assembly. A random example from the Internet
```c
#include <stdio.h>

int main() {

    int arg1, arg2, add, sub, mul, quo, rem ;

    printf( ""Enter two integer numbers : "" );
    scanf( ""%d%d"", &arg1, &arg2 );

    /* Perform Addition, Subtraction, Multiplication & Division */
    __asm__ ( ""addl %%ebx, %%eax;"" : ""=a"" (add) : ""a"" (arg1) , ""b"" (arg2) );
    __asm__ ( ""subl %%ebx, %%eax;"" : ""=a"" (sub) : ""a"" (arg1) , ""b"" (arg2) );
    __asm__ ( ""imull %%ebx, %%eax;"" : ""=a"" (mul) : ""a"" (arg1) , ""b"" (arg2) );

    __asm__ ( ""movl $0x0, %%edx;""
              ""movl %2, %%eax;""
              ""movl %3, %%ebx;""
               ""idivl %%ebx;"" : ""=a"" (quo), ""=d"" (rem) : ""g"" (arg1), ""g"" (arg2) );

    printf( ""%d + %d = %d\n"", arg1, arg2, add );
    printf( ""%d - %d = %d\n"", arg1, arg2, sub );
    printf( ""%d * %d = %d\n"", arg1, arg2, mul );
    printf( ""%d / %d = %d\n"", arg1, arg2, quo );
    printf( ""%d %% %d = %d\n"", arg1, arg2, rem );

    return 0 ;
}
```
compiles and works as expected.

Also, `#define LZMA_RANGE_DECODER_CONFIG 0x100` works fine but anything else, e.g. `0x180`, fails with an ugly message:
```console
$ nvc -DHAVE_CONFIG_H -I. -I../.. -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -DLZMA_RANGE_DECODER_CONFIG=0x180 -pthread -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wredundant-decls -g -O2 -c lzma/lzma_decoder.c -MD -MF .deps/liblzma_la-lzma_decoder.TPlo  -fPIC -DPIC -o .libs/liblzma_la-lzma_decoder.o
""lzma/lzma_decoder.c"", line 376: warning: variable ""t0"" was set but never used [set_but_not_used]
  				rc_matched_literal(probs,
  				^

Remark: individual warnings can be suppressed with ""--diag_suppress <warning-name>""

""lzma/lzma_decoder.c"", line 376: warning: variable ""t1"" was set but never used [set_but_not_used]
  				rc_matched_literal(probs,
  				^

""lzma/lzma_decoder.c"", line 376: warning: variable ""t_prob"" was set but never used [set_but_not_used]
  				rc_matched_literal(probs,
  				^

""lzma/lzma_decoder.c"", line 501: warning: variable ""t0"" was set but never used [set_but_not_used]
  					rc_direct(rep0, limit);
  					^

""lzma/lzma_decoder.c"", line 501: warning: variable ""t1"" was set but never used [set_but_not_used]
  					rc_direct(rep0, limit);
  					^

""lzma/lzma_decoder.c"", line 986: warning: enumerated type mixed with another type [mixed_enum_type]
  	coder->state = state;
  	             ^

LLVM ERROR: Bad $ operand number in inline asm string: 'add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	xor	$5, $8
	add	$7, $7
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	cmovae	$5, $8
	mov	$7, $5
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	add	$8, $6
	and	$8, $5
	add	$5, $6
	movzw	($10, ${6:q}, 2), $4
	add	$6, $6
	cmp	$11, $0
	jae	1f
	shl	$12, $1
	mov	($9), ${1:b}
	shl	$12, $0
	inc	$9
1:
mov	$0, $2
	shr	$13, $0
	imul	$4, $0
	sub	$0, $2
	mov	$1, $3
	sub	$0, $1
	cmovae	$2, $0
	lea	${>:c}(${4:q}), $2
	cmovb	$3, $1
	mov	$6, $3
	cmovae	$4, $2
	sbb	$$-1, $6
	shr	$15, $2
	and	$$0x1FF, $6
	sub	$2, $4
	mov	${4:w}, ($10, ${3:q}, 1)
	'
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace.
Stack dump:
0.	Program arguments: /opt/zmaw/sw/bullseye-x64/compilers/nvhpc-23.7/Linux_x86_64/23.7/compilers/share/llvm/bin/llc /tmp/nvcSV_Pme1jzEY9E.llvm -march=x86-64 -mcpu=native -mattr=+mmx -mattr=+sse -mattr=+sse2 -mattr=+sse3 -mattr=+ssse3 -mattr=+sse4.1 -mattr=+sse4.2 -mattr=+avx -mattr=+avx2 -mattr=+f16c -mattr=+fma -mattr=+xsave -mattr=+xsaveopt -mattr=+xsavec -mattr=+xsaves -mattr=+popcnt -mattr=+sha -mattr=+aes -mattr=+pclmul -mattr=+clflushopt -mattr=+fsgsbase -mattr=+rdrnd -mattr=+bmi -mattr=+bmi2 -mattr=+lzcnt -mattr=+fxsr -mattr=+pku -mattr=+gfni -mattr=+vaes -mattr=+vpclmulqdq -mattr=+movdiri -mattr=+movdir64b -O2 -opaque-pointers -non-global-value-max-name-size=4294967295 -x86-cmov-converter=0 -dwarf-directory=false --align-all-functions=6 -override-aa-for-tbaa=true -relocation-model=pic -filetype=obj --frame-pointer=none -o .libs/liblzma_la-lzma_decoder.o
1.	Running pass 'Function Pass Manager' on module '/tmp/nvcSV_Pme1jzEY9E.llvm'.
2.	Running pass 'X86 Assembly Printer' on function '@lzma_decode'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  llc             0x0000563d2eb9b608 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 40
1  llc             0x0000563d2eb9957e llvm::sys::RunSignalHandlers() + 238
2  llc             0x0000563d2eb9bd9d
3  libpthread.so.0 0x00007fdc14be5140
4  libc.so.6       0x00007fdc148c5ce1 gsignal + 321
5  libc.so.6       0x00007fdc148af537 abort + 291
6  llc             0x0000563d2eb2d15c llvm::report_fatal_error(llvm::Twine const&, bool) + 460
7  llc             0x0000563d2dfaba56
8  llc             0x0000563d2df95a0e llvm::AsmPrinter::emitFunctionBody() + 2942
9  llc             0x0000563d2dae5636
10 llc             0x0000563d2e166d9f llvm::MachineFunctionPass::runOnFunction(llvm::Function&) + 607
11 llc             0x0000563d2e55b00e llvm::FPPassManager::runOnFunction(llvm::Function&) + 622
12 llc             0x0000563d2e5622a3 llvm::FPPassManager::runOnModule(llvm::Module&) + 51
13 llc             0x0000563d2e55bc2d llvm::legacy::PassManagerImpl::run(llvm::Module&) + 2381
14 llc             0x0000563d2d78146a main + 8986
15 libc.so.6       0x00007fdc148b0d0a __libc_start_main + 234
16 llc             0x0000563d2d77c48e
nvc-Fatal-/opt/zmaw/sw/bullseye-x64/compilers/nvhpc-23.7/Linux_x86_64/23.7/compilers/share/llvm/bin/llc TERMINATED by signal 6
Arguments to /opt/zmaw/sw/bullseye-x64/compilers/nvhpc-23.7/Linux_x86_64/23.7/compilers/share/llvm/bin/llc
/opt/zmaw/sw/bullseye-x64/compilers/nvhpc-23.7/Linux_x86_64/23.7/compilers/share/llvm/bin/llc /tmp/nvcSV_Pme1jzEY9E.llvm -march=x86-64 -mcpu=native -mattr=+mmx -mattr=+sse -mattr=+sse2 -mattr=+sse3 -mattr=+ssse3 -mattr=+sse4.1 -mattr=+sse4.2 -mattr=+avx -mattr=+avx2 -mattr=+f16c -mattr=+fma -mattr=+xsave -mattr=+xsaveopt -mattr=+xsavec -mattr=+xsaves -mattr=+popcnt -mattr=+sha -mattr=+aes -mattr=+pclmul -mattr=+clflushopt -mattr=+fsgsbase -mattr=+rdrnd -mattr=+bmi -mattr=+bmi2 -mattr=+lzcnt -mattr=+fxsr -mattr=+pku -mattr=+gfni -mattr=+vaes -mattr=+vpclmulqdq -mattr=+movdiri -mattr=+movdir64b -O2 -opaque-pointers -non-global-value-max-name-size=4294967295 -x86-cmov-converter=0 -dwarf-directory=false --align-all-functions=6 -override-aa-for-tbaa=true -relocation-model=pic -filetype=obj --frame-pointer=none -o .libs/liblzma_la-lzma_decoder.o
```

I hope this answers your question.","",0,0,"","none","skosukhin",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 16:00:00","IssueCommentEvent","skosukhin","tukaani-project/xz","2024-03-13 16:51:28","2024-03-13 16:51:26","created",1994969529,"`__has_attribute(__symver__)` for the Nvidia compiler is `0` and it chokes with `__asm__("".symver ..."")`:
```console
<inline asm>:1:85: error: unknown token in expression
.symver lzma_get_progress_522,lzma_get_progress@XZ_5.2.2.symver lzma_get_progress_52,lzma_get_progress@@XZ_5.2
```
Something like
```patch
--- a/src/liblzma/common/common.h
+++ b/src/liblzma/common/common.h
@@ -92,7 +92,7 @@
 					LZMA_API(type) intname
 #	else
 #		define LZMA_SYMVER_API(extnamever, type, intname) \
-			__asm__("".symver "" #intname "","" extnamever); \
+			__asm__("".symver "" #intname "","" extnamever "";""); \
 			extern LZMA_API(type) intname
 #	endif
 #endif
```
makes it possible to build but
```console
$ readelf -W --dyn-syms $(find . -name '*.so') | tr -s ' ' | cut -d' ' -f9 | grep '^lzma_get_progress'
lzma_get_progress@@XZ_5.2
```
instead of
```console
$ readelf -W --dyn-syms $(find . -name '*.so') | tr -s ' ' | cut -d' ' -f9 | grep '^lzma_get_progress'
lzma_get_progress@@XZ_5.2
lzma_get_progress@XZ_5.2.2
```

This could be checked by the configure script, I guess (one should be careful with using something non-portable like `readelf` in a configure script though).

In my opinion, `./configure --enable-symbol-versions=yes --disable-shared` should result in an error. However, `checking if library symbol versioning should be used... no (not building a shared library)` is informative enough.","",0,0,"","none","skosukhin",90,"Build: Let the users override the symbol versioning variant.","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-13 16:12:30","2024-03-13 16:12:28","created",1994829182,"> I just updated the demo pipeline to ""somewhat complete"" state that suffices my own purposes:
> 
> * 4 Build Configuration with Visual Studio 2022 (x64 MSVC, x86 MSVC, x64 Clang-cl, x86 Clang-cl)
> * execution of the test executables
> * publishing of xz.exe and co (disabled per default)

This will be really helpful to include since for now I just test things locally on a VM with x64 MSVC. Automating this plus extending coverage will save me some effort :)

> Well, I'm neither familiar with github actions nor with windows batch (nor powershell). But I stuck to the ""out of the box"" tools for better compatibility with VS2022/Windows only setups.

I haven't worked much with Windows Batch scripting or PowerShell either :/
At a glance what you have makes sense but I will play around with it a bit.

> > The existing CI tests likely need a bit of a clean up anyway
> 
> I found 13 test-executables (test_*.exe). I added calls to those in `build-with-vs2022.bat` and to the pipeline. Not sure if there is a way to standardise test-execution over all platforms w/o rewriting the tests to some test-framework?

We currently just use the built-in test harnesses for our Autotools and CMake builds. The way you have it now seems logical, to just loop through the test executables and run them, although the best way to report the errors may need to be looked at. Maybe this is something we could add to `tuktest.h`, but at the moment I'm not sure how it would fit in.

> > We don't have plans for using CI for releases.
> 
> OK. To be honest, Windows releases for v5.6.x is what brought me here at the first place :-)

We had another recent request for Windows binaries, so we will more seriously consider this. We need to verify there are no license restrictions preventing us from distributing Windows binaries with the compiler we choose to use (MinGW-w64, MSVC, Clang-cl, etc.). Also, I would probably want to generate the Windows binaries locally instead of relying on GitHub runners. The GitHub CI runners are a common attack surface these days so it could be an extra risk. Currently, we only use CI for testing so if the GitHub runners are compromised then its not a security threat. 

> I'm more than happy to create PRs, adapt the scripts to the projects needs and clean things up as required. Feel also free to grab what you need.

I cloned your fork already, so no need to make a PR unless you want to. I suppose it could be helpful to keep the conversation focused on various parts of the code. We usually don't merge PRs directly anyway. Instead we usually take commits we like and adapt the other parts as needed. Don't worry, you'll still be the Author on any commits that are mostly unchanged :)
","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",16,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 16:00:00","WatchEvent","iyadahmed","tukaani-project/xz","2024-03-13 16:57:36","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-13 15:50:19","2024-03-13 15:50:18","created",1994743011,"> I was also surprised that `#pragma routine novector` made the difference for `delta_decode`, which does not have a loop. It might have to do with the `restrict`. I haven't dug deeper.

Its likely the call to `decode_buffer()` is being inlined, so that could be why some sort of vectorization is happening. 

> The problems in `delta_decoder.c` and `range_decoder.h` have not been reported yet.

Does NVHPC support any kind of inline assembly, or is there something we are using that specifically is a problem?

> We monitor several issues ([1](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L213-222), [2](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L245-253), [3](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L268-271)) in our project and I will let you know if anything changes.

Thanks!

","",0,0,"","none","JiaT75",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 15:00:00","IssueCommentEvent","skosukhin","tukaani-project/xz","2024-03-13 15:20:46","2024-03-13 15:20:45","created",1994649483,"I was also surprised that `#pragma routine novector` made the difference for `delta_decode`, which does not have a loop. It might have to do with the `restrict`. I haven't dug deeper.

The problems in `delta_decoder.c` and `range_decoder.h` have not been reported yet. The one in `string_conversion.c` was reported long ago but NVIDIA does not seem to have high priority for their C compiler (C++ and Fortran get more attention). We monitor several issues ([1](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L213-222), [2](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L245-253), [3](https://gitlab.dkrz.de/dkrz-sw/yac/-/blob/c8fe4fe545ab2e6090afc649fb28263333bb4daf/src/config_yaml.c#L268-271)) in our project and I will let you know if anything changes.","",0,0,"","none","skosukhin",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-13 14:44:50","2024-03-13 14:44:49","created",1994565554,"Hello! Thanks for reporting the inability to build on NVHPC and submitting the PR. The changes are minimal so supporting NVHPC seems worth the little bit of effort :)

I am curious why `#pragma routine novector` is needed in `delta_decoder.c` and not elsewhere. Has this bug been reported to the NVHPC developers?","",0,0,"","none","JiaT75",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 13:00:00","PullRequestEvent","skosukhin","tukaani-project/xz","2024-03-13 13:06:29","2024-03-13 13:06:26","opened",0,"NVHPC compiler has several issues that make it impossible to build liblzma:
  - the compiler cannot handle unions that contain pointers that are not the first members (in some cases);
  - the compiler cannot handle the assembler code in range_decoder.h (LZMA_RANGE_DECODER_CONFIG has to be set to zero);
  - the compiler fails to produce valid code for delta_decode if the vectorization is enabled, which results in failed tests.

This introduces NVHPC-specific workarounds that address the issues.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [x] Other (please describe): workarounds for the compiler


## What is the current behavior?
It's not possible to build and get the tests pass with any existing release of the NVHPC compiler even when configuring as follows:
```console
$ ./configure --disable-symbol-versions CPPFLAGS='-DLZMA_RANGE_DECODER_CONFIG=0' CFLAGS='-O'
```
(`-O` is the same as the default `-O2` but without SIMD)


## What is the new behavior?
It is possible to build and get the tests pass with any existing release of the NVHPC compiler when configuring as follows:
```console
$ ./configure --disable-symbol-versions
```

## Does this introduce a breaking change?

- [ ] Yes
- [x] No


## Other information

I don't know if there is any interest in supporting NVHPC and I'd understand if there's none.","",0,0,"","none","skosukhin",91,"liblzma: Fix building with NVHPC (NVIDIA HPC SDK).","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","nvhpc-workarounds","44fe303a5395315819dc1e6ba782b7aa6cf75583","master","a4f2e20d8466369b1bb277c66f75c9e4ba9cc378",0,0,0,"unknown","",0,0,1,8,2,3,"",0,"","",0,0,"","","","none"
"2024-03-13 11:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz-java","2024-03-13 11:16:23","2024-03-13 11:16:22","created",1994143076,"> Actually, I use `try with catch`, so `xzOut.close()` is unnecessary.

True, I didn't notice it, sorry. I haven't regularly used much beyond
Java 5 features yet and I had a break from Java for three years. :-/

If I compress and decompress your two example JSON files, everything
works correctly. Based on your code, I created a complete program that
compresses to jdks.json.xz and the output is fine with both of your
sample inputs. Thus, I cannot reproduce the problem with the
information I currently have.

Note that the error message

    Error 79 - Inappropriate file type or format.

is not from XZ for Java.

import java.io.*;
import java.nio.file.*;
import org.tukaani.xz.*;

class XZEncDemo {
    public void testXzCompress() throws IOException {
        String json = new String(Files.readAllBytes(
                Paths.get(""jdks.json"")));
        compress(json);
    }

    public void compress(String input) {
        try (FileOutputStream fos = new FileOutputStream(""jdks.json.xz"");
                XZOutputStream xzOut = new XZOutputStream(fos, new LZMA2Options())) {
            byte[] jsonData = input.getBytes();
            xzOut.write(jsonData);
        } catch (Throwable throwable) {
            throw new RuntimeException(throwable);
        }
    }

    public static void main(String[] args) throws Exception {
        new XZEncDemo().testXzCompress();
    }
}
","",0,0,"","none","Larhzu",6,"[Bug]: A strange format error in the generated xz file due to spaces","['bug']","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 11:00:00","PullRequestEvent","skosukhin","tukaani-project/xz","2024-03-13 11:53:46","2024-03-13 11:53:44","opened",0,"There are cases when the users want to decide themselves whether they want to have the generic (even on GNU/Linux) or the linux (even if we do not recommend that) symbol versioning variant. The former might be needed to circumvent compiler issues (i.e. the compiler does not support all features that are required for the linux versioning), the latter might help in overriding the assumptions made in the configure script.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [x] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
It's not possible to override the symbol versioning variant on GNU/Linux:
```console
$ ./configure --enable-symbol-versions=auto | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=yes | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=no | grep 'library symbol versioning'
checking if library symbol versioning should be used... no
$ ./configure --enable-symbol-versions=linux | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=generic | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=something-else | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions --disable-shared | grep 'library symbol versioning'
checking if library symbol versioning should be used... no (not building a shared library)
$ ./configure --with-pic | grep 'library symbol versioning'
checking if library symbol versioning should be used... 
configure: error: 
    On GNU/Linux, building both shared and static library at the same time
    is not supported if --with-pic or --without-pic is used.
    Use either --disable-shared or --disable-static to build one type
    of library at a time. If both types are needed, build one at a time,
    possibly picking only src/liblzma/.libs/liblzma.a from the static build.
```

## What is the new behavior?
It is possible to override the symbol versioning variant:
```console
$ ./configure --enable-symbol-versions=auto | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=yes | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=no | grep 'library symbol versioning'
checking if library symbol versioning should be used... no
$ ./configure --enable-symbol-versions=linux | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (linux)
$ ./configure --enable-symbol-versions=generic | grep 'library symbol versioning'
checking if library symbol versioning should be used... yes (generic)
$ ./configure --enable-symbol-versions=something-else | grep 'library symbol versioning'
checking if library symbol versioning should be used... 
configure: error: unknown symbol versioning variant 'something-else'
$ ./configure --enable-symbol-versions --disable-shared | grep 'library symbol versioning'
checking if library symbol versioning should be used... no (not building a shared library)
$ ./configure --with-pic | grep 'library symbol versioning'
checking if library symbol versioning should be used... 
configure: error: 
    On GNU/Linux, building both shared and static library at the same time
    is not supported if --with-pic or --without-pic is used.
    Use either --disable-shared or --disable-static to build one type
    of library at a time. If both types are needed, build one at a time,
    possibly picking only src/liblzma/.libs/liblzma.a from the static build.
```

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

## Other information

It looks like `--enable-symbol-versions=generic` was an unintended feature that existed before 0682439.","",0,0,"","none","skosukhin",90,"Build: Let the users override the symbol versioning variant.","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","config-symbol-versioning","91fbb69ecaa994a0c6eacc03d154e094c1f5b413","master","a4f2e20d8466369b1bb277c66f75c9e4ba9cc378",0,0,0,"unknown","",0,0,1,50,41,1,"",0,"","",0,0,"","","","none"
"2024-03-13 09:00:00","ForkEvent","skosukhin","tukaani-project/xz","2024-03-13 09:05:00","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 05:00:00","WatchEvent","cos12a","tukaani-project/xz-embedded","2024-03-13 05:15:54","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 02:00:00","IssueCommentEvent","RaymondLam1","tukaani-project/xz-java","2024-03-13 02:27:37","2024-03-13 02:27:36","created",1993170878,"Unfortunately, `xzOut.close()` does not work. Actually, I use `try with catch`, so `xzOut.close()` is unnecessary. Maybe it is a bug ?","",0,0,"","none","RaymondLam1",6,"[Bug]: A strange format error in the generated xz file due to spaces","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-13 00:00:00","WatchEvent","admercs","tukaani-project/xz","2024-03-13 00:54:16","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-12 16:00:00","CreateEvent","Larhzu","tukaani-project/xz-java","2024-03-12 16:06:49","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_eopm","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-12 06:00:00","ForkEvent","EhViewer-NekoInverter","tukaani-project/xz","2024-03-12 06:40:26","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-11 21:00:00","CommitCommentEvent","Larhzu","tukaani-project/xz-java","2024-03-11 21:03:06","2024-03-11 21:03:06","none",139649531,"New commits were added. crc64_varhandle2 has them squashed. Further
work continues on that branch.

The idea seems good to me. Performance isn't affected by these changes.

Thanks!
","",0,0,"","none","Larhzu",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"8c788e66001fc5bc8434c33bbee21c45a6d580c5","",0,0,"","","","none"
"2024-03-11 21:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-11 21:22:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/array_compare","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-11 21:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-11 21:18:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/array_compare","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,5,"","","","none"
"2024-03-11 21:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-11 21:10:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2024-03-11 20:00:00","CreateEvent","Larhzu","tukaani-project/xz-java","2024-03-11 20:56:24","1970-01-01 00:00:00","none",0,"","",0,0,"crc64_varhandle2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-11 20:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-11 20:55:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc64_varhandle","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-11 20:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-11 20:49:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc64_varhandle","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-03-11 19:00:00","CommitCommentEvent","Larhzu","tukaani-project/xz-java","2024-03-11 19:00:12","2024-03-11 19:00:12","none",139643389,"True. The finish() method isn't performance critical at all so in that
sense it doesn't matter. However, an ArrayUtil class with VarHandles for
different integer sizes and endiannesses could be convenient in general
and perhaps help readability slightly too. I started but haven't
finished yet.

Thanks!
","",0,0,"","none","Larhzu",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"8c788e66001fc5bc8434c33bbee21c45a6d580c5","",0,0,"","","","none"
"2024-03-11 14:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2024-03-11 14:37:02","2024-03-11 14:37:02","closed",0,"### Describe the bug

    make  all-recursive
    make[1]: Entering directory '/Depot/jjj/xz-5.6.0'
    Making all in src
    make[2]: Entering directory '/Depot/jjj/xz-5.6.0/src'
    Making all in liblzma
    make[3]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    Making all in api
    make[4]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma/api'
    make[4]: Nothing to be done for 'all'.
    make[4]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma/api'
    make[4]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    make[4]: Nothing to be done for 'all-am'.
    make[4]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    make[3]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma'
    Making all in xzdec
    make[3]: Entering directory '/Depot/jjj/xz-5.6.0/src/xzdec'
    gcc -DHAVE_CONFIG_H -I. -I../..  -DTUKLIB_GETTEXT=0 -I../../src/common -I../../src/liblzma/api -I../../lib  -pthread -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wshift-overflow=2 -Wstrict-overflow=3 -Walloc-zero -Wduplicated-cond -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wdate-time -Wsign-conversion -Wfloat-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -O2 -fPIC -fno-strict-overflow -Wno-error -MT xzdec-xzdec.o -MD -MP -MF .deps/xzdec-xzdec.Tpo -c -o xzdec-xzdec.o `test -f 'xzdec.c'     || echo './'`xzdec.c
    xzdec.c: In function ‘sandbox_enter’:
    xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
      329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
          |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
    xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
    xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
      349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
          |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
    make[3]: *** [Makefile:606: xzdec-xzdec.o] Error 1
    make[3]: Leaving directory '/Depot/jjj/xz-5.6.0/src/xzdec'
    make[2]: *** [Makefile:427: all-recursive] Error 1
    make[2]: Leaving directory '/Depot/jjj/xz-5.6.0/src'
    make[1]: *** [Makefile:597: all-recursive] Error 1
    make[1]: Leaving directory '/Depot/jjj/xz-5.6.0'
    make: *** [Makefile:487: all] Error 2


I can compile older xz releases fine by the way, on the same system, so 5.4.x, 
5.2.x. Not sure what changed.

My system is a custom built slackware; I recompiled most
things from source following mostly LFS/BLFS instructions.
xz 5.6.x is not yet appearing on LFS, so I just poke in the
dark here really.

glibc is 2.33, gcc is 11.4.0.

### Version

5.6.0

### Operating System

linux

### Relevant log output

_No response_","",0,0,"","none","rubyFeedback",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","closed",0,"","[]",9,"NONE","2024-03-11 14:37:01","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-11 14:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-11 14:29:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc64_varhandle","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-11 12:00:00","CreateEvent","Larhzu","tukaani-project/xz-java","2024-03-11 12:54:54","1970-01-01 00:00:00","none",0,"","",0,0,"crc64_varhandle","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-10 21:00:00","ForkEvent","MandoHoze88","tukaani-project/.github","2024-03-10 21:17:08","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-10 13:00:00","IssueCommentEvent","ndu2","tukaani-project/xz","2024-03-10 13:17:39","2024-03-10 13:17:37","created",1987227189,"Thank you @JiaT75  and @Larhzu for the quick feedback.


> Would Visual Studio + Clang-cl be worth trying too?

Yes, I think so. I added Clang-cl builds. There is just one include missing (Originally I required more patches due to my inability to properly generate the vsxproj with cmake)

Patch: https://github.com/ndu2/xz/commit/5fb2ace8369ca30c17e772ce3d4a3d6fd99e2bf1




> adding it to the CI pipeline would be great. I'll take a look at your demo pipeline hopefully soon :)

I just updated the demo pipeline to ""somewhat complete"" state that suffices my own purposes:

 * 4 Build Configuration with Visual Studio 2022 (x64 MSVC, x86 MSVC, x64 Clang-cl, x86 Clang-cl)
 * execution of the test executables
 * publishing of xz.exe and co (disabled per default)

Well, I'm neither familiar with github actions nor with windows batch (nor powershell). But I stuck to the ""out of the box"" tools for better compatibility with VS2022/Windows only setups.

You'll find the implementation it those 2 files:

 * windows/build-with-vs2022.bat
 * .github/workflows/windows-vs2022-ci.yml

> The existing CI tests likely need a bit of a clean up anyway

I found 13 test-executables (test_*.exe). I added calls to those in `build-with-vs2022.bat` and to the pipeline. Not sure if there is a way to standardise test-execution over all platforms w/o rewriting the tests to some test-framework?


> We don't have plans for using CI for releases.

OK. To be honest, Windows releases for v5.6.x is what brought me here at the first place :-)

Please let me know if any of this work is of your interest and how to proceed.

I'm more than happy to create PRs, adapt the scripts to the projects needs and clean things up as required. Feel also free to grab what you need.


Best
ndu2

","",0,0,"","none","ndu2",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",15,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 21:00:00","CreateEvent","Larhzu","tukaani-project/xz-java","2024-03-09 21:43:10","1970-01-01 00:00:00","none",0,"","",0,0,"array_compare","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-09 12:00:46","2024-03-09 12:00:45","created",1986837085,"Thanks @ndu2 for doing some benchmarking and the demo pipeline! I hadn't forgotten about this but we had higher priority things to work on instead. MSVC support for xz is still fairly recent, so adding it to the CI pipeline would be great. I'll take a look at your demo pipeline hopefully soon :)

The existing CI tests likely need a bit of a clean up anyway, some parts were written hastily by me. They have proven to be great for catching bugs though. We don't have plans for using CI for releases.

The assembly code is only for decoding so that explains your results. Using larger test files may help be sure that the results aren't due to noise.","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",14,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 11:00:00","IssueCommentEvent","ndu2","tukaani-project/xz","2024-03-09 11:21:53","2024-03-09 11:21:51","created",1986829734,"Good point, I wasn't aware of that assembly code. I did a quick test on a virtual windows 10:

MSVC against clang-cl (needed a couple of code adaptions).

1. uncompressable 40MB input 
2. compressable 214MB input (compressed =24.3MB)

using xz with all default settings (xz.exe -z raw, xz.exe -d raw.xz) and took the timings:

1: almost identical (differences <2%)
2: compressing is similar (<2%), decompressing: clang-cl is 10% to 15% faster

I will bench with a ""real"" windows later and update here","",0,0,"","none","ndu2",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",13,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 10:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-03-09 10:40:57","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6.1","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 10:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-09 10:46:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-09 10:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-03-09 10:44:38","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.6.1 (2024-03-09)

    * liblzma: Fixed two bugs relating to GNU indirect function (IFUNC)
      with GCC. The more serious bug caused a program linked with
      liblzma to crash on start up if the flag -fprofile-generate was
      used to build liblzma. The second bug caused liblzma to falsely
      report an invalid write to Valgrind when loading liblzma.

    * xz: Changed the messages for thread reduction due to memory
      constraints to only appear under the highest verbosity level.

    * Build:

        - Fixed a build issue when the header file <linux/landlock.h>
          was present on the system but the Landlock system calls were
          not defined in <sys/syscall.h>.

        - The CMake build now warns and disables NLS if both gettext
          tools and pre-created .gmo files are missing. Previously,
          this caused the CMake build to fail.

    * Minor improvements to man pages.

    * Minor improvements to tests.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.6.1","XZ Utils 5.6.1 Stable","none"
"2024-03-09 09:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-03-09 09:36:25","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 09:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-03-09 09:05:20","2024-03-09 09:05:19","created",1986801028,"Would Visual Studio + Clang-cl be worth trying too? The inline x86-64
assembly code in 5.6.x is compatible with GCC and Clang, so I hope that
compiling with Clang-cl would result in better decompression speed than
compiling with MSVC. (LZMA SDK has MSVC compatible assembly but then
one needs to use LZMA SDK's C code and APIs too.)
","",0,0,"","none","Larhzu",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",12,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-09 09:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-09 09:51:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-03-08 23:00:00","IssueCommentEvent","ndu2","tukaani-project/xz","2024-03-08 23:45:05","2024-03-08 23:45:03","created",1986573080,"Hi @JiaT75 

I had no problems compiling with MSVC only (cmake and tools shipped by Visual Studio 2022). Thanks a lot for setting the cmake files up for this.

Are there any plans adding MSVC CI Builds (including binary releases) to the CI pipeline?
There is a demo for VS2022/x64 build+artifacts on the ndu2/xz fork . Testing, etc is missing but this could be a start.

I can help out on this, if there is any interest.

Best
ndu

Link to the mentioned CI action: https://github.com/ndu2/xz/actions/runs/8210052700 (see also the files windows/build-with-vs2022.bat, .github/workflows/windows-vs2022-ci.yml)
","",0,0,"","none","ndu2",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",11,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-08 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-08 12:06:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-07 17:00:00","DeleteEvent","Larhzu","tukaani-project/xz-java","2024-03-07 17:36:00","1970-01-01 00:00:00","none",0,"","",0,0,"misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-07 17:00:00","PullRequestEvent","Larhzu","tukaani-project/xz-java","2024-03-07 17:36:07","2024-03-07 17:36:06","closed",0,"","",0,0,"","none","simon04",4,"MANIFEST: add Bundle-License","[]","closed",0,"","[]",0,"NONE","2024-03-07 17:36:06","1970-01-01 00:00:00","","[]","[]","manifest-license","50e41cdf88f9301e18beef470a69078d7d061619","master","bc4b79d7532fd67136197c65f5ad00a24cb72834",0,0,0,"unknown","",0,0,1,1,0,1,"",0,"","",0,0,"","","","none"
"2024-03-07 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-03-07 17:44:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-07 17:00:00","PushEvent","Larhzu","tukaani-project/xz-java","2024-03-07 17:36:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",17,17,"","","","none"
"2024-03-07 09:00:00","WatchEvent","arlong","tukaani-project/xz","2024-03-07 09:37:04","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-06 15:00:00","CreateEvent","Larhzu","tukaani-project/xz-java","2024-03-06 15:18:05","1970-01-01 00:00:00","none",0,"","",0,0,"misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 21:00:00","ForkEvent","ndu2","tukaani-project/xz","2024-03-05 21:06:30","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 21:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz-embedded","2024-03-05 21:08:21","2024-03-05 21:08:20","created",1979638035,"I got a preliminary version done locally. It may take a few days until it's in the Git repository but it shouldn't take too many days. It likely won't be in Linux 6.9 but hopefully 6.10 is doable. We'll see.","",0,0,"","none","Larhzu",1,"[Feature Request]: RISC-V BCJ filter","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 21:00:00","IssueCommentEvent","bokken","tukaani-project/xz-java","2024-03-05 21:39:35","2024-03-05 21:39:34","created",1979681544,"> I wonder if JVM is smart enough to vectorize the decoder loops when distance is large enough and appropriate multiple of a power of two. For example, distance=240 is a little faster than 248.

It might be. I also used the DeltaEncoder and DeltaDecoder as a means of playing with the Vector api functionality in https://openjdk.java.net/jeps/338, which still has not been fully released. I definitely recall on the encoder side seeing further improvements beyond what was in this PR. (It actually worked the opposite direction, I observed something like 50:1 improvement in performance, on hardware where 32:1 should have been theoretical max. This caused me to revisit the original implementation to see if it could be improved without use of vectors.) While I also worked on the decoder, I do not remember actual performance numbers.

> In any case, thanks for the improvement and sorry that it has taken three years to get it included.

Just glad to see it making it :)","",0,0,"","none","bokken",11,"delta coding performance","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-05 21:23:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-03-05 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz-java","2024-03-05 19:17:11","2024-03-05 19:17:10","created",1979470307,"I've been preparing a few unrelated changes and including this Delta filter improvement among those. I hope the changes get to master tomorrow. (This is a special case and not the normal way in the project. Sorry.)

I benchmarked the Delta filter changes. Encoding time was reduced by 60-70 % when distance=1 and over 50 % with long distances. That makes sense as with longer distances more bytes go via the history buffer.

Decoding time reduced up to 50 % with long distances but only 5 % with distance=1. It's still a clear improvement. I suppose short distance is slower because `buf[off + i] += buf[off + i - distance];` has dependency on the previous iteration; it cannot parallelize like with longer distances.

I wonder if JVM is smart enough to vectorize the decoder loops when distance is large enough and appropriate multiple of a power of two. For example, distance=240 is a little faster than 248.

In any case, thanks for the improvement and sorry that it has taken three years to get it included.","",0,0,"","none","Larhzu",11,"delta coding performance","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 12:00:00","ForkEvent","RaymondLam1","tukaani-project/xz-java","2024-03-05 12:00:04","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 11:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz-java","2024-03-05 11:53:39","2024-03-05 11:53:37","created",1978589726,"Sorry for the delayed reply. Turns out I didn't have email notifications enabled for the xz-java project.

The problem is that your code lacks `xzOut.close()`.

If you didn't want to close `fos` then `xzOut.finish()` would be the right call. But in this example you want to close `fos` too and `xzOut.close()` does that.","",0,0,"","none","Larhzu",6,"[Bug]: A strange format error in the generated xz file due to spaces","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 11:00:00","IssueCommentEvent","RaymondLam1","tukaani-project/xz-java","2024-03-05 11:58:50","2024-03-05 11:58:49","created",1978598701,"> Sorry for the delayed reply. Turns out I didn't have email notifications enabled for the xz-java project.
> 
> The problem is that your code lacks `xzOut.close()`.
> 
> If you didn't want to close `fos` then `xzOut.finish()` would be the right call. But in this example you want to close `fos` too and `xzOut.close()` does that.

Thanks for your reply, I will try it.","",0,0,"","none","RaymondLam1",6,"[Bug]: A strange format error in the generated xz file due to spaces","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 11:00:00","WatchEvent","RaymondLam1","tukaani-project/xz-java","2024-03-05 11:59:22","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 10:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-03-05 10:18:48","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-05 00:00:00","IssueCommentEvent","bokken","tukaani-project/xz-java","2024-03-05 00:08:39","2024-03-05 00:08:38","created",1977705691,"Having updated the code to both appropriately handle the niceLenLimit in BT4 and adding the bounds check, here are updated benchmarks. This is still Windows 11, but this time an older i7-9850H. I will continue to work on getting results from the 13th Gen Intel(R) Core(TM) i7-1370P listed above.

The benefits still remain, though perhaps a bit more subdued.

JDK 8
```
Benchmark                                             (file)  (preset)  Mode  Cnt      Score      Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3      1.050 ±    1.455  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3      0.990 ±    0.282  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3      0.909 ±    0.033  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3      5.030 ±    0.966  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3      4.943 ±    0.998  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3      3.565 ±    0.323  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3   2488.136 ±  362.787  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3   2737.924 ± 3097.448  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3   2519.283 ±  269.135  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3   5622.677 ±  611.597  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3   5843.140 ±  712.834  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3   5167.348 ±  159.264  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3   1015.869 ±   31.331  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3   1043.607 ±   64.194  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3    985.266 ±  135.448  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3   8714.679 ±  375.658  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3  10698.865 ±  661.517  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3   8009.948 ±  766.887  ms/op
```

JDK 11
```
Benchmark                                             (file)  (preset)  Mode  Cnt      Score      Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3      0.958 ±    0.135  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3      0.995 ±    0.413  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3      0.872 ±    0.287  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3      4.946 ±    0.695  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3      4.737 ±    0.719  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3      3.078 ±    0.142  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3   2573.713 ±  884.641  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3   2601.671 ±   80.804  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3   2538.038 ±   91.440  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3   5735.404 ±  224.716  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3   5943.590 ± 1239.205  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3   5039.090 ±  514.206  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3   1007.470 ±  101.786  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3   1025.208 ±   53.206  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3    948.410 ±   32.021  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3   8843.118 ± 1184.551  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3  10581.770 ±   57.032  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3   8495.813 ± 1967.609  ms/op
```

JDK 21
```
Benchmark                                             (file)  (preset)  Mode  Cnt     Score       Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3     1.089 ┬▒    0.521  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3     0.861 ┬▒    0.304  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3     0.804 ┬▒    0.055  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3     4.712 ┬▒    0.703  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3     4.286 ┬▒    0.793  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3     3.270 ┬▒    6.553  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3  3969.325 ┬▒  812.895  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3  2543.389 ┬▒  938.026  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3  2539.038 ┬▒  703.522  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3  6383.656 ┬▒  141.257  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3  5604.145 ┬▒  428.556  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3  5108.071 ┬▒  357.189  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3  1211.232 ┬▒  425.227  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3  1016.582 ┬▒   61.477  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3   967.770 ┬▒  267.865  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3  9171.859 ┬▒ 1681.746  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3  9864.887 ┬▒  970.370  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3  7410.449 ┬▒  775.903  ms/op
```","",0,0,"","none","bokken",13,"XZ compression improvements by optimizing array pattern matching","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-04 17:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-03-04 17:24:14","1970-01-01 00:00:00","none",0,"","",0,0,"riscv_comment_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-04 17:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-03-04 17:53:45","1970-01-01 00:00:00","none",0,"","",0,0,"riscv_comment_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-04 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 17:14:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 17:40:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-03-04 17:53:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-03-04 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 17:55:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-03-04 16:49:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-03-04 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-03-04 15:01:19","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-03 09:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-03-03 09:08:03","2024-03-03 09:08:04","created",1510219535,"Oops.  Stupid I...","CMakeLists.txt",32,1180,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1157,29 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            // As at now only 64-bit LoongArch is supported.
+            #if !(defined(__loongarch__) && __loongarch_grlen >= 64)
+            #   error LoongArch CRC32 only supported on 64-bit LoongArch
+            #endif
+
+            #include <larchintrin.h>
+
+            int my_crc(int word, int crc)
+            {
+                return __crc_w_w_w(word, crc);
+            }
+            int main(void) { return 0; }
+        ""
+        HAVE_LOONGARCH_CRC32)",32,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-03 09:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-03-03 09:12:28","2024-03-03 09:12:28","created",1510220276,"Done.","src/liblzma/check/crc32_loongarch.h",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","bf0934c8d4c2d550316057cfd97a262c0ef60d17","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)",19,"bf0934c8d4c2d550316057cfd97a262c0ef60d17","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-03 09:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-03-03 09:12:33","2024-03-03 09:12:33","created",1510220294,"Done.","CMakeLists.txt",32,1180,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","bf0934c8d4c2d550316057cfd97a262c0ef60d17","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1157,29 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            // As at now only 64-bit LoongArch is supported.
+            #if !(defined(__loongarch__) && __loongarch_grlen >= 64)
+            #   error LoongArch CRC32 only supported on 64-bit LoongArch
+            #endif
+
+            #include <larchintrin.h>
+
+            int my_crc(int word, int crc)
+            {
+                return __crc_w_w_w(word, crc);
+            }
+            int main(void) { return 0; }
+        ""
+        HAVE_LOONGARCH_CRC32)",32,"bf0934c8d4c2d550316057cfd97a262c0ef60d17","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-03 09:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-03-03 09:08:04","2024-03-03 09:08:04","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-03 09:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-03-03 09:12:29","2024-03-03 09:12:28","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","bf0934c8d4c2d550316057cfd97a262c0ef60d17","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-03 09:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-03-03 09:12:34","2024-03-03 09:12:33","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","bf0934c8d4c2d550316057cfd97a262c0ef60d17","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-02 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:18:34","2024-03-02 13:18:33","created",1974795263,"Thanks for the benchmarking numbers, those easily justify including this feature :)

> Some low-end 64-bit LoongArch CPUs (2K1000 for example) do not support unaligned access, on these CPUs unaligned access will trap and be emulated by the kernel (very slow). So we have to adjust the alignment anyway... I don't have a 2K1000 board for testing though, on my board (3A6000) the alignment adjustment only produces ~1% improvement.

If there are LoongArch CPUs that do not support unaligned access, that is plenty reason to have the code to align the buffer. Thanks for the info!

","",0,0,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",9,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:23:56","2024-03-02 13:23:56","created",1509965809,"It looks like the `target_compile_definitions(liblzma PRIVATE HAVE_LOONGARCH_CRC32)` was accidentally omitted during the simplification. Can this be added back?","CMakeLists.txt",32,1180,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1157,29 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            // As at now only 64-bit LoongArch is supported.
+            #if !(defined(__loongarch__) && __loongarch_grlen >= 64)
+            #   error LoongArch CRC32 only supported on 64-bit LoongArch
+            #endif
+
+            #include <larchintrin.h>
+
+            int my_crc(int word, int crc)
+            {
+                return __crc_w_w_w(word, crc);
+            }
+            int main(void) { return 0; }
+        ""
+        HAVE_LOONGARCH_CRC32)",32,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:01","2024-03-02 13:32:01","created",1509966960,"We don't use variables starting with ""_"" since these type of identifiers are reserved. So perhaps `_crc` could be renamed as `crc_unsigned` or `crc_param` or something better that you can think of :)","src/liblzma/check/crc32_loongarch.h",19,19,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,71 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)",19,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:48","2024-03-02 13:32:48","created",1509967076,"Thanks for remembering this! I had forgotten this was needed in the first round of review","src/liblzma/check/crc32_table.c",12,36,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -26,9 +26,14 @@
 #	define ARM64_CRC32_NO_TABLE 1
 #endif
 
+#if defined(HAVE_LOONGARCH_CRC32)
+#	define LOONGARCH_CRC32_NO_TABLE 1
+#endif
+
 
 #if !defined(HAVE_ENCODERS) && (defined(X86_CLMUL_NO_TABLE) \
-		|| defined(ARM64_CRC32_NO_TABLE_))
+		|| defined(ARM64_CRC32_NO_TABLE_) \
+		|| defined(LOONGARCH_CRC32_NO_TABLE))",12,"e079b80f9ee1df835015db51e5526a50e8987801","e079b80f9ee1df835015db51e5526a50e8987801",0,0,"","","","none"
"2024-03-02 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-03-02 13:23:57","2024-03-02 13:23:56","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-02 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:02","2024-03-02 13:32:01","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-02 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-03-02 13:32:49","2024-03-02 13:32:48","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","e079b80f9ee1df835015db51e5526a50e8987801","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-03-02 12:00:00","ForkEvent","ivq","tukaani-project/xz-embedded","2024-03-02 12:32:30","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-01 11:00:00","WatchEvent","ivq","tukaani-project/xz-embedded","2024-03-01 11:33:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-01 09:00:00","IssueCommentEvent","xry111","tukaani-project/xz","2024-03-01 09:36:12","2024-03-01 09:36:11","created",1972840431,"> Can you provide benchmarks to show the speed increase from this?

10M buffer, repeat 100 times: 0.7116s to 0.1015s
1M buffer, repeat 1000 times: 0.7114s to 0.1002s
100K buffer, repeat 10000 times: 0.7009s to 0.1001s
10K buffer, repeat 100000 times: 0.7009s to 0.1002s
1K buffer, repeat 1000000 times: 0.7016s to 0.1010s
100B buffer, repeat 10000000 times: 0.8410s to 0.1081s
10B buffer, repeat 100000000 times: 1.2315s to 0.2002s

> Specifically, can you show one version with the alignment adjustment in `crc32_arch_optimized()` and one without? I just want to be sure the alignment adjustment code is worth it for LoongArch.

Some low-end 64-bit LoongArch CPUs (2K1000 for example) do not support unaligned access, on these CPUs unaligned access will trap and be emulated by the kernel (very slow).  So we have to adjust the alignment anyway...  I don't have a 2K1000 board for testing though, on my board (3A6000) the alignment adjustment only produces ~1% improvement.","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",8,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-03-01 07:00:00","IssueCommentEvent","xry111","tukaani-project/xz","2024-03-01 07:40:40","2024-03-01 07:40:39","created",1972677846,"> > I'll do it tomorrow.
> 
> Thanks!
> 
> > The specification says 64-bit LoongArch chips shall implement CRC32 instructions, but 32-bit LoongArch chips may lack them (though no 32-bit LoongArch chips have been launched as at now).
> 
> Ok that is great to know. I had not found any references to 32-bit LoongArch chips, so that makes sense. Is it likely that 32-bit chips will be made? Otherwise it will simplify things to just design the code for 64-bit LoongArch and not bother with the runtime checks at all. Future 32-bit LoongArch may need extra compiler flags or a function `__attribute__()` so the code wouldn't be able to work as-is anyway.

It's likely to be made but we are so unsure about some details about it (and whether we need some GCC flags for attributes for it).  So I've modified the code to 64-bit-only and removed runtime detection for now. ","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 17:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 17:35:39","2024-02-29 17:35:38","created",1971631816,"> I'll do it tomorrow.

Thanks!
 
> The specification says 64-bit LoongArch chips shall implement CRC32 instructions, but 32-bit LoongArch chips may lack them (though no 32-bit LoongArch chips have been launched as at now).

Ok that is great to know. I had not found any references to 32-bit LoongArch chips, so that makes sense. Is it likely that 32-bit chips will be made? Otherwise it will simplify things to just design the code for 64-bit LoongArch and not bother with the runtime checks at all. Future 32-bit LoongArch may need extra compiler flags or a function `__attribute__()` so the code wouldn't be able to work as-is anyway.","",0,0,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",6,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 17:00:00","IssueCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:28:28","2024-02-29 17:28:26","created",1971619970,"> Hello! Thanks for the PR. Overall it looks like you did a great job with this.
> 
> Can you provide benchmarks to show the speed increase from this? Specifically, can you show one version with the alignment adjustment in `crc32_arch_optimized()` and one without? I just want to be sure the alignment adjustment code is worth it for LoongArch. It would be great to vary the input buffer size to see how the speed improvements scale.

I'll do it tomorrow.

> Also, how necessary are the runtime detection checks? Are there LoongArch chips that do not have the CRC32 instruction?

The specification says 64-bit LoongArch chips shall implement CRC32 instructions, but 32-bit LoongArch chips may lack them (though no 32-bit LoongArch chips have been launched as at now).","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:19:49","2024-02-29 17:19:49","created",1507930070,"Done.","configure.ac",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1152,6 +1160,45 @@ AS_IF([test ""x$enable_arm64_crc32"" = xyes], [
 	AC_CHECK_FUNCS([getauxval elf_aux_info sysctlbyname])
 ])
 
+# LoongArch Intrinsics define CRC32 functions in larchintrin.h.
+# These are supported by at least GCC and Clang.
+AC_MSG_CHECKING([if LoongArch CRC32 instruction is usable])
+AS_IF([test ""x$enable_loongarch_crc32"" = xno], [
+	AC_MSG_RESULT([no, --disable-loongarch-crc32 was used])
+], [
+	# Set -Werror here because -Wimplicit-function-declaration was
+	# only a warning in GCC <= 13. This does not need to be done
+	# with CMake because tests will attempt to link and the error
+	# will be reported then.
+	OLD_CFLAGS=""$CFLAGS""
+	CFLAGS=""$CFLAGS -Werror""
+
+	AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+#include <larchintrin.h>
+#include <stdint.h>",34,"9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:20:50","2024-02-29 17:20:50","created",1507931307,"Done.","CMakeLists.txt",1,1,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:22:29","2024-02-29 17:22:29","created",1507933169,"`<sys/auxv.h>` does not define `HWCAP_LOONGARCH_*`, it only defines `getauxval()`.

If you still think we should add an `#ifdef` here in case `HWCAP_LOONGARCH_*` is added into `auxv.h` in the future I can add it.","src/liblzma/check/crc32_loongarch.h",23,23,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)",23,"9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:22:51","2024-02-29 17:22:51","created",1507933611,"Done.","src/liblzma/check/crc32_loongarch.h",88,88,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)
+{
+	int32_t crc = (int32_t)~_crc;
+
+	// Align the input buffer because this was shown to be
+	// significantly faster than unaligned accesses.
+	const size_t align_amount = my_min(size,
+			(UNIT_SIZE - (uintptr_t)buf) & (UNIT_SIZE - 1));
+
+	if (align_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf++, crc);
+
+	if (align_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+#if UNIT_SIZE == 8
+	if (align_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	size -= align_amount;
+
+	// Process UNIT_SIZE bytes at a time. The end point is determined by
+	// ignoring the least significant log2(UNIT_SIZE) bits of size to ensure
+	// we do not process past the bounds of the buffer. This guarantees
+	// that limit is a multiple of UNIT_SIZE and is strictly less than size.
+	for (const uint8_t *limit = buf + (size & ~((size_t)UNIT_SIZE - 1));
+			buf < limit; buf += UNIT_SIZE)
+		crc = CRC_UNIT(buf, crc);
+
+	// Process the remaining bytes that are not 8 byte aligned.
+	const size_t remaining_amount = size & (UNIT_SIZE - 1);
+
+#if UNIT_SIZE == 8
+	if (remaining_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	if (remaining_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+	if (remaining_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf, crc);
+
+	return (uint32_t)~crc;
+}
+",88,"9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:22:58","2024-02-29 17:22:58","created",1507933770,"Done.","src/liblzma/check/crc32_loongarch.h",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)
+{
+	int32_t crc = (int32_t)~_crc;
+
+	// Align the input buffer because this was shown to be
+	// significantly faster than unaligned accesses.
+	const size_t align_amount = my_min(size,
+			(UNIT_SIZE - (uintptr_t)buf) & (UNIT_SIZE - 1));
+
+	if (align_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf++, crc);
+
+	if (align_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+#if UNIT_SIZE == 8
+	if (align_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	size -= align_amount;
+
+	// Process UNIT_SIZE bytes at a time. The end point is determined by
+	// ignoring the least significant log2(UNIT_SIZE) bits of size to ensure
+	// we do not process past the bounds of the buffer. This guarantees
+	// that limit is a multiple of UNIT_SIZE and is strictly less than size.
+	for (const uint8_t *limit = buf + (size & ~((size_t)UNIT_SIZE - 1));
+			buf < limit; buf += UNIT_SIZE)
+		crc = CRC_UNIT(buf, crc);
+
+	// Process the remaining bytes that are not 8 byte aligned.",68,"9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:23:46","2024-02-29 17:23:46","created",1507934680,"Done.","configure.ac",1,1,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","dab983cd87f00742f781457fb3abbd91a30a9a2f","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-29 17:29:20","2024-02-29 17:29:20","created",1507941289,"Done.","src/liblzma/check/crc32_loongarch.h",34,34,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","f2c25106a6e6ddf6a300ac900c5d6dd21038aa95","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t",33,"f2c25106a6e6ddf6a300ac900c5d6dd21038aa95","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 17:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-29 17:19:50","2024-02-29 17:19:49","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 17:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-29 17:22:30","2024-02-29 17:22:29","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 17:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-29 17:22:51","2024-02-29 17:22:51","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 17:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-29 17:22:59","2024-02-29 17:22:58","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","9282d42b4b81c271222ab93fe0e6fc8196fa8c0b","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 17:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-29 17:23:47","2024-02-29 17:23:46","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","dab983cd87f00742f781457fb3abbd91a30a9a2f","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 17:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-29 17:29:20","2024-02-29 17:29:20","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","f2c25106a6e6ddf6a300ac900c5d6dd21038aa95","master","5f3d0595296cc3035eae9e7bb6c3ffb1e1267333",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:33:20","2024-02-29 16:33:18","created",1971515848,"Hello! Thanks for the PR. Overall it looks like you did a great job with this.

Can you provide benchmarks to show the speed increase from this? Specifically, can you show one version with the alignment adjustment in `crc32_arch_optimized()` and one without? I just want to be sure the alignment adjustment code is worth it for LoongArch. It would be great to vary the input buffer size to see how the speed improvements scale.

Also, how necessary are the runtime detection checks? Are there LoongArch chips that do not have the CRC32 instruction? ","",0,0,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:34:27","2024-02-29 16:34:28","created",1507869290,"An extra newline is needed here to match the code style. It helps break up the different sections in this file.","configure.ac",3,395,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -393,6 +393,14 @@ AC_ARG_ENABLE([arm64-crc32], AS_HELP_STRING([--disable-arm64-crc32],
 		is detected.]),
 	[], [enable_arm64_crc32=yes])
 ",3,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:41:59","2024-02-29 16:41:59","created",1507879564,"`<stdint.h>` isn't needed in the feature test. It was used in the ARM64 feature test because `__crc32d()` parameters were expected to be `uint32_t` and `uint64_t` (and the return type is `uint32_t`).","configure.ac",34,1178,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1152,6 +1160,45 @@ AS_IF([test ""x$enable_arm64_crc32"" = xyes], [
 	AC_CHECK_FUNCS([getauxval elf_aux_info sysctlbyname])
 ])
 
+# LoongArch Intrinsics define CRC32 functions in larchintrin.h.
+# These are supported by at least GCC and Clang.
+AC_MSG_CHECKING([if LoongArch CRC32 instruction is usable])
+AS_IF([test ""x$enable_loongarch_crc32"" = xno], [
+	AC_MSG_RESULT([no, --disable-loongarch-crc32 was used])
+], [
+	# Set -Werror here because -Wimplicit-function-declaration was
+	# only a warning in GCC <= 13. This does not need to be done
+	# with CMake because tests will attempt to link and the error
+	# will be reported then.
+	OLD_CFLAGS=""$CFLAGS""
+	CFLAGS=""$CFLAGS -Werror""
+
+	AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+#include <larchintrin.h>
+#include <stdint.h>",34,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:44:51","2024-02-29 16:44:51","created",1507883948,"For the Autotools build, the `crc32_loongarch.h` file needs to be added to `src/liblzma/check/Makefile.inc`. Use `crc32_arm64.h` as an example of where to put it :)","configure.ac",1,1,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:46:10","2024-02-29 16:46:10","created",1507886079,"Same reason as `configure.ac`, this include isn't needed","CMakeLists.txt",12,1167,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1156,34 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            #include <larchintrin.h>
+            #include <stdint.h>",12,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:52:14","2024-02-29 16:52:15","created",1507894274,"Extra newline needed before this line for code style.","src/liblzma/check/crc32_loongarch.h",33,33,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t",33,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:55:33","2024-02-29 16:55:34","created",1507898651,"What is the name defined in `<sys/auxv.h>`? Just checking to be sure it doesn't conflict with this name. It would be better to only use the hardcoded value if the correct one from `<sys/auxv.h>` is not defined.","src/liblzma/check/crc32_loongarch.h",23,23,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)",23,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:02","2024-02-29 16:56:02","created",1507899271,"Extra newline needed here.","src/liblzma/check/crc32_loongarch.h",88,88,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)
+{
+	int32_t crc = (int32_t)~_crc;
+
+	// Align the input buffer because this was shown to be
+	// significantly faster than unaligned accesses.
+	const size_t align_amount = my_min(size,
+			(UNIT_SIZE - (uintptr_t)buf) & (UNIT_SIZE - 1));
+
+	if (align_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf++, crc);
+
+	if (align_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+#if UNIT_SIZE == 8
+	if (align_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	size -= align_amount;
+
+	// Process UNIT_SIZE bytes at a time. The end point is determined by
+	// ignoring the least significant log2(UNIT_SIZE) bits of size to ensure
+	// we do not process past the bounds of the buffer. This guarantees
+	// that limit is a multiple of UNIT_SIZE and is strictly less than size.
+	for (const uint8_t *limit = buf + (size & ~((size_t)UNIT_SIZE - 1));
+			buf < limit; buf += UNIT_SIZE)
+		crc = CRC_UNIT(buf, crc);
+
+	// Process the remaining bytes that are not 8 byte aligned.
+	const size_t remaining_amount = size & (UNIT_SIZE - 1);
+
+#if UNIT_SIZE == 8
+	if (remaining_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	if (remaining_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+	if (remaining_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf, crc);
+
+	return (uint32_t)~crc;
+}
+",88,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:54","2024-02-29 16:56:54","created",1507900586,"This comment needs updating to reference `UNIT_SIZE` instead of ""8"".","src/liblzma/check/crc32_loongarch.h",68,68,"","none","JiaT75",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,107 @@
+// SPDX-License-Identifier: 0BSD
+
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc32_loongarch.h
+/// \brief      CRC32 calculation with LoongArch optimization
+//
+//  Authors:    Xi Ruoyao
+//
+///////////////////////////////////////////////////////////////////////////////
+
+
+#ifndef LZMA_CRC32_LOONGARCH_H
+#define LZMA_CRC32_LOONGARCH_H
+
+#include <larchintrin.h>
+#include <sys/auxv.h>
+
+// Defined in section 9.1 of
+// ""Software Development and Build Convention for LoongArch Architectures""
+// (https://github.com/loongson/la-softdev-convention/).  Hard code it
+// instead of including <bits/hwcap.h> for compatibility with Glibc <= 2.37.
+#define HWCAP_LOONGARCH_CRC32 (1 << 6)
+
+#if __loongarch_grlen >= 64
+#  define UNIT_SIZE 8
+#  define CRC_UNIT(buf, crc) __crc_w_d_w((int64_t)aligned_read64le(buf), crc)
+#else
+#  define UNIT_SIZE 4
+#  define CRC_UNIT(buf, crc) __crc_w_w_w((int32_t)aligned_read32le(buf), crc)
+#endif
+
+static uint32_t
+crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t _crc)
+{
+	int32_t crc = (int32_t)~_crc;
+
+	// Align the input buffer because this was shown to be
+	// significantly faster than unaligned accesses.
+	const size_t align_amount = my_min(size,
+			(UNIT_SIZE - (uintptr_t)buf) & (UNIT_SIZE - 1));
+
+	if (align_amount & 1)
+		crc = __crc_w_b_w((int8_t)*buf++, crc);
+
+	if (align_amount & 2) {
+		crc = __crc_w_h_w((int16_t)aligned_read16le(buf), crc);
+		buf += 2;
+	}
+
+#if UNIT_SIZE == 8
+	if (align_amount & 4) {
+		crc = __crc_w_w_w((int32_t)aligned_read32le(buf), crc);
+		buf += 4;
+	}
+#endif
+
+	size -= align_amount;
+
+	// Process UNIT_SIZE bytes at a time. The end point is determined by
+	// ignoring the least significant log2(UNIT_SIZE) bits of size to ensure
+	// we do not process past the bounds of the buffer. This guarantees
+	// that limit is a multiple of UNIT_SIZE and is strictly less than size.
+	for (const uint8_t *limit = buf + (size & ~((size_t)UNIT_SIZE - 1));
+			buf < limit; buf += UNIT_SIZE)
+		crc = CRC_UNIT(buf, crc);
+
+	// Process the remaining bytes that are not 8 byte aligned.",68,"4023849b644a3df3e170cba4a551e11737192447","4023849b644a3df3e170cba4a551e11737192447",0,0,"","","","none"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:34:28","2024-02-29 16:34:27","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:42:00","2024-02-29 16:41:59","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:44:52","2024-02-29 16:44:51","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:46:11","2024-02-29 16:46:10","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:52:15","2024-02-29 16:52:15","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:55:34","2024-02-29 16:55:34","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:03","2024-02-29 16:56:02","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2024-02-29 16:56:55","2024-02-29 16:56:54","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-29 14:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-29 14:47:48","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_nls_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-29 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-29 14:38:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_nls_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,2,"","","","none"
"2024-02-29 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-29 14:47:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2024-02-29 13:00:00","IssuesEvent","ivq","tukaani-project/xz-embedded","2024-02-29 13:57:44","2024-02-29 13:57:43","opened",0,"### Describe the Feature

Thank you for your outstanding work on the project and for completing the RISC-V filter recently! 
However, the RISC-V filter is missing in this repo, xz-embedded.
It would be great to integrate the filter. Is there any plan to do so? I am willing to help.

### Expected Complications

_No response_

### Will I try to implement this new feature?

Yes","",0,0,"","none","ivq",1,"[Feature Request]: RISC-V BCJ filter","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 18:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-28 18:03:11","1970-01-01 00:00:00","none",0,"","",0,0,"memavail","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 18:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-28 18:12:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/memavail","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-28 16:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-28 16:34:30","1970-01-01 00:00:00","none",0,"","",0,0,"xz_memlimit_warnings","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-28 16:36:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.6","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-02-28 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-28 16:34:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-02-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-28 16:19:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-02-28 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-28 16:07:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_memlimit_warnings","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-28 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-28 16:27:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_memlimit_warnings","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-28 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-28 15:52:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_nls_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-28 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-28 15:33:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_nls_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-28 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-28 13:33:25","2024-02-28 13:33:24","created",1968993934,"Hello!

Thank you for the feature request. Currently, we do not have any official benchmark framework for any of the XZ projects. When we develop new features that require benchmarking data, we tend to collect the files with characteristics that best fit that feature (data type, size, entropy, etc.). Often times community members will also help us benchmark since they may have access to machines, data, or ideas that the maintainers do not.

As such, we do not have any plans for a more official, robust, and structured benchmark framework at this time. We unfortunately have a few high priority tasks to attend to first. Eventually, this could be a nice thing to have when we revisit encoder/decoder optimizations to make it easier for the community to help us test various ideas. We would likely maintain a separate repository for this so it could be useful for other .xz implementations.

If you have ideas on good ways to do this or bad things we should avoid, we are always open to suggestions :) . We probably wouldn't want to actually host the benchmark data ourselves due to storage requirements and potential file distribution copyright complexities, but a bring-your-own-data framework could be useful for people. Such a thing may already exist, so we would need to start by surveying what solutions other projects use for something like this. ","",0,0,"","none","JiaT75",83,"[Feature Request]: Is there a real-world benchmark for xz?","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 11:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-28 11:37:11","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_nls_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 10:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-02-28 10:59:53","2024-02-28 10:59:52","created",1968736930,"> Is there anything wrong with it or how much ram I'm supposing to
> give to the process?

I realized only now what made you ask this question. :-( At the default
verbosity level, the message only tells what the limit is but not how
much is needed. One needs -vv to see what would actually be required
but there is no hint about the need for -vv.

> As a user I would not like to see that by default, but in verbose
> mode or debug mode. But it is a matter of fact that putting that in
> verbose/debug mode means that a lot of users won't discover that, and
> then not increase the memory limit if they need it.
> 
> So for me is fine as-is.

You summarized the problem well. The on-going thread on xz-devel might
be worth reading too about the identified pros and cons of different
options, including the problems with the current behavior:

***@***.***/msg00655.html

Threaded compression has been supported in for nine years but only now
is the threaded mode enabled by default. Thus more people are seeing
these messages now.

Historically, memory usage limits in xz have been a controversial
topic. Threaded compression with automatic number of threads and
threaded decompression with automatic or user-defined number of threads
require a memory limit, otherwise the memory usage could become
ridiculous in some cases. That could cause security issues (denial of
service).

The current automatic limit is 25 % of total RAM (in 32-bit xz
executables also at most 1400 MiB). Some people think it's a bit too
low, some think it's a bit too high.

There is also a Linux-specific suggestion of using MemAvailable from
/proc/meminfo to determine how much memory could be used. For example,
using 80 % of MemAvailable. That could often allow more than 25 % of
RAM. This idea wasn't discussed and polished for XZ Utils 5.6.0 though
but it likely should be revisited later. And if done on Linux, a
similar thing likely should be done on a few other OSes too.

> I opened the issue because in my opinion the required memory is
> too high. 

While I don't know about your use case, in general it can be worth
considering if -9 is the best compression preset to use. -9 uses 64 MiB
dictionary and 192 MiB block size. Perhaps --block-size=96MiB would
give good enough compression while allowing more threads and thus more
speed if the file size isn't huge (gigabytes).

Or using the default -6 (8 MiB dict, 24 MiB blocks) or a bit higher -7
(16 MiB dict, 48 MiB blocks) to get better parallelization with
medium-sized files at the expense of worse compression.

The default block_size = 3 * dict_size is somewhat arbitrary. It's a
compromise between compression ratio and memory usage. If memory usage
doesn't matter, block_size = dict_size is the best. Multiplier in the
range 1-4 is likely a good choice in typical cases.

xz --help includes a warning about memory usage with presets 7-9. When
it was written, computers with 256-512 MiB RAM weren't obsolete. With
threading that warning has some point again.

Note that -9 and its 64 MiB dictionary isn't the maximum possible
compression setting. It's just the highest preset level. The encoder
supports up to 1536 MiB. Some use 256 MiB together with a fast preset
because *with some types of data* it can be both faster than -9 and
compress the same (or even better):

    xz --lzma2=preset=1,dict=256MiB

So it's about understanding the use case and doing some experimenting.

> I'd suggest to put a link or an explanation about why the provided
> memory limit is not enough. That would avoid a lot of tickets here, I
> think.

I recognize that there is a problem and it could be documented
somewhere and perhaps the message from xz should be clearer too. If the
thread count reduction was shown at only -vv then it likely would be
clearer already except that fewer people would be aware of the reduced
thread count. Right now I don't know what is the best solution. It
might be that in the short term the message is put behind -v or -vv to
solve one set of problems and the solution is tweaked later.

Thanks!
","",0,0,"","none","Larhzu",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","closed",0,"","[]",5,"NONE","2024-02-28 08:21:38","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 08:00:00","IssueCommentEvent","asarubbo","tukaani-project/xz","2024-02-28 08:21:40","2024-02-28 08:21:38","created",1968455520,"> Another user reported this on the mailing list, so we already started considering different options. As a user, would you rather see the number of threads actually used in verbose mode (`-v`) or debug mode (`-vv`)? We are all in agreement that this message should not be displayed by default :)

As a user I would not like to see that by default, but in verbose mode or debug mode. But it is a matter of fact that putting that in verbose/debug mode means that a lot of users won't discover that, and then not increase the memory limit if they need it.

So for me is fine as-is.

I opened the issue because in my opinion the required memory is too high. But given the numbers given by @Larhzu I think there is no issue on my side, but since other users may open a ticket for that I'd suggest to put a link or an explanation about why the provided memory limit is not enough. That would avoid a lot of tickets here, I think.","",0,0,"","none","asarubbo",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","closed",0,"","[]",4,"NONE","2024-02-28 08:21:38","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-28 08:00:00","IssuesEvent","asarubbo","tukaani-project/xz","2024-02-28 08:21:39","2024-02-28 08:21:39","closed",0,"### Describe the bug

Since few days I updated to 5.6.0.

When I try to compress text I always get:

```
xz: Reduced the number of threads from 64 to X to not exceed the memory usage limit of .. MiB
```

So to use threads I increased the memory limit around 3GB but still I get the message.

As a POC I did:
```
echo ""a"" > file
for i in {1..64} ; do echo $i ; xz -k -f -z -9 -T $i -M 3000000000 file ; done
```
And I discovered that with `i=3` it reduces threads from `i` to 2

`xz -H` says that `-M` accepts the LIMIT in bytes, so 3000000000 are 3GB of ram.

Is there anything wrong with it or how much ram I'm supposing to give to the process? 




### Version

5.6.0

### Operating System

Gentoo Linux

### Relevant log output

_No response_","",0,0,"","none","asarubbo",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","closed",0,"","[]",4,"NONE","2024-02-28 08:21:38","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 17:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-02-27 17:13:45","2024-02-27 17:13:44","created",1967203067,"> As a side note, with -M 30000000000 (30GB) I can run until 22 threads
> without issues.
> 
> With -M 90000000000 (90GB) I can run it with 64 threads without
> issues.

Try adding `-vv` to the command line. It will show some information
about memory usage.

With `-9` the _compressor_ in threaded mode needs 1250 MiB per thread. A
new thread is started every 192 MiB of uncompressed input (3 * 64 MiB
where 64 MiB is the dictionary size at `-9`). So if the input file isn't
huge, not many threads will be actually used.

With lower presets memory usage goes down and threads are started more
frequently. For example, `-6` starts a new thread every 24 MiB of input
by default.
","",0,0,"","none","Larhzu",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-27 16:53:48","2024-02-27 16:53:47","created",1967105982,"Hello!

Thanks for the bug report. The cause of this is because in 5.6.0 we made the default compression mode multi threaded. By default, xz will try to use the number of cores to determine how many threads to use when compressing/decompressing. If there is not enough memory to support this many threads, it will reduce the number of threads. Showing this as a warning message made more sense before because multi threading was not the default.

To answer your question, the amount of memory required per thread with default options is the block size * 2 + LZMA2 dictionary size. Block size is determined by 3 * LZMA2 dictionary size or a minimum of 1 MiB. So the amount of memory you give to xz depends on how many threads you want to be used. More threads just means faster compression, not better compression ratio. For best compression ratio, use single threaded mode (`-T1`).

Another user reported this on the mailing list, so we already started considering different options. As a user, would you rather see the number of threads actually used in verbose mode (`-v`) or debug mode (`-vv`)? We are all in agreement that this message should not be displayed by default :)","",0,0,"","none","JiaT75",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-27 15:48:22","1970-01-01 00:00:00","none",0,"","",0,0,"xz_memlimit_warnings","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 15:00:00","IssueCommentEvent","asarubbo","tukaani-project/xz","2024-02-27 15:21:53","2024-02-27 15:21:52","created",1966803050,"As a side note, with -M 30000000000 (30GB) I can run until 22 threads without issues.

With -M 90000000000 (90GB) I can run it with 64 threads without issues.","",0,0,"","none","asarubbo",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 15:00:00","IssuesEvent","asarubbo","tukaani-project/xz","2024-02-27 15:16:43","2024-02-27 15:16:41","opened",0,"### Describe the bug

Since few days I updated to 5.6.0.

When I try to compress text I always get:

```
xz: Reduced the number of threads from 64 to X to not exceed the memory usage limit of .. MiB
```

So to use threads I increased the memory limit around 3GB but still I get the message.

As a POC I did:
```
echo ""a"" > a
for i in {1..64} ; do echo $i ; xz -k -f -z -9 -T $i -M 3000000000 a ; done
```
And I discovered that with `i=3` it reduces threads from `i` to 2

`xz -H` says that `-M` accepts the LIMIT in bytes, so 3000000000 are 3GB of ram.

Is there anything wrong with it or how much ram I'm supposing to give to the process? 




### Version

5.6.0

### Operating System

Gentoo Linux

### Relevant log output

_No response_","",0,0,"","none","asarubbo",89,"[Bug]: xz: Reduced the number of threads from ... to not exceed the memory usage limit of ... MiB","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 12:00:00","IssueCommentEvent","hsk17","tukaani-project/xz","2024-02-27 12:49:18","2024-02-27 12:49:17","created",1966474091,"ok, it is not urgent for me.
thanks for your elaboration on sandbox and the SYS_landlock_... calls.","",0,0,"","none","hsk17",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",8,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-27 12:24:36","2024-02-27 12:24:35","created",1966432482,"> any road map / time line, when a release containing the fix could be available?

We don't have an exact date yet for the next release (5.6.1) since we want to wait for more possible bug reports to come in. It should only be a few weeks though :)

For this problem, if you need to use the 5.6.0 release you can just add `--disable-sandbox` to the `configure` command. You will not be missing out on the sandbox feature unnecessarily because unfortunately your system cannot support this feature until your system call definitions include `SYS_landlock_create_ruleset` and `SYS_landlock_restrict_self`.","",0,0,"","none","JiaT75",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-27 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-02-27 12:29:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-27 05:00:00","WatchEvent","HeavenVolkoff","tukaani-project/xz","2024-02-27 05:40:27","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-26 21:07:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 17:00:00","IssueCommentEvent","hsk17","tukaani-project/xz","2024-02-26 17:20:59","2024-02-26 17:20:58","created",1964694453,"any road map / time line, when a release containing the fix could be available?","",0,0,"","none","hsk17",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",6,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 17:00:00","IssueCommentEvent","hsk17","tukaani-project/xz","2024-02-26 17:17:10","2024-02-26 17:17:09","created",1964684590,"yes,  ""./autogen.sh;./configure;make;make check"" successful :-)

thanks for the quick resolution","",0,0,"","none","hsk17",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-26 15:11:55","1970-01-01 00:00:00","none",0,"","",0,0,"sandbox_build_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-26 15:30:21","2024-02-26 15:30:19","created",1964425025,"Added a [commit to master](https://github.com/tukaani-project/xz/commit/328c52da8a2bbb81307644efdb58db2c422d9ba7) for this. Let us know if this solves the problem!","",0,0,"","none","JiaT75",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2024-02-26 15:36:05","2024-02-26 15:36:04","closed",0,"## Pull request checklist

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
The RISC-V filter option should be listed in the man page but not.


## What is the new behavior?
List the RISC-V filter.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No


## Other information

The translation is not handled yet.
Currently running po4a/update-po upon commit 5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7 generates changes of over 455 lines and I'm sure sure if they are really needed. Plus, I'm not familiar with the po4a tools so help is needed. ","",0,0,"","none","ivq",87,"xz: Add missing RISC-V on the filter list in the man page","[]","closed",0,"","[]",1,"NONE","2024-02-26 15:36:04","2024-02-26 15:36:04","","[]","[]","fix_riscv_filter_doc","2a76c3dd1084561e819df9e3e6b1606fa0c79e0b","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","JiaT75",0,0,1,3,1,1,"",0,"","",0,0,"","","","none"
"2024-02-26 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 15:41:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 15:36:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-02-26 13:16:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-26 12:02:10","2024-02-26 12:02:09","created",1963984783,"This Issue was duplicated [here](https://github.com/tukaani-project/xz/issues/88), so you can follow that thread if you want more information about how we are addressing this :)","",0,0,"","none","JiaT75",84,"[Bug]:  5.6.0 build issue","['bug']","closed",0,"","[]",4,"NONE","2024-02-25 02:52:43","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 12:07:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 11:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-26 11:49:04","2024-02-26 11:49:03","created",1963960663,"Hello! Thanks for the bug report and build logs. Luckily, the workaround for this is very simple. With Autotools build, you can pass the flag `--disable-sandbox` to `configure`. With CMake, pass `-DENABLE_SANDBOX=OFF`.

The underlying problem here is that we assumed having the `linux/landlock.h` header file meant that the system would also have `SYS_landlock_create_ruleset` and `SYS_landlock_restrict_self` defined in `sys/syscall.h`. So the fix on our side is to add checks for these system calls before setting `HAVE_LINUX_LANDLOCK_H` during configurations. ","",0,0,"","none","JiaT75",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-26 11:57:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-26 09:00:00","PullRequestReviewCommentEvent","xen0n","tukaani-project/xz","2024-02-26 09:47:54","2024-02-26 09:50:25","created",1502313509,"```suggestion
        # Check for LoongArch CRC32 instruction runtime detection.
```","CMakeLists.txt",25,1180,"","none","xen0n",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","7cb19f953abfac34bb4bea643fe95f8d502a8f90","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1156,34 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            #include <larchintrin.h>
+            #include <stdint.h>
+
+            int my_crc(int word, int crc)
+            {
+                return __crc_w_w_w(word, crc);
+            }
+            int main(void) { return 0; }
+        ""
+        HAVE_LOONGARCH_CRC32)
+
+    if(HAVE_LOONGARCH_CRC32)
+        target_compile_definitions(liblzma PRIVATE HAVE_LOONGARCH_CRC32)
+
+        # Check for ARM64 CRC32 instruction runtime detection.",25,"7cb19f953abfac34bb4bea643fe95f8d502a8f90","7cb19f953abfac34bb4bea643fe95f8d502a8f90",0,0,"","","","none"
"2024-02-26 09:00:00","PullRequestReviewCommentEvent","xry111","tukaani-project/xz","2024-02-26 09:52:50","2024-02-26 09:52:50","created",1502320427,"Oops, stupid copy-pasto.  Fixed.","CMakeLists.txt",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1156,6 +1156,34 @@ if(ALLOW_ARM64_CRC32)
     endif()
 endif()
 
+# LoongArch CRC32 Intrinsics are in larchintrin.h.
+# These are supported by at least GCC and Clang.
+option(ALLOW_LOONGARCH_CRC32 ""Allow LoongArch CRC32 instruction if \
+supported by the system"" ON)
+
+if(ALLOW_LOONGARCH_CRC32)
+    check_c_source_compiles(""
+            #include <larchintrin.h>
+            #include <stdint.h>
+
+            int my_crc(int word, int crc)
+            {
+                return __crc_w_w_w(word, crc);
+            }
+            int main(void) { return 0; }
+        ""
+        HAVE_LOONGARCH_CRC32)
+
+    if(HAVE_LOONGARCH_CRC32)
+        target_compile_definitions(liblzma PRIVATE HAVE_LOONGARCH_CRC32)
+
+        # Check for ARM64 CRC32 instruction runtime detection.",25,"4023849b644a3df3e170cba4a551e11737192447","7cb19f953abfac34bb4bea643fe95f8d502a8f90",0,0,"","","","none"
"2024-02-26 09:00:00","WatchEvent","emtee40","tukaani-project/xz","2024-02-26 09:02:08","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 09:00:00","WatchEvent","collinfunk","tukaani-project/xz","2024-02-26 09:17:17","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 09:00:00","PullRequestReviewEvent","xen0n","tukaani-project/xz","2024-02-26 09:50:25","2024-02-26 09:50:24","created",0,"","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","7cb19f953abfac34bb4bea643fe95f8d502a8f90","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-26 09:00:00","PullRequestReviewEvent","xen0n","tukaani-project/xz","2024-02-26 09:50:25","2024-02-26 09:50:24","created",0,"","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","7cb19f953abfac34bb4bea643fe95f8d502a8f90","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-26 09:00:00","PullRequestReviewEvent","xry111","tukaani-project/xz","2024-02-26 09:52:50","2024-02-26 09:52:50","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","4023849b644a3df3e170cba4a551e11737192447","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2024-02-26 07:00:00","IssueCommentEvent","xry111","tukaani-project/xz","2024-02-26 07:48:40","2024-02-26 07:48:38","created",1963500096,"Removed tabs from CMakeLists.txt.","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-26 01:00:00","IssueCommentEvent","abcfy2","tukaani-project/xz","2024-02-26 01:47:55","2024-02-26 01:47:54","created",1963180052,"Seems here. I use musl.cc `x86_64-linux-musl` toolchain.

```txt
XZ Utils 5.6.0

System type:
checking build system type... x86_64-pc-linux-gnu
checking host system type... x86_64-pc-linux-musl

Configure options:
checking if debugging code should be compiled... no
checking which encoders to build... lzma1 lzma2 delta x86 powerpc ia64 arm armthumb arm64 sparc riscv
checking which decoders to build... lzma1 lzma2 delta x86 powerpc ia64 arm armthumb arm64 sparc riscv
checking which match finders to build... hc3 hc4 bt2 bt3 bt4
checking which integrity checks to build... crc32 crc64 sha256
checking if external SHA-256 should be used... no
checking if MicroLZMA support should be built... yes
checking if .lz (lzip) decompression support should be built... yes
checking if assembler optimizations should be used... no
checking if small size is preferred over speed... no
checking if threading support is wanted... yes, posix
checking how much RAM to assume if the real amount is unknown... 128 MiB
checking if sandboxing should be used... maybe (autodetect)

checking for a shell that conforms to POSIX... /bin/bash

Initializing Automake:
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for x86_64-linux-musl-strip... x86_64-linux-musl-strip
checking for a race-free mkdir -p... /usr/bin/mkdir -p
checking for gawk... no
checking for mawk... mawk
checking whether make sets $(MAKE)... yes
checking whether make supports nested variables... yes
checking whether ln -s works... yes
checking whether make supports the include directive... yes (GNU style)
checking for x86_64-linux-musl-gcc... x86_64-linux-musl-gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables...
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether the compiler supports GNU C... yes
checking whether x86_64-linux-musl-gcc accepts -g... yes
checking for x86_64-linux-musl-gcc option to enable C11 features... none needed
checking whether x86_64-linux-musl-gcc understands -c and -o together... yes
checking dependency style of x86_64-linux-musl-gcc... gcc3
checking dependency style of x86_64-linux-musl-gcc... gcc3
checking for stdio.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for strings.h... yes
checking for sys/stat.h... yes
checking for sys/types.h... yes
checking for unistd.h... yes
checking for wchar.h... yes
checking for minix/config.h... no
checking for sys/cdefs.h... no
checking whether it is safe to define __EXTENSIONS__... yes
checking whether _XOPEN_SOURCE should be defined... no
checking for a sed that does not truncate output... /usr/bin/sed
checking how to run the C preprocessor... x86_64-linux-musl-gcc -E
checking for egrep -e... /usr/bin/grep -E

POSIX threading support:
checking whether x86_64-linux-musl-gcc is Clang... no
checking whether pthreads work with ""-pthread"" and ""-lpthread""... yes
checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE
checking whether more special flags are required for pthreads... no
checking for PTHREAD_PRIO_INHERIT... yes
checking for pthread_condattr_setclock... yes

Initializing Libtool:
checking how to print strings... printf
checking for a sed that does not truncate output... (cached) /usr/bin/sed
checking for grep that handles long lines and -e... /usr/bin/grep
checking for egrep... /usr/bin/grep -E
checking for fgrep... /usr/bin/grep -F
checking for ld used by x86_64-linux-musl-gcc... /cross_root/x86_64-linux-musl/bin/ld
checking if the linker (/cross_root/x86_64-linux-musl/bin/ld) is GNU ld... yes
checking for BSD- or MS-compatible name lister (nm)... /cross_root/bin/x86_64-linux-musl-nm -B
checking the name lister (/cross_root/bin/x86_64-linux-musl-nm -B) interface... BSD nm
checking the maximum length of command line arguments... 1572864
checking how to convert x86_64-pc-linux-gnu file names to x86_64-pc-linux-musl format... func_convert_file_noop
checking how to convert x86_64-pc-linux-gnu file names to toolchain format... func_convert_file_noop
checking for /cross_root/x86_64-linux-musl/bin/ld option to reload object files... -r
checking for x86_64-linux-musl-file... no
checking for file... file
checking for x86_64-linux-musl-objdump... x86_64-linux-musl-objdump
checking how to recognize dependent libraries... pass_all
checking for x86_64-linux-musl-dlltool... no
checking for dlltool... no
checking how to associate runtime and link libraries... printf %s\n
checking for x86_64-linux-musl-ar... x86_64-linux-musl-ar
checking for archiver @FILE support... @
checking for x86_64-linux-musl-strip... (cached) x86_64-linux-musl-strip
checking for x86_64-linux-musl-ranlib... x86_64-linux-musl-ranlib
checking command to parse /cross_root/bin/x86_64-linux-musl-nm -B output from x86_64-linux-musl-gcc object... ok
checking for sysroot... no
checking for a working dd... /usr/bin/dd
checking how to truncate binary pipes... /usr/bin/dd bs=4096 count=1
checking for x86_64-linux-musl-mt... no
checking for mt... no
checking if : is a manifest tool... no
checking for dlfcn.h... yes
checking for objdir... .libs
checking if x86_64-linux-musl-gcc supports -fno-rtti -fno-exceptions... no
checking for x86_64-linux-musl-gcc option to produce PIC... -fPIC -DPIC
checking if x86_64-linux-musl-gcc PIC flag -fPIC -DPIC works... yes
checking if x86_64-linux-musl-gcc static flag -static works... yes
checking if x86_64-linux-musl-gcc supports -c -o file.o... yes
checking if x86_64-linux-musl-gcc supports -c -o file.o... (cached) yes
checking whether the x86_64-linux-musl-gcc linker (/cross_root/x86_64-linux-musl/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for x86_64-linux-musl-windres... no
checking for windres... no
checking if library symbol versioning should be used... no

Initializing gettext:
checking whether NLS is requested... yes
checking for msgfmt... no
checking for gmsgfmt... :
checking for xgettext... no
checking for msgmerge... no
checking for ld... /cross_root/x86_64-linux-musl/bin/ld -m elf_x86_64
checking if the linker (/cross_root/x86_64-linux-musl/bin/ld -m elf_x86_64) is GNU ld... yes
checking for shared library run path origin... done
checking 32-bit host C ABI... no
checking for ELF binary format... yes
checking for the common suffixes of directories in the library search path... lib,lib,lib64
checking for CFPreferencesCopyAppValue... no
checking for CFLocaleCopyPreferredLanguages... no
checking for GNU gettext in libc... yes
checking whether to use NLS... yes
checking where the gettext function comes from... libc

System headers and functions:
checking for fcntl.h... yes
checking for limits.h... yes
checking for sys/time.h... yes
checking for immintrin.h... yes
checking for cpuid.h... yes
checking for _Bool... yes
checking for stdbool.h that conforms to C99 or later... yes
checking for uint8_t... yes
checking for uint16_t... yes
checking for int32_t... yes
checking for uint32_t... yes
checking for int64_t... yes
checking for uint64_t... yes
checking for uintptr_t... yes
checking size of size_t... 8
checking for struct stat.st_atim.tv_nsec... yes
checking for struct stat.st_atimespec.tv_nsec... no
checking for struct stat.st_atimensec... no
checking for struct stat.st_uatime... no
checking for struct stat.st_atim.st__tim.tv_nsec... no
checking for x86_64-linux-musl-gcc option to enable large file support... none needed
checking whether byte ordering is bigendian... no
checking if __attribute__((__constructor__)) can be used... yes
checking if __attribute__((__ifunc__())) can be used... no
checking for x86_64-linux-musl-gcc options needed to detect all undeclared functions... none needed
checking for getopt.h... yes
checking for getopt_long... yes
checking whether optreset is declared... yes
checking for library containing clock_gettime... none required
checking for clock_gettime... yes
checking whether CLOCK_MONOTONIC is declared... yes
checking for futimens... yes
checking for posix_fadvise... yes
checking whether program_invocation_name is declared... yes
checking if __builtin_bswap16/32/64 are supported... yes
checking if unaligned memory access should be used... yes
checking if unsafe type punning should be used... no
checking if __builtin_assume_aligned is supported... yes
checking for sys/param.h... yes
checking how to detect the amount of physical memory... sysconf
checking for sys/param.h... (cached) yes
checking how to detect the number of available CPU cores... sched_getaffinity
checking whether mbrtowc and mbstate_t are properly declared... yes
checking for wcwidth... yes
checking whether _mm_movemask_epi8 is declared... yes
checking if _mm_clmulepi64_si128 is usable... yes
checking if ARM64 CRC32 instruction is usable... no
checking for cap_rights_limit... no
checking for pledge... no
checking for linux/landlock.h... yes

GCC extensions:
checking whether the -Werror option is usable... yes
checking for simple visibility declarations... yes
checking if x86_64-linux-musl-gcc accepts -Wall... yes
checking if x86_64-linux-musl-gcc accepts -Wextra... yes
checking if x86_64-linux-musl-gcc accepts -Wvla... yes
checking if x86_64-linux-musl-gcc accepts -Wformat=2... yes
checking if x86_64-linux-musl-gcc accepts -Winit-self... yes
checking if x86_64-linux-musl-gcc accepts -Wmissing-include-dirs... yes
checking if x86_64-linux-musl-gcc accepts -Wshift-overflow=2... yes
checking if x86_64-linux-musl-gcc accepts -Wstrict-overflow=3... yes
checking if x86_64-linux-musl-gcc accepts -Walloc-zero... yes
checking if x86_64-linux-musl-gcc accepts -Wduplicated-cond... yes
checking if x86_64-linux-musl-gcc accepts -Wfloat-equal... yes
checking if x86_64-linux-musl-gcc accepts -Wundef... yes
checking if x86_64-linux-musl-gcc accepts -Wshadow... yes
checking if x86_64-linux-musl-gcc accepts -Wpointer-arith... yes
checking if x86_64-linux-musl-gcc accepts -Wbad-function-cast... yes
checking if x86_64-linux-musl-gcc accepts -Wwrite-strings... yes
checking if x86_64-linux-musl-gcc accepts -Wdate-time... yes
checking if x86_64-linux-musl-gcc accepts -Wsign-conversion... yes
checking if x86_64-linux-musl-gcc accepts -Wfloat-conversion... yes
checking if x86_64-linux-musl-gcc accepts -Wlogical-op... yes
checking if x86_64-linux-musl-gcc accepts -Waggregate-return... yes
checking if x86_64-linux-musl-gcc accepts -Wstrict-prototypes... yes
checking if x86_64-linux-musl-gcc accepts -Wold-style-definition... yes
checking if x86_64-linux-musl-gcc accepts -Wmissing-prototypes... yes
checking if x86_64-linux-musl-gcc accepts -Wmissing-declarations... yes
checking if x86_64-linux-musl-gcc accepts -Wredundant-decls... yes
checking if x86_64-linux-musl-gcc accepts -Wc99-compat... no
checking if x86_64-linux-musl-gcc accepts -Wc11-extensions... no
checking if x86_64-linux-musl-gcc accepts -Wc2x-compat... no
checking if x86_64-linux-musl-gcc accepts -Wc2x-extensions... no
checking if x86_64-linux-musl-gcc accepts -Wpre-c2x-compat... no
checking if x86_64-linux-musl-gcc accepts -Warray-bounds-pointer-arithmetic... no
checking if x86_64-linux-musl-gcc accepts -Wassign-enum... no
checking if x86_64-linux-musl-gcc accepts -Wconditional-uninitialized... no
checking if x86_64-linux-musl-gcc accepts -Wdocumentation... no
checking if x86_64-linux-musl-gcc accepts -Wduplicate-enum... no
checking if x86_64-linux-musl-gcc accepts -Wempty-translation-unit... no
checking if x86_64-linux-musl-gcc accepts -Wflexible-array-extensions... no
checking if x86_64-linux-musl-gcc accepts -Wmissing-variable-declarations... no
checking if x86_64-linux-musl-gcc accepts -Wnewline-eof... no
checking if x86_64-linux-musl-gcc accepts -Wshift-sign-overflow... no
checking if x86_64-linux-musl-gcc accepts -Wstring-conversion... no

checking that generated files are newer than configure... done
configure: creating ./config.status
config.status: creating Makefile
config.status: creating po/Makefile.in
config.status: creating lib/Makefile
config.status: creating src/Makefile
config.status: creating src/liblzma/Makefile
config.status: creating src/liblzma/api/Makefile
config.status: creating src/xz/Makefile
config.status: creating src/xzdec/Makefile
config.status: creating src/lzmainfo/Makefile
config.status: creating src/scripts/Makefile
config.status: creating tests/Makefile
config.status: creating debug/Makefile
config.status: creating src/scripts/xzdiff
config.status: creating src/scripts/xzgrep
config.status: creating src/scripts/xzmore
config.status: creating src/scripts/xzless
config.status: creating config.h
config.status: executing depfiles commands
config.status: executing libtool commands
config.status: executing po-directories commands
config.status: creating po/POTFILES
config.status: creating po/Makefile
config.status: executing build-to-host commands
make  all-recursive
make[1]: Entering directory '/usr/src/xz-v5.6.0'
Making all in src
make[2]: Entering directory '/usr/src/xz-v5.6.0/src'
Making all in liblzma
make[3]: Entering directory '/usr/src/xz-v5.6.0/src/liblzma'
Making all in api
make[4]: Entering directory '/usr/src/xz-v5.6.0/src/liblzma/api'
make[4]: Nothing to be done for 'all'.
make[4]: Leaving directory '/usr/src/xz-v5.6.0/src/liblzma/api'
make[4]: Entering directory '/usr/src/xz-v5.6.0/src/liblzma'
  CC       liblzma_la-tuklib_physmem.lo
  CC       liblzma_la-tuklib_cpucores.lo
  CC       liblzma_la-common.lo
  CC       liblzma_la-block_util.lo
  CC       liblzma_la-easy_preset.lo
  CC       liblzma_la-filter_common.lo
  CC       liblzma_la-hardware_physmem.lo
  CC       liblzma_la-index.lo
  CC       liblzma_la-stream_flags_common.lo
  CC       liblzma_la-string_conversion.lo
  CC       liblzma_la-vli_size.lo
  CC       liblzma_la-hardware_cputhreads.lo
  CC       liblzma_la-outqueue.lo
  CC       liblzma_la-alone_encoder.lo
  CC       liblzma_la-block_buffer_encoder.lo
  CC       liblzma_la-block_encoder.lo
  CC       liblzma_la-block_header_encoder.lo
  CC       liblzma_la-easy_buffer_encoder.lo
  CC       liblzma_la-easy_encoder.lo
  CC       liblzma_la-easy_encoder_memusage.lo
  CC       liblzma_la-filter_buffer_encoder.lo
  CC       liblzma_la-filter_encoder.lo
  CC       liblzma_la-filter_flags_encoder.lo
  CC       liblzma_la-index_encoder.lo
  CC       liblzma_la-stream_buffer_encoder.lo
  CC       liblzma_la-stream_encoder.lo
  CC       liblzma_la-stream_flags_encoder.lo
  CC       liblzma_la-vli_encoder.lo
  CC       liblzma_la-stream_encoder_mt.lo
  CC       liblzma_la-microlzma_encoder.lo
  CC       liblzma_la-alone_decoder.lo
  CC       liblzma_la-auto_decoder.lo
  CC       liblzma_la-block_buffer_decoder.lo
  CC       liblzma_la-block_decoder.lo
  CC       liblzma_la-block_header_decoder.lo
  CC       liblzma_la-easy_decoder_memusage.lo
  CC       liblzma_la-file_info.lo
  CC       liblzma_la-filter_buffer_decoder.lo
  CC       liblzma_la-filter_decoder.lo
  CC       liblzma_la-filter_flags_decoder.lo
  CC       liblzma_la-index_decoder.lo
  CC       liblzma_la-index_hash.lo
  CC       liblzma_la-stream_buffer_decoder.lo
  CC       liblzma_la-stream_decoder.lo
  CC       liblzma_la-stream_flags_decoder.lo
  CC       liblzma_la-vli_decoder.lo
  CC       liblzma_la-stream_decoder_mt.lo
  CC       liblzma_la-microlzma_decoder.lo
  CC       liblzma_la-lzip_decoder.lo
  CC       liblzma_la-check.lo
  CC       liblzma_la-crc32_table.lo
  CC       liblzma_la-crc32_fast.lo
  CC       liblzma_la-crc64_table.lo
  CC       liblzma_la-crc64_fast.lo
  CC       liblzma_la-sha256.lo
  CC       liblzma_la-lz_encoder.lo
  CC       liblzma_la-lz_encoder_mf.lo
  CC       liblzma_la-lz_decoder.lo
  CC       liblzma_la-lzma_encoder_presets.lo
  CC       liblzma_la-lzma_encoder.lo
  CC       liblzma_la-lzma_encoder_optimum_fast.lo
  CC       liblzma_la-lzma_encoder_optimum_normal.lo
  CC       liblzma_la-fastpos_table.lo
  CC       liblzma_la-lzma_decoder.lo
  CC       liblzma_la-lzma2_encoder.lo
  CC       liblzma_la-lzma2_decoder.lo
  CC       liblzma_la-price_table.lo
  CC       liblzma_la-delta_common.lo
  CC       liblzma_la-delta_encoder.lo
  CC       liblzma_la-delta_decoder.lo
  CC       liblzma_la-simple_coder.lo
  CC       liblzma_la-simple_encoder.lo
  CC       liblzma_la-simple_decoder.lo
  CC       liblzma_la-x86.lo
  CC       liblzma_la-powerpc.lo
  CC       liblzma_la-ia64.lo
  CC       liblzma_la-arm.lo
  CC       liblzma_la-armthumb.lo
  CC       liblzma_la-arm64.lo
  CC       liblzma_la-sparc.lo
  CC       liblzma_la-riscv.lo
  PC       liblzma.pc
  CCLD     liblzma.la
make[4]: Leaving directory '/usr/src/xz-v5.6.0/src/liblzma'
make[3]: Leaving directory '/usr/src/xz-v5.6.0/src/liblzma'
Making all in xzdec
make[3]: Entering directory '/usr/src/xz-v5.6.0/src/xzdec'
  CC       xzdec-xzdec.o
  CC       xzdec-tuklib_progname.o
  CC       xzdec-tuklib_exit.o
xzdec.c: In function ‘sandbox_enter’:
xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
  329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
  349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
make[3]: *** [Makefile:606: xzdec-xzdec.o] Error 1
make[3]: *** Waiting for unfinished jobs....
make[3]: Leaving directory '/usr/src/xz-v5.6.0/src/xzdec'
make[2]: *** [Makefile:427: all-recursive] Error 1
make[2]: Leaving directory '/usr/src/xz-v5.6.0/src'
make[1]: *** [Makefile:597: all-recursive] Error 1
make[1]: Leaving directory '/usr/src/xz-v5.6.0'
make: *** [Makefile:487: all] Error 2
```","",0,0,"","none","abcfy2",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 21:00:00","IssueCommentEvent","bokken","tukaani-project/xz-java","2024-02-25 21:08:51","2024-02-25 21:08:50","created",1963062026,"These benchmark results are from windows 11 13th Gen Intel(R) Core(TM) i7-1370P .
The 3 different files are:
ihe_ovly_pr.dcm is a acr/nema dicom format presentation state - sized ~66KB.
image1.dcm  is a acr/nema dicom formated uncompressed image sized ~26MB.
large.xml is an xml file sized ~52MB.

They show regression of up to 10% for the ""legacy""/compatibility case.
They show performance improvements ranging from ~0% -> ~30% depending on the content and preset level.
In general, preset 6 saw larger improvements than preset 3.


jdk 8
```
Benchmark                                             (file)  (preset)  Mode  Cnt     Score      Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3     0.598 ±    0.065  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3     0.650 ±    0.195  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3     0.545 ±    0.097  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3     2.848 ±    0.401  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3     2.725 ±    0.242  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3     1.866 ±    0.451  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3  2036.300 ±   82.683  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3  2136.215 ± 1500.816  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3  1929.697 ±  678.446  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3  4124.933 ±  773.943  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3  4333.171 ±  576.123  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3  3692.338 ±  162.947  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3   760.670 ±  147.354  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3   787.818 ±  127.012  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3   694.098 ±   63.862  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3  6601.508 ± 1201.524  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3  7352.783 ± 1461.493  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3  5279.845 ±  834.122  ms/op
```

jdk 11
```
Benchmark                                             (file)  (preset)  Mode  Cnt      Score           Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3       0.590 ±        0.136  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3       0.587 ±        0.106  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3       0.542 ±        0.076  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3       2.914 ±        1.259  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3       2.760 ±        0.254  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3       1.933 ±        0.157  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3    2113.911 ±      815.591  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3    2197.521 ±     1398.848  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3    2084.317 ±      904.885  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3    4088.532 ±      847.937  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3    4137.546 ±       88.137  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3    3991.293 ±     1587.101  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3     699.659 ±      270.399  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3     707.156 ±      165.419  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3     665.311 ±       36.397  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3    6901.331 ±     9032.103  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3    7338.866 ±     4002.768  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3    5932.740 ±      383.178  ms/op
```

jdk 17
```
Benchmark                                             (file)  (preset)  Mode  Cnt     Score      Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3     0.598 ±    0.029  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3     0.606 ±    0.054  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3     0.553 ±    0.247  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3     2.836 ±    0.701  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3     2.820 ±    0.179  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3     1.959 ±    0.431  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3  2116.691 ±  743.495  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3  2268.474 ±  667.310  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3  2150.507 ± 1549.747  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3  4144.431 ± 1380.345  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3  4481.542 ± 1059.997  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3  4044.453 ±  461.817  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3   739.495 ±  166.726  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3   734.365 ±  137.722  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3   684.531 ±   89.739  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3  6847.095 ±  904.741  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3  7686.943 ± 2843.518  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3  5957.280 ±  338.260  ms/op
```

jdk 21
```
Benchmark                                             (file)  (preset)  Mode  Cnt     Score      Error  Units
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         3  avgt    3     0.589 ┬▒    0.064  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         3  avgt    3     0.578 ┬▒    0.264  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         3  avgt    3     0.543 ┬▒    0.068  ms/op
XZCompressionBenchmark.baseline              ihe_ovly_pr.dcm         6  avgt    3     2.842 ┬▒    2.348  ms/op
XZCompressionBenchmark.compress_legacy       ihe_ovly_pr.dcm         6  avgt    3     2.637 ┬▒    0.621  ms/op
XZCompressionBenchmark.compress_unsafe_long  ihe_ovly_pr.dcm         6  avgt    3     1.860 ┬▒    0.137  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         3  avgt    3  2013.813 ┬▒ 2111.947  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         3  avgt    3  2022.160 ┬▒  244.838  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         3  avgt    3  2079.494 ┬▒  559.869  ms/op
XZCompressionBenchmark.baseline                   image1.dcm         6  avgt    3  4200.710 ┬▒  559.429  ms/op
XZCompressionBenchmark.compress_legacy            image1.dcm         6  avgt    3  4318.551 ┬▒  224.317  ms/op
XZCompressionBenchmark.compress_unsafe_long       image1.dcm         6  avgt    3  4000.231 ┬▒  122.133  ms/op
XZCompressionBenchmark.baseline                    large.xml         3  avgt    3   741.106 ┬▒  304.118  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         3  avgt    3   762.184 ┬▒  193.266  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         3  avgt    3   707.872 ┬▒  217.096  ms/op
XZCompressionBenchmark.baseline                    large.xml         6  avgt    3  6644.706 ┬▒   71.733  ms/op
XZCompressionBenchmark.compress_legacy             large.xml         6  avgt    3  7490.776 ┬▒ 1352.132  ms/op
XZCompressionBenchmark.compress_unsafe_long        large.xml         6  avgt    3  5125.599 ┬▒  723.249  ms/op
```","",0,0,"","none","bokken",13,"XZ compression improvements by optimizing array pattern matching","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 20:00:00","IssueCommentEvent","hsk17","tukaani-project/xz","2024-02-25 20:59:03","2024-02-25 20:59:02","created",1963059384,"same here; can not compile xz-5.6.0 on opensuse leap 15.5, ""xzdec.c:329:29: error: ‘SYS_landlock_create_ruleset’ undeclared"",  ""xzdec.c:349:15: error: ‘SYS_landlock_restrict_self’ undeclared""

seems, the unconditional use of SYS_landlock_... in xz-5.6.0 sources has somehow to be guarded if not-so-recent glibc is installed on the host
","",0,0,"","none","hsk17",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 20:00:00","PullRequestEvent","bokken","tukaani-project/xz-java","2024-02-25 20:10:23","2024-02-25 20:10:22","opened",0,"This is incremental changes to simplify code review process. This first set of changes introduces the array mismatch abstraction and initial changes using Unsafe to read unaligned longs for x86 and aarch64.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","bokken",13,"XZ compression improvements by optimizing array pattern matching","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","array_comp_incremental","7e3dbdd5edfd3831bf18d766a75828677105a050","master","171b3625fa6c4c24e8d32b0ce8f66b5eb1c78d43",0,0,0,"unknown","",0,0,1,479,66,7,"",0,"","",0,0,"","","","none"
"2024-02-25 14:00:00","IssueCommentEvent","milkylainen","tukaani-project/xz","2024-02-25 14:19:59","2024-02-25 14:19:57","created",1962955943,"Thanks for clearing things up!","",0,0,"","none","milkylainen",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","closed",0,"","[]",4,"NONE","2024-02-25 14:19:57","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 14:00:00","IssuesEvent","milkylainen","tukaani-project/xz","2024-02-25 14:19:58","2024-02-25 14:19:57","closed",0,"Well. Not really a bug, but perhaps more a question of default and helpful information.
Please correct me if I'm wrong here.
I've always lived with the assumption that using xz with more than one thread isn't deterministic.
Ie, the compression result will vary with threads?
By changing the default, various usages will start to perhaps experience different results when building on different machines.
Like packagers, embedded build envs etc.

Has anything changed in the determinism department or can users just expect that default is to create variable results with the defaults?

### Version

5.6

### Operating System

Linux

### Relevant log output

_No response_","",0,0,"","none","milkylainen",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","closed",0,"","[]",4,"NONE","2024-02-25 14:19:57","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 14:00:00","IssuesEvent","rubyFeedback","tukaani-project/xz","2024-02-25 14:44:03","2024-02-25 14:44:02","opened",0,"### Describe the bug

make  all-recursive
make[1]: Entering directory '/Depot/jjj/xz-5.6.0'
Making all in src
make[2]: Entering directory '/Depot/jjj/xz-5.6.0/src'
Making all in liblzma
make[3]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma'
Making all in api
make[4]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma/api'
make[4]: Nothing to be done for 'all'.
make[4]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma/api'
make[4]: Entering directory '/Depot/jjj/xz-5.6.0/src/liblzma'
make[4]: Nothing to be done for 'all-am'.
make[4]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma'
make[3]: Leaving directory '/Depot/jjj/xz-5.6.0/src/liblzma'
Making all in xzdec
make[3]: Entering directory '/Depot/jjj/xz-5.6.0/src/xzdec'
gcc -DHAVE_CONFIG_H -I. -I../..  -DTUKLIB_GETTEXT=0 -I../../src/common -I../../src/liblzma/api -I../../lib  -pthread -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wshift-overflow=2 -Wstrict-overflow=3 -Walloc-zero -Wduplicated-cond -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wdate-time -Wsign-conversion -Wfloat-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -O2 -fPIC -fno-strict-overflow -Wno-error -MT xzdec-xzdec.o -MD -MP -MF .deps/xzdec-xzdec.Tpo -c -o xzdec-xzdec.o `test -f 'xzdec.c' || echo './'`xzdec.c
xzdec.c: In function ‘sandbox_enter’:
xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
  329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
  349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
make[3]: *** [Makefile:606: xzdec-xzdec.o] Error 1
make[3]: Leaving directory '/Depot/jjj/xz-5.6.0/src/xzdec'
make[2]: *** [Makefile:427: all-recursive] Error 1
make[2]: Leaving directory '/Depot/jjj/xz-5.6.0/src'
make[1]: *** [Makefile:597: all-recursive] Error 1
make[1]: Leaving directory '/Depot/jjj/xz-5.6.0'
make: *** [Makefile:487: all] Error 2


I can compile older xz releases fine by the way, so 5.4.x, 
5.2.x. Not sure what changed.

My system is a custom built slackware; I recompiled most
things from source following mostly LFS/BLFS instructions.
xz 5.6.x is not yet appearing on LFS, so I just poke in the
dark here really.

glibc is 2.33, gcc is 11.4.0.

### Version

5.6.0

### Operating System

linux

### Relevant log output

_No response_","",0,0,"","none","rubyFeedback",88,"[Bug]: Compile problem: SYS_landlock_restrict_self is undeclared","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 14:00:00","PullRequestEvent","ivq","tukaani-project/xz","2024-02-25 14:16:13","2024-02-25 14:16:11","opened",0,"## Pull request checklist

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
The RISC-V filter option should be listed in the man page but not.


## What is the new behavior?
List the RISC-V filter.

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No


## Other information

The translation is not handled yet.
Currently running po4a/update-po upon commit 5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7 generates changes of over 455 lines and I'm sure sure if they are really needed. Plus, I'm not familiar with the po4a tools so help is needed. ","",0,0,"","none","ivq",87,"xz: Add missing RISC-V on the filter list in the man page","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","fix_riscv_filter_doc","2a76c3dd1084561e819df9e3e6b1606fa0c79e0b","master","8bf9f72ee1c05b9e205a72807e8a9e304785673d",0,0,0,"unknown","",0,0,1,3,1,1,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-25 13:41:03","1970-01-01 00:00:00","none",0,"","",0,0,"manpage_typo_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-25 13:41:06","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","IssueCommentEvent","xry111","tukaani-project/xz","2024-02-25 13:26:12","2024-02-25 13:26:10","created",1962940508,"> Wait a minute... There are some warnings I'd not spotted.

Fixed.  And added cmake support.","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","IssueCommentEvent","xry111","tukaani-project/xz","2024-02-25 13:20:34","2024-02-25 13:20:33","created",1962938892,"Wait a minute... There are some warnings I'd not spotted.","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-25 13:42:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-25 12:00:00","ForkEvent","xry111","tukaani-project/xz","2024-02-25 12:15:51","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 12:00:00","PullRequestEvent","xry111","tukaani-project/xz","2024-02-25 12:26:02","2024-02-25 12:26:01","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [x] Feature

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

On LoongArch the generic table-based CRC32 implementation is used.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: None


## What is the new behavior?

The crc.w.{b/h/w/d}.w instructions in LoongArch can calculate the CRC32 result for 1/2/4/8 bytes in a single operation, making the use of LoongArch CRC32 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if the kernel declares the LoongArch CRC32 instructions supported via AT_HWCAP.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","xry111",86,"Speed up CRC32 calculation on LoongArch","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xry111/loongarch-crc","d2da8538cf8fab670f109a12d819b34c131bd2e1","master","5d8d915ebe2e345820a0f54d1baf8d7d4824c0c7",0,0,0,"unknown","",0,0,1,167,0,4,"",0,"","",0,0,"","","","none"
"2024-02-25 11:00:00","ForkEvent","AnatoliyLl","tukaani-project/xz","2024-02-25 11:51:15","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 11:00:00","WatchEvent","AnatoliyLl","tukaani-project/xz","2024-02-25 11:49:54","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 03:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-25 03:28:00","2024-02-25 03:27:58","created",1962800073,"Hello!

I have seen this misconception before and I can understand where it is coming from. The short answer is that multi threaded compression mode is in fact deterministic.

It does not matter how many threads are used. @sam is correct, multi threaded encoding mode with 1 thread will produce the same as output as 10 threads. The output is *different* from single threaded mode, which is where the confusion happens. Single threaded mode does not put the block sizes in the headers and will put all of the data in a single block by default.

Setting -T0 will always use multi threaded mode. In the past, if only one thread was used in -T0 mode then it would operate in single threaded mode and thus produce single threaded output. So I believe that is where the non-determinstic belief originated from, since sometimes the output would be different when using -T0. This is no longer the case.

I hope this helps!","",0,0,"","none","JiaT75",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 02:00:00","IssueCommentEvent","satmandu","tukaani-project/xz","2024-02-25 02:52:44","2024-02-25 02:52:43","created",1962794811,"Building with `cmake` and `-DENABLE_SANDBOX=OFF` solved this problem for us.","",0,0,"","none","satmandu",84,"[Bug]:  5.6.0 build issue","['bug']","closed",0,"","[]",3,"NONE","2024-02-25 02:52:43","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-25 02:00:00","IssuesEvent","satmandu","tukaani-project/xz","2024-02-25 02:52:43","2024-02-25 02:52:43","closed",0,"### Describe the bug

Fails to build on armv7l. built with `--enable-shared`


### Version

5.6.0

### Operating System

ChromeOS, M91

### Relevant log output

```shell
make  all-recursive
make[1]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0'
Making all in src
make[2]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src'
Making all in liblzma
make[3]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
Making all in api
make[4]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma/api'
make[4]: Nothing to be done for 'all'.
make[4]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma/api'
make[4]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
make[4]: Nothing to be done for 'all-am'.
make[4]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
make[3]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
Making all in xzdec
make[3]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/xzdec'
armv7l-cros-linux-gnueabihf-gcc -DHAVE_CONFIG_H -I. -I../..  -DTUKLIB_GETTEXT=0 -I../../src/common -I../../src/liblzma/api -I../../lib  -pthread -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wshift-overflow=2 -Wstrict-overflow=3 -Walloc-zero -Wduplicated-cond -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wdate-time -Wsign-conversion -Wfloat-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -O2 -pipe -ffat-lto-objects -fPIC -mfloat-abi=hard -mthumb -mfpu=vfpv3-d16 -march=armv7-a+fp -fuse-ld=mold  -flto=auto -c -o xzdec-xzdec.o `test -f 'xzdec.c' || echo './'`xzdec.c
xzdec.c: In function ‘sandbox_enter’:
xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
  329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
  349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
make[3]: *** [Makefile:610: xzdec-xzdec.o] Error 1
make[3]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/xzdec'
make[2]: *** [Makefile:427: all-recursive] Error 1
make[2]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src'
make[1]: *** [Makefile:597: all-recursive] Error 1
make[1]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0'
make: *** [Makefile:487: all] Error 2
There was a build error.
```","",0,0,"","none","satmandu",84,"[Bug]:  5.6.0 build issue","['bug']","closed",0,"","[]",3,"NONE","2024-02-25 02:52:43","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 18:00:00","IssueCommentEvent","milkylainen","tukaani-project/xz","2024-02-24 18:09:10","2024-02-24 18:09:09","created",1962442198,"Oh. Looks like I've been mistaken and using -T0 should always result in deterministic results.
Hopefully a maintainer can confirm. @thesamesam, appreciate the hint!","",0,0,"","none","milkylainen",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 17:00:00","IssueCommentEvent","satmandu","tukaani-project/xz","2024-02-24 17:10:08","2024-02-24 17:10:07","created",1962425297,"Same issue building with `cmake`:
```
FAILED: CMakeFiles/xzdec.dir/src/xzdec/xzdec.c.o
/usr/local/bin/cc -DHAVE_CHECK_CRC32 -DHAVE_CHECK_CRC64 -DHAVE_CHECK_SHA256 -DHAVE_CLOCK_GETTIME -DHAVE_CLOCK_MONOTONIC -DHAVE_DECODERS -DHAVE_DECODER_ARM -DHAVE_DECODER_ARM64 -DHAVE_DECODER_ARMTHUMB -DHAVE_DECODER_DELTA -DHAVE_DECODER_IA64 -DHAVE_DECODER_LZMA1 -DHAVE_DECODER_LZMA2 -DHAVE_DECODER_POWERPC -DHAVE_DECODER_RISCV -DHAVE_DECODER_SPARC -DHAVE_DECODER_X86 -DHAVE_ENCODERS -DHAVE_ENCODER_ARM -DHAVE_ENCODER_ARM64 -DHAVE_ENCODER_ARMTHUMB -DHAVE_ENCODER_DELTA -DHAVE_ENCODER_IA64 -DHAVE_ENCODER_LZMA1 -DHAVE_ENCODER_LZMA2 -DHAVE_ENCODER_POWERPC -DHAVE_ENCODER_RISCV -DHAVE_ENCODER_SPARC -DHAVE_ENCODER_X86 -DHAVE_INTTYPES_H -DHAVE_LINUX_LANDLOCK_H -DHAVE_LZIP_DECODER -DHAVE_MF_BT2 -DHAVE_MF_BT3 -DHAVE_MF_BT4 -DHAVE_MF_HC3 -DHAVE_MF_HC4 -DHAVE_MICROLZMA -DHAVE_PROGRAM_INVOCATION_NAME -DHAVE_PTHREAD_CONDATTR_SETCLOCK -DHAVE_STDBOOL_H -DHAVE_STDINT_H -DHAVE__BOOL -DHAVE___BUILTIN_ASSUME_ALIGNED -DHAVE___BUILTIN_BSWAPXX -DMYTHREAD_POSIX -DPACKAGE_BUGREPORT=\""xz@tukaani.org\"" -DPACKAGE_NAME=""\""XZ Utils\"""" -DPACKAGE_URL=\""https://xz.tukaani.org/xz-utils/\"" -DTUKLIB_FAST_UNALIGNED_ACCESS -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -I/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/common -I/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/liblzma/api -I/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/builddir/lib -I/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/lib -O2 -pipe -ffat-lto-objects -fPIC -mfloat-abi=hard -mthumb -mfpu=vfpv3-d16 -march=armv7-a+fp -fuse-ld=mold  -flto=auto -O2 -DNDEBUG -std=gnu99 -flto=auto -fno-fat-lto-objects -Wall -Wextra -pthread -MD -MT CMakeFiles/xzdec.dir/src/xzdec/xzdec.c.o -MF CMakeFiles/xzdec.dir/src/xzdec/xzdec.c.o.d -o CMakeFiles/xzdec.dir/src/xzdec/xzdec.c.o -c /usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/xzdec/xzdec.c
/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/xzdec/xzdec.c: In function ‘sandbox_enter’:
/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/xzdec/xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
  329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/xzdec/xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
/usr/local/tmp/crew/xzutils.20240224170549.dir/xz-5.6.0/src/xzdec/xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
  349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
[6*1/70] Linking C executable lzmainfo                                                                                                                                                                        ninja: build stopped: subcommand failed.
```","",0,0,"","none","satmandu",84,"[Bug]:  5.6.0 build issue","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 17:00:00","IssueCommentEvent","thesamesam","tukaani-project/xz","2024-02-24 17:07:39","2024-02-24 17:07:38","created",1962424817,"Please see https://github.com/tukaani-project/xz/commit/6daa4d0ea46a8441f21f609149f3633158bf4704:
>   - Output from single-threaded and multi-threaded compressors
>    differ but such changes could happen for other reasons too
>    (they just haven't happened since 5.0.0).

I believe (although see if a maintainer confirms) that the threaded compressor is deterministic if it's used (so it doesn't depend on the thread count and so on).","",0,0,"","none","thesamesam",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 16:00:00","IssueCommentEvent","satmandu","tukaani-project/xz","2024-02-24 16:35:22","2024-02-24 16:35:21","created",1962417562,"(Older versions build just fine.)","",0,0,"","none","satmandu",84,"[Bug]:  5.6.0 build issue","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 16:00:00","IssuesEvent","satmandu","tukaani-project/xz","2024-02-24 16:21:06","2024-02-24 16:21:05","opened",0,"### Describe the bug

Fails to build on armv7l. built with `--enable-shared`


### Version

5.6.0

### Operating System

ChromeOS, M91

### Relevant log output

```shell
make  all-recursive
make[1]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0'
Making all in src
make[2]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src'
Making all in liblzma
make[3]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
Making all in api
make[4]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma/api'
make[4]: Nothing to be done for 'all'.
make[4]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma/api'
make[4]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
make[4]: Nothing to be done for 'all-am'.
make[4]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
make[3]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/liblzma'
Making all in xzdec
make[3]: Entering directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/xzdec'
armv7l-cros-linux-gnueabihf-gcc -DHAVE_CONFIG_H -I. -I../..  -DTUKLIB_GETTEXT=0 -I../../src/common -I../../src/liblzma/api -I../../lib  -pthread -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wshift-overflow=2 -Wstrict-overflow=3 -Walloc-zero -Wduplicated-cond -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wdate-time -Wsign-conversion -Wfloat-conversion -Wlogical-op -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -O2 -pipe -ffat-lto-objects -fPIC -mfloat-abi=hard -mthumb -mfpu=vfpv3-d16 -march=armv7-a+fp -fuse-ld=mold  -flto=auto -c -o xzdec-xzdec.o `test -f 'xzdec.c' || echo './'`xzdec.c
xzdec.c: In function ‘sandbox_enter’:
xzdec.c:329:36: error: ‘SYS_landlock_create_ruleset’ undeclared (first use in this function)
  329 |         int landlock_abi = syscall(SYS_landlock_create_ruleset,
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
xzdec.c:329:36: note: each undeclared identifier is reported only once for each function it appears in
xzdec.c:349:29: error: ‘SYS_landlock_restrict_self’ undeclared (first use in this function)
  349 |                 if (syscall(SYS_landlock_restrict_self, ruleset_fd, 0U) != 0)
      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~
make[3]: *** [Makefile:610: xzdec-xzdec.o] Error 1
make[3]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src/xzdec'
make[2]: *** [Makefile:427: all-recursive] Error 1
make[2]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0/src'
make[1]: *** [Makefile:597: all-recursive] Error 1
make[1]: Leaving directory '/usr/local/tmp/crew/xzutils.20240224160935.dir/xz-5.6.0'
make: *** [Makefile:487: all] Error 2
There was a build error.
```
```
","",0,0,"","none","satmandu",84,"[Bug]:  5.6.0 build issue","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 16:00:00","IssuesEvent","milkylainen","tukaani-project/xz","2024-02-24 16:59:21","2024-02-24 16:59:20","opened",0,"### Describe the bug

Well. Not really a bug, but perhaps more a question of default and helpful information.
Please correct me if I'm wrong here.
I've always lived with the assumption that using xz with more than one thread isn't deterministic.
Ie, the compression result will vary with threads?
By changing the default, various usages will start to perhaps experience different results when building on different machines.
Like packagers, embedded build envs etc.

Has anything changed in the determinism department or can users just expect that default is to create variable results with the defaults?

### Version

5.6

### Operating System

Linux

### Relevant log output

_No response_","",0,0,"","none","milkylainen",85,"[Bug?]: Default option. Non determinism in multithreads?","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 15:00:00","IssueCommentEvent","pmqs","tukaani-project/xz","2024-02-24 15:16:11","2024-02-24 15:16:10","created",1962398600,"Thanks, installing `gettext` in the workflow did the trick","",0,0,"","none","pmqs",82,"[Bug]: cmake install fails with github mainline & 5.6.0","['bug']","closed",0,"","[]",3,"NONE","2024-02-24 15:16:10","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 15:00:00","IssuesEvent","pmqs","tukaani-project/xz","2024-02-24 15:16:11","2024-02-24 15:16:10","closed",0,"### Describe the bug

Downstream testing an Ubuntu build (see https://github.com/pmqs/Compress-Raw-Lzma/actions/runs/8027548262/job/21931652300)  with xz mainline is failing with the error below on 

```
CMake Error at build/cmake_install.cmake:162 (file):
  file INSTALL cannot find ""/home/paul/git/xz/po/ca.gmo"": No such file or directory.
```

### Version

mainline from github

### Operating System

Ubuntu 23.10

### Relevant log output

```shell
$ cmake -B build --install-prefix /tmp/xz .
-- The C compiler identification is GNU 13.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Performing Test TUKLIB_LARGE_FILE_SUPPORT_BY_DEFAULT
-- Performing Test TUKLIB_LARGE_FILE_SUPPORT_BY_DEFAULT - Success
-- Performing Test HAVE___BUILTIN_BSWAPXX
-- Performing Test HAVE___BUILTIN_BSWAPXX - Success
-- Performing Test HAVE___BUILTIN_ASSUME_ALIGNED
-- Performing Test HAVE___BUILTIN_ASSUME_ALIGNED - Success
-- Looking for clock_gettime
-- Looking for clock_gettime - found
-- Looking for CLOCK_MONOTONIC
-- Looking for CLOCK_MONOTONIC - found
-- Found Intl: built in to C library  
-- Could NOT find Gettext (missing: GETTEXT_MSGMERGE_EXECUTABLE GETTEXT_MSGFMT_EXECUTABLE) 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Looking for pthread_condattr_setclock
-- Looking for pthread_condattr_setclock - found
-- Looking for cap_rights_limit
-- Looking for cap_rights_limit - not found
-- Looking for pledge
-- Looking for pledge - not found
-- Looking for linux/landlock.h
-- Looking for linux/landlock.h - found
-- Checking how to detect the number of available CPU cores
-- Performing Test TUKLIB_CPUCORES_SCHED_GETAFFINITY
-- Performing Test TUKLIB_CPUCORES_SCHED_GETAFFINITY - Success
-- Checking how to detect the amount of physical memory
-- Performing Test TUKLIB_PHYSMEM_SPECIAL
-- Performing Test TUKLIB_PHYSMEM_SPECIAL - Failed
-- Performing Test TUKLIB_PHYSMEM_AIX
-- Performing Test TUKLIB_PHYSMEM_AIX - Failed
-- Performing Test TUKLIB_PHYSMEM_SYSCONF
-- Performing Test TUKLIB_PHYSMEM_SYSCONF - Success
-- Performing Test HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR
-- Performing Test HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR - Success
-- Performing Test SYSTEM_SUPPORTS_IFUNC
-- Performing Test SYSTEM_SUPPORTS_IFUNC - Success
-- Looking for cpuid.h
-- Looking for cpuid.h - found
-- Looking for immintrin.h
-- Looking for immintrin.h - found
-- Performing Test HAVE__MM_MOVEMASK_EPI8
-- Performing Test HAVE__MM_MOVEMASK_EPI8 - Success
-- Performing Test HAVE_USABLE_CLMUL
-- Performing Test HAVE_USABLE_CLMUL - Success
-- Performing Test HAVE_ARM64_CRC32
-- Performing Test HAVE_ARM64_CRC32 - Failed
-- Looking for getopt_long
-- Looking for getopt_long - found
-- Looking for program_invocation_name
-- Looking for program_invocation_name - found
-- Looking for mbrtowc
-- Looking for mbrtowc - found
-- Looking for wcwidth
-- Looking for wcwidth - found
-- Looking for optreset
-- Looking for optreset - not found
-- Looking for posix_fadvise
-- Looking for posix_fadvise - found
-- Performing Test HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC
-- Performing Test HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC - Success
-- Looking for futimens
-- Looking for futimens - found
-- Configuring done (12.0s)
-- Generating done (0.2s)
-- Build files have been written to: /home/paul/git/xz/build

$ cmake --build build
[  0%] Building C object CMakeFiles/liblzma.dir/src/common/tuklib_physmem.c.o
[  1%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/check.c.o
[  2%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_util.c.o
[  2%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/common.c.o
[  3%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_preset.c.o
[  4%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_common.c.o
[  5%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/hardware_physmem.c.o
[  5%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index.c.o
[  6%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_flags_common.c.o
[  7%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/string_conversion.c.o
[  8%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/vli_size.c.o
[  8%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc32_fast.c.o
[  9%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc32_table.c.o
[ 10%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc64_fast.c.o
[ 10%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc64_table.c.o
[ 11%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/sha256.c.o
[ 12%] Building C object CMakeFiles/liblzma.dir/src/common/tuklib_cpucores.c.o
[ 13%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/hardware_cputhreads.c.o
[ 13%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/outqueue.c.o
[ 14%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/alone_encoder.c.o
[ 15%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_buffer_encoder.c.o
[ 16%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_encoder.c.o
[ 16%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_header_encoder.c.o
[ 17%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_buffer_encoder.c.o
[ 18%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_encoder.c.o
[ 18%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_encoder_memusage.c.o
[ 19%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_buffer_encoder.c.o
[ 20%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_encoder.c.o
[ 21%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_flags_encoder.c.o
[ 21%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index_encoder.c.o
[ 22%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_buffer_encoder.c.o
[ 23%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_encoder.c.o
[ 24%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_flags_encoder.c.o
[ 24%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/vli_encoder.c.o
[ 25%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_encoder_mt.c.o
[ 26%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/simple_encoder.c.o
[ 27%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder.c.o
[ 27%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder_optimum_fast.c.o
[ 28%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder_optimum_normal.c.o
[ 29%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lz/lz_encoder.c.o
[ 29%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lz/lz_encoder_mf.c.o
[ 30%] Building C object CMakeFiles/liblzma.dir/src/liblzma/rangecoder/price_table.c.o
[ 31%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/fastpos_table.c.o
[ 32%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma2_encoder.c.o
[ 32%] Building C object CMakeFiles/liblzma.dir/src/liblzma/delta/delta_encoder.c.o
[ 33%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/alone_decoder.c.o
[ 34%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/auto_decoder.c.o
[ 35%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_buffer_decoder.c.o
[ 35%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_decoder.c.o
[ 36%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_header_decoder.c.o
[ 37%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_decoder_memusage.c.o
[ 37%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/file_info.c.o
[ 38%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_buffer_decoder.c.o
[ 39%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_decoder.c.o
[ 40%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_flags_decoder.c.o
[ 40%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index_decoder.c.o
[ 41%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index_hash.c.o
[ 42%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_buffer_decoder.c.o
[ 43%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_decoder.c.o
[ 43%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_flags_decoder.c.o
[ 44%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/vli_decoder.c.o
[ 45%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_decoder_mt.c.o
[ 45%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/simple_decoder.c.o
[ 46%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_decoder.c.o
[ 47%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lz/lz_decoder.c.o
[ 48%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma2_decoder.c.o
[ 48%] Building C object CMakeFiles/liblzma.dir/src/liblzma/delta/delta_decoder.c.o
[ 49%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder_presets.c.o
[ 50%] Building C object CMakeFiles/liblzma.dir/src/liblzma/delta/delta_common.c.o
[ 51%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/simple_coder.c.o
[ 51%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/x86.c.o
[ 52%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/arm.c.o
[ 53%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/armthumb.c.o
[ 54%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/arm64.c.o
[ 54%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/powerpc.c.o
[ 55%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/ia64.c.o
[ 56%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/sparc.c.o
[ 56%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/riscv.c.o
[ 57%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/microlzma_encoder.c.o
[ 58%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/microlzma_decoder.c.o
[ 59%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/lzip_decoder.c.o
[ 59%] Linking C static library liblzma.a
[ 59%] Built target liblzma
[ 59%] Built target libgnu
[ 59%] Building C object CMakeFiles/xzdec.dir/src/common/tuklib_exit.c.o
[ 60%] Building C object CMakeFiles/xzdec.dir/src/common/tuklib_progname.c.o
[ 61%] Building C object CMakeFiles/xzdec.dir/src/xzdec/xzdec.c.o
[ 62%] Linking C executable xzdec
[ 62%] Built target xzdec
[ 63%] Building C object CMakeFiles/lzmadec.dir/src/common/tuklib_exit.c.o
[ 64%] Building C object CMakeFiles/lzmadec.dir/src/common/tuklib_progname.c.o
[ 65%] Building C object CMakeFiles/lzmadec.dir/src/xzdec/xzdec.c.o
[ 65%] Linking C executable lzmadec
[ 65%] Built target lzmadec
[ 66%] Building C object CMakeFiles/lzmainfo.dir/src/common/tuklib_exit.c.o
[ 67%] Building C object CMakeFiles/lzmainfo.dir/src/common/tuklib_progname.c.o
[ 67%] Building C object CMakeFiles/lzmainfo.dir/src/lzmainfo/lzmainfo.c.o
[ 68%] Linking C executable lzmainfo
[ 68%] Built target lzmainfo
[ 68%] Building C object CMakeFiles/xz.dir/src/common/tuklib_exit.c.o
[ 69%] Building C object CMakeFiles/xz.dir/src/common/tuklib_mbstr_fw.c.o
[ 70%] Building C object CMakeFiles/xz.dir/src/common/tuklib_mbstr_width.c.o
[ 71%] Building C object CMakeFiles/xz.dir/src/common/tuklib_open_stdxxx.c.o
[ 71%] Building C object CMakeFiles/xz.dir/src/common/tuklib_progname.c.o
[ 72%] Building C object CMakeFiles/xz.dir/src/xz/args.c.o
[ 73%] Building C object CMakeFiles/xz.dir/src/xz/coder.c.o
[ 74%] Building C object CMakeFiles/xz.dir/src/xz/file_io.c.o
[ 74%] Building C object CMakeFiles/xz.dir/src/xz/hardware.c.o
[ 75%] Building C object CMakeFiles/xz.dir/src/xz/main.c.o
[ 76%] Building C object CMakeFiles/xz.dir/src/xz/message.c.o
[ 76%] Building C object CMakeFiles/xz.dir/src/xz/mytime.c.o
[ 77%] Building C object CMakeFiles/xz.dir/src/xz/options.c.o
[ 78%] Building C object CMakeFiles/xz.dir/src/xz/sandbox.c.o
[ 79%] Building C object CMakeFiles/xz.dir/src/xz/signals.c.o
[ 79%] Building C object CMakeFiles/xz.dir/src/xz/suffix.c.o
[ 80%] Building C object CMakeFiles/xz.dir/src/xz/util.c.o
[ 81%] Building C object CMakeFiles/xz.dir/src/xz/list.c.o
[ 82%] Linking C executable xz
[ 82%] Built target xz
[ 83%] Building C object CMakeFiles/test_bcj_exact_size.dir/tests/test_bcj_exact_size.c.o
[ 84%] Linking C executable tests_bin/test_bcj_exact_size
[ 84%] Built target test_bcj_exact_size
[ 84%] Building C object CMakeFiles/test_block_header.dir/tests/test_block_header.c.o
[ 85%] Linking C executable tests_bin/test_block_header
[ 85%] Built target test_block_header
[ 86%] Building C object CMakeFiles/test_check.dir/tests/test_check.c.o
[ 87%] Linking C executable tests_bin/test_check
[ 87%] Built target test_check
[ 87%] Building C object CMakeFiles/test_filter_flags.dir/tests/test_filter_flags.c.o
[ 88%] Linking C executable tests_bin/test_filter_flags
[ 88%] Built target test_filter_flags
[ 89%] Building C object CMakeFiles/test_filter_str.dir/tests/test_filter_str.c.o
[ 89%] Linking C executable tests_bin/test_filter_str
[ 89%] Built target test_filter_str
[ 90%] Building C object CMakeFiles/test_hardware.dir/tests/test_hardware.c.o
[ 91%] Linking C executable tests_bin/test_hardware
[ 91%] Built target test_hardware
[ 92%] Building C object CMakeFiles/test_index.dir/tests/test_index.c.o
[ 92%] Linking C executable tests_bin/test_index
[ 92%] Built target test_index
[ 93%] Building C object CMakeFiles/test_index_hash.dir/tests/test_index_hash.c.o
[ 94%] Linking C executable tests_bin/test_index_hash
[ 94%] Built target test_index_hash
[ 95%] Building C object CMakeFiles/test_lzip_decoder.dir/tests/test_lzip_decoder.c.o
[ 95%] Linking C executable tests_bin/test_lzip_decoder
[ 95%] Built target test_lzip_decoder
[ 96%] Building C object CMakeFiles/test_memlimit.dir/tests/test_memlimit.c.o
[ 97%] Linking C executable tests_bin/test_memlimit
[ 97%] Built target test_memlimit
[ 98%] Building C object CMakeFiles/test_stream_flags.dir/tests/test_stream_flags.c.o
[ 98%] Linking C executable tests_bin/test_stream_flags
[ 98%] Built target test_stream_flags
[ 99%] Building C object CMakeFiles/test_vli.dir/tests/test_vli.c.o
[100%] Linking C executable tests_bin/test_vli
[100%] Built target test_vli

$ cmake --install build
-- Install configuration: """"
-- Installing: /tmp/xz/lib/liblzma.a
-- Installing: /tmp/xz/include
-- Installing: /tmp/xz/include/lzma
-- Installing: /tmp/xz/include/lzma/filter.h
-- Installing: /tmp/xz/include/lzma/index_hash.h
-- Installing: /tmp/xz/include/lzma/check.h
-- Installing: /tmp/xz/include/lzma/block.h
-- Installing: /tmp/xz/include/lzma/delta.h
-- Installing: /tmp/xz/include/lzma/base.h
-- Installing: /tmp/xz/include/lzma/index.h
-- Installing: /tmp/xz/include/lzma/stream_flags.h
-- Installing: /tmp/xz/include/lzma/hardware.h
-- Installing: /tmp/xz/include/lzma/container.h
-- Installing: /tmp/xz/include/lzma/bcj.h
-- Installing: /tmp/xz/include/lzma/vli.h
-- Installing: /tmp/xz/include/lzma/lzma12.h
-- Installing: /tmp/xz/include/lzma/version.h
-- Installing: /tmp/xz/include/lzma.h
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-targets.cmake
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-targets-noconfig.cmake
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-config.cmake
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-config-version.cmake
-- Installing: /tmp/xz/lib/pkgconfig/liblzma.pc
-- Installing: /tmp/xz/bin/xzdec
-- Installing: /tmp/xz/bin/lzmadec
-- Installing: /tmp/xz/share/man/man1/xzdec.1
-- Installing: /tmp/xz/bin/lzmainfo
-- Installing: /tmp/xz/share/man/man1/lzmainfo.1
CMake Error at build/cmake_install.cmake:162 (file):
  file INSTALL cannot find ""/home/paul/git/xz/po/ca.gmo"": No such file or
  directory.
```
","",0,0,"","none","pmqs",82,"[Bug]: cmake install fails with github mainline & 5.6.0","['bug']","closed",0,"","[]",3,"NONE","2024-02-24 15:16:10","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 14:00:00","IssuesEvent","svenha","tukaani-project/xz","2024-02-24 14:53:13","2024-02-24 14:53:11","opened",0,"### Describe the Feature

A makefile target that downloads adequate data to run a real-world benchmark (compression and decompression). Or something similar.

### Expected Complications

_No response_

### Will I try to implement this new feature?

No","",0,0,"","none","svenha",83,"[Feature Request]: Is there a real-world benchmark for xz?","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 11:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-24 11:19:45","2024-02-24 11:19:43","created",1962331872,"Thanks for the bug report! The problem here is that you do not have Gettext installed. 

`-- Could NOT find Gettext (missing: GETTEXT_MSGMERGE_EXECUTABLE GETTEXT_MSGFMT_EXECUTABLE) `

Perhaps we can create a better error message here, but if you do not have Gettext installed then you need to already have the .gmo files built. These are available in the source code releases, so you should be able to build from there instead of from the development repository.

There are several workarounds here. The best solution is to install Gettext on your CI runner. It appears your CI runner is Ubuntu, so adding a step:

```shell
apt install gettext
```

Otherwise, you can disable NLS by setting -DENABLE_NLS=OFF when configuring with CMake.

In CMakeLists.txt there is a bit of documentation about this in a comment near the beginning of the file:

```
# If building from xz.git instead of a release tarball, consider
# the following *before* running cmake:
#
#   - To get translated messages, install GNU gettext tools (the
#     command msgfmt is needed). Alternatively disable translations
#     by setting ENABLE_NLS=OFF.
#
#   - To get translated man pages, run po4a/update-po which requires
#     the po4a tool. The build works without this step too.
```

Let me know if you have further questions. I hope this helps!","",0,0,"","none","JiaT75",82,"[Bug]: cmake install fails with github mainline & 5.6.0","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 10:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-24 10:01:50","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6.0","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 10:00:00","IssueCommentEvent","pmqs","tukaani-project/xz","2024-02-24 10:39:30","2024-02-24 10:39:29","created",1962324233,"Just tried with the brand new 5.6.0 release -- same issue. See https://github.com/pmqs/Compress-Raw-Lzma/actions/runs/8029997217/job/21936892044","",0,0,"","none","pmqs",82,"[Bug]: cmake install fails with github mainline & 5.6.0","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-24 10:09:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,1,"","","","none"
"2024-02-24 10:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-02-24 10:04:07","1970-01-01 00:00:00","published",0,"There currently are no plans to maintain the 5.4.x branch, but releases
could be made if there is community interest.

Here is an extract from the NEWS file:

```
5.6.0 (2024-02-24)

    This bumps the minor version of liblzma because new features were
    added. The API and ABI are still backward compatible with liblzma
    5.4.x and 5.2.x and 5.0.x.

    NOTE: As described in the NEWS for 5.5.2beta, the core components
    are now under the BSD Zero Clause License (0BSD).

    Since 5.5.2beta:

    * liblzma:

        - Disabled the branchless C variant in the LZMA decoder based
          on the benchmark results from the community.

        - Disabled x86-64 inline assembly on x32 to fix the build.

    * Sandboxing support in xz:

        - Landlock is now used even when xz needs to create files.
          In this case the sandbox is has to be more permissive than
          when no files need to be created. A similar thing was
          already in use with pledge(2) since 5.3.4alpha.

        - Landlock and pledge(2) are now stricter when reading from
          more than one input file and only writing to standard output.

        - Added support for Landlock ABI version 4.

    * CMake:

        - Default to -O2 instead of -O3 with CMAKE_BUILD_TYPE=Release.
          -O3 is not useful for speed and makes the code larger.

        - Now builds lzmainfo and lzmadec.

        - xzdiff, xzgrep, xzless, xzmore, and their symlinks are now
          installed. The scripts are also tested during ""make test"".

        - Added translation support for xz, lzmainfo, and the
          man pages.

        - Applied the symbol versioning workaround for MicroBlaze that
          is used in the Autotools build.

        - The general XZ Utils and liblzma API documentation is now
          installed.

        - The CMake component names were changed a little and several
          were added. liblzma_Runtime and liblzma_Development are
          unchanged.

        - Minimum required CMake version is now 3.14. However,
          translation support is disabled with CMake versions
          older than 3.20.

        - The CMake-based build is now close to feature parity with the
          Autotools-based build. Most importantly a few tests aren't
          run yet. Testing the CMake-based build on different operating
          systems would be welcome now. See the comment at the top of
          CMakeLists.txt.

    * Fixed a bug in the Autotools feature test for ARM64 CRC32
      instruction support for old versions of Clang. This did not
      affect the CMake build.

    * Windows:

        - The build instructions in INSTALL and windows/INSTALL*.txt
          were revised completely.

        - windows/build-with-cmake.bat along with the instructions
          in windows/INSTALL-MinGW-w64_with_CMake.txt should make
          it very easy to build liblzma.dll and xz.exe on Windows
          using CMake and MinGW-w64 with either GCC or Clang/LLVM.

        - windows/build.bash was updated. It now works on MSYS2 and
          on GNU/Linux (cross-compiling) to create a .zip and .7z
          package for 32-bit and 64-bit x86 using GCC + MinGW-w64.

    * The TODO file is no longer installed as part of the
      documentation. The file is out of date and does not reflect
      the actual tasks that will be completed in the future.

    * Translations:

        - Translated lzmainfo man pages are now installed. These
          had been forgotten in earlier versions.

        - Updated Croatian, Esperanto, German, Hungarian, Korean,
          Polish, Romanian, Spanish, Swedish, Vietnamese, and Ukrainian
          translations.

        - Updated German, Korean, Romanian, and Ukrainian man page
          translations.

    * Added a few tests.
   ```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.6.0","XZ Utils 5.6.0 Stable","none"
"2024-02-24 09:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-24 09:06:52","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-24 09:00:00","IssuesEvent","pmqs","tukaani-project/xz","2024-02-24 09:45:32","2024-02-24 09:45:31","opened",0,"### Describe the bug

Downstream testing an Ubuntu build (see https://github.com/pmqs/Compress-Raw-Lzma/actions/runs/8027548262/job/21931652300)  with xz mainline is failing with the error below on 

```
CMake Error at build/cmake_install.cmake:162 (file):
  file INSTALL cannot find ""/home/paul/git/xz/po/ca.gmo"": No such file or directory.
```

### Version

mainline from github

### Operating System

Ubuntu 23.10

### Relevant log output

```shell
$ cmake -B build --install-prefix /tmp/xz .
-- The C compiler identification is GNU 13.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: /usr/bin/cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Performing Test TUKLIB_LARGE_FILE_SUPPORT_BY_DEFAULT
-- Performing Test TUKLIB_LARGE_FILE_SUPPORT_BY_DEFAULT - Success
-- Performing Test HAVE___BUILTIN_BSWAPXX
-- Performing Test HAVE___BUILTIN_BSWAPXX - Success
-- Performing Test HAVE___BUILTIN_ASSUME_ALIGNED
-- Performing Test HAVE___BUILTIN_ASSUME_ALIGNED - Success
-- Looking for clock_gettime
-- Looking for clock_gettime - found
-- Looking for CLOCK_MONOTONIC
-- Looking for CLOCK_MONOTONIC - found
-- Found Intl: built in to C library  
-- Could NOT find Gettext (missing: GETTEXT_MSGMERGE_EXECUTABLE GETTEXT_MSGFMT_EXECUTABLE) 
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD
-- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
-- Found Threads: TRUE  
-- Looking for pthread_condattr_setclock
-- Looking for pthread_condattr_setclock - found
-- Looking for cap_rights_limit
-- Looking for cap_rights_limit - not found
-- Looking for pledge
-- Looking for pledge - not found
-- Looking for linux/landlock.h
-- Looking for linux/landlock.h - found
-- Checking how to detect the number of available CPU cores
-- Performing Test TUKLIB_CPUCORES_SCHED_GETAFFINITY
-- Performing Test TUKLIB_CPUCORES_SCHED_GETAFFINITY - Success
-- Checking how to detect the amount of physical memory
-- Performing Test TUKLIB_PHYSMEM_SPECIAL
-- Performing Test TUKLIB_PHYSMEM_SPECIAL - Failed
-- Performing Test TUKLIB_PHYSMEM_AIX
-- Performing Test TUKLIB_PHYSMEM_AIX - Failed
-- Performing Test TUKLIB_PHYSMEM_SYSCONF
-- Performing Test TUKLIB_PHYSMEM_SYSCONF - Success
-- Performing Test HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR
-- Performing Test HAVE_FUNC_ATTRIBUTE_CONSTRUCTOR - Success
-- Performing Test SYSTEM_SUPPORTS_IFUNC
-- Performing Test SYSTEM_SUPPORTS_IFUNC - Success
-- Looking for cpuid.h
-- Looking for cpuid.h - found
-- Looking for immintrin.h
-- Looking for immintrin.h - found
-- Performing Test HAVE__MM_MOVEMASK_EPI8
-- Performing Test HAVE__MM_MOVEMASK_EPI8 - Success
-- Performing Test HAVE_USABLE_CLMUL
-- Performing Test HAVE_USABLE_CLMUL - Success
-- Performing Test HAVE_ARM64_CRC32
-- Performing Test HAVE_ARM64_CRC32 - Failed
-- Looking for getopt_long
-- Looking for getopt_long - found
-- Looking for program_invocation_name
-- Looking for program_invocation_name - found
-- Looking for mbrtowc
-- Looking for mbrtowc - found
-- Looking for wcwidth
-- Looking for wcwidth - found
-- Looking for optreset
-- Looking for optreset - not found
-- Looking for posix_fadvise
-- Looking for posix_fadvise - found
-- Performing Test HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC
-- Performing Test HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC - Success
-- Looking for futimens
-- Looking for futimens - found
-- Configuring done (12.0s)
-- Generating done (0.2s)
-- Build files have been written to: /home/paul/git/xz/build

$ cmake --build build
[  0%] Building C object CMakeFiles/liblzma.dir/src/common/tuklib_physmem.c.o
[  1%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/check.c.o
[  2%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_util.c.o
[  2%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/common.c.o
[  3%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_preset.c.o
[  4%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_common.c.o
[  5%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/hardware_physmem.c.o
[  5%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index.c.o
[  6%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_flags_common.c.o
[  7%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/string_conversion.c.o
[  8%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/vli_size.c.o
[  8%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc32_fast.c.o
[  9%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc32_table.c.o
[ 10%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc64_fast.c.o
[ 10%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/crc64_table.c.o
[ 11%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/sha256.c.o
[ 12%] Building C object CMakeFiles/liblzma.dir/src/common/tuklib_cpucores.c.o
[ 13%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/hardware_cputhreads.c.o
[ 13%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/outqueue.c.o
[ 14%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/alone_encoder.c.o
[ 15%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_buffer_encoder.c.o
[ 16%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_encoder.c.o
[ 16%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_header_encoder.c.o
[ 17%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_buffer_encoder.c.o
[ 18%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_encoder.c.o
[ 18%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_encoder_memusage.c.o
[ 19%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_buffer_encoder.c.o
[ 20%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_encoder.c.o
[ 21%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_flags_encoder.c.o
[ 21%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index_encoder.c.o
[ 22%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_buffer_encoder.c.o
[ 23%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_encoder.c.o
[ 24%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_flags_encoder.c.o
[ 24%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/vli_encoder.c.o
[ 25%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_encoder_mt.c.o
[ 26%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/simple_encoder.c.o
[ 27%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder.c.o
[ 27%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder_optimum_fast.c.o
[ 28%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder_optimum_normal.c.o
[ 29%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lz/lz_encoder.c.o
[ 29%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lz/lz_encoder_mf.c.o
[ 30%] Building C object CMakeFiles/liblzma.dir/src/liblzma/rangecoder/price_table.c.o
[ 31%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/fastpos_table.c.o
[ 32%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma2_encoder.c.o
[ 32%] Building C object CMakeFiles/liblzma.dir/src/liblzma/delta/delta_encoder.c.o
[ 33%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/alone_decoder.c.o
[ 34%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/auto_decoder.c.o
[ 35%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_buffer_decoder.c.o
[ 35%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_decoder.c.o
[ 36%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/block_header_decoder.c.o
[ 37%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/easy_decoder_memusage.c.o
[ 37%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/file_info.c.o
[ 38%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_buffer_decoder.c.o
[ 39%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_decoder.c.o
[ 40%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/filter_flags_decoder.c.o
[ 40%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index_decoder.c.o
[ 41%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/index_hash.c.o
[ 42%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_buffer_decoder.c.o
[ 43%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_decoder.c.o
[ 43%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_flags_decoder.c.o
[ 44%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/vli_decoder.c.o
[ 45%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/stream_decoder_mt.c.o
[ 45%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/simple_decoder.c.o
[ 46%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_decoder.c.o
[ 47%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lz/lz_decoder.c.o
[ 48%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma2_decoder.c.o
[ 48%] Building C object CMakeFiles/liblzma.dir/src/liblzma/delta/delta_decoder.c.o
[ 49%] Building C object CMakeFiles/liblzma.dir/src/liblzma/lzma/lzma_encoder_presets.c.o
[ 50%] Building C object CMakeFiles/liblzma.dir/src/liblzma/delta/delta_common.c.o
[ 51%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/simple_coder.c.o
[ 51%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/x86.c.o
[ 52%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/arm.c.o
[ 53%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/armthumb.c.o
[ 54%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/arm64.c.o
[ 54%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/powerpc.c.o
[ 55%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/ia64.c.o
[ 56%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/sparc.c.o
[ 56%] Building C object CMakeFiles/liblzma.dir/src/liblzma/simple/riscv.c.o
[ 57%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/microlzma_encoder.c.o
[ 58%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/microlzma_decoder.c.o
[ 59%] Building C object CMakeFiles/liblzma.dir/src/liblzma/common/lzip_decoder.c.o
[ 59%] Linking C static library liblzma.a
[ 59%] Built target liblzma
[ 59%] Built target libgnu
[ 59%] Building C object CMakeFiles/xzdec.dir/src/common/tuklib_exit.c.o
[ 60%] Building C object CMakeFiles/xzdec.dir/src/common/tuklib_progname.c.o
[ 61%] Building C object CMakeFiles/xzdec.dir/src/xzdec/xzdec.c.o
[ 62%] Linking C executable xzdec
[ 62%] Built target xzdec
[ 63%] Building C object CMakeFiles/lzmadec.dir/src/common/tuklib_exit.c.o
[ 64%] Building C object CMakeFiles/lzmadec.dir/src/common/tuklib_progname.c.o
[ 65%] Building C object CMakeFiles/lzmadec.dir/src/xzdec/xzdec.c.o
[ 65%] Linking C executable lzmadec
[ 65%] Built target lzmadec
[ 66%] Building C object CMakeFiles/lzmainfo.dir/src/common/tuklib_exit.c.o
[ 67%] Building C object CMakeFiles/lzmainfo.dir/src/common/tuklib_progname.c.o
[ 67%] Building C object CMakeFiles/lzmainfo.dir/src/lzmainfo/lzmainfo.c.o
[ 68%] Linking C executable lzmainfo
[ 68%] Built target lzmainfo
[ 68%] Building C object CMakeFiles/xz.dir/src/common/tuklib_exit.c.o
[ 69%] Building C object CMakeFiles/xz.dir/src/common/tuklib_mbstr_fw.c.o
[ 70%] Building C object CMakeFiles/xz.dir/src/common/tuklib_mbstr_width.c.o
[ 71%] Building C object CMakeFiles/xz.dir/src/common/tuklib_open_stdxxx.c.o
[ 71%] Building C object CMakeFiles/xz.dir/src/common/tuklib_progname.c.o
[ 72%] Building C object CMakeFiles/xz.dir/src/xz/args.c.o
[ 73%] Building C object CMakeFiles/xz.dir/src/xz/coder.c.o
[ 74%] Building C object CMakeFiles/xz.dir/src/xz/file_io.c.o
[ 74%] Building C object CMakeFiles/xz.dir/src/xz/hardware.c.o
[ 75%] Building C object CMakeFiles/xz.dir/src/xz/main.c.o
[ 76%] Building C object CMakeFiles/xz.dir/src/xz/message.c.o
[ 76%] Building C object CMakeFiles/xz.dir/src/xz/mytime.c.o
[ 77%] Building C object CMakeFiles/xz.dir/src/xz/options.c.o
[ 78%] Building C object CMakeFiles/xz.dir/src/xz/sandbox.c.o
[ 79%] Building C object CMakeFiles/xz.dir/src/xz/signals.c.o
[ 79%] Building C object CMakeFiles/xz.dir/src/xz/suffix.c.o
[ 80%] Building C object CMakeFiles/xz.dir/src/xz/util.c.o
[ 81%] Building C object CMakeFiles/xz.dir/src/xz/list.c.o
[ 82%] Linking C executable xz
[ 82%] Built target xz
[ 83%] Building C object CMakeFiles/test_bcj_exact_size.dir/tests/test_bcj_exact_size.c.o
[ 84%] Linking C executable tests_bin/test_bcj_exact_size
[ 84%] Built target test_bcj_exact_size
[ 84%] Building C object CMakeFiles/test_block_header.dir/tests/test_block_header.c.o
[ 85%] Linking C executable tests_bin/test_block_header
[ 85%] Built target test_block_header
[ 86%] Building C object CMakeFiles/test_check.dir/tests/test_check.c.o
[ 87%] Linking C executable tests_bin/test_check
[ 87%] Built target test_check
[ 87%] Building C object CMakeFiles/test_filter_flags.dir/tests/test_filter_flags.c.o
[ 88%] Linking C executable tests_bin/test_filter_flags
[ 88%] Built target test_filter_flags
[ 89%] Building C object CMakeFiles/test_filter_str.dir/tests/test_filter_str.c.o
[ 89%] Linking C executable tests_bin/test_filter_str
[ 89%] Built target test_filter_str
[ 90%] Building C object CMakeFiles/test_hardware.dir/tests/test_hardware.c.o
[ 91%] Linking C executable tests_bin/test_hardware
[ 91%] Built target test_hardware
[ 92%] Building C object CMakeFiles/test_index.dir/tests/test_index.c.o
[ 92%] Linking C executable tests_bin/test_index
[ 92%] Built target test_index
[ 93%] Building C object CMakeFiles/test_index_hash.dir/tests/test_index_hash.c.o
[ 94%] Linking C executable tests_bin/test_index_hash
[ 94%] Built target test_index_hash
[ 95%] Building C object CMakeFiles/test_lzip_decoder.dir/tests/test_lzip_decoder.c.o
[ 95%] Linking C executable tests_bin/test_lzip_decoder
[ 95%] Built target test_lzip_decoder
[ 96%] Building C object CMakeFiles/test_memlimit.dir/tests/test_memlimit.c.o
[ 97%] Linking C executable tests_bin/test_memlimit
[ 97%] Built target test_memlimit
[ 98%] Building C object CMakeFiles/test_stream_flags.dir/tests/test_stream_flags.c.o
[ 98%] Linking C executable tests_bin/test_stream_flags
[ 98%] Built target test_stream_flags
[ 99%] Building C object CMakeFiles/test_vli.dir/tests/test_vli.c.o
[100%] Linking C executable tests_bin/test_vli
[100%] Built target test_vli

$ cmake --install build
-- Install configuration: """"
-- Installing: /tmp/xz/lib/liblzma.a
-- Installing: /tmp/xz/include
-- Installing: /tmp/xz/include/lzma
-- Installing: /tmp/xz/include/lzma/filter.h
-- Installing: /tmp/xz/include/lzma/index_hash.h
-- Installing: /tmp/xz/include/lzma/check.h
-- Installing: /tmp/xz/include/lzma/block.h
-- Installing: /tmp/xz/include/lzma/delta.h
-- Installing: /tmp/xz/include/lzma/base.h
-- Installing: /tmp/xz/include/lzma/index.h
-- Installing: /tmp/xz/include/lzma/stream_flags.h
-- Installing: /tmp/xz/include/lzma/hardware.h
-- Installing: /tmp/xz/include/lzma/container.h
-- Installing: /tmp/xz/include/lzma/bcj.h
-- Installing: /tmp/xz/include/lzma/vli.h
-- Installing: /tmp/xz/include/lzma/lzma12.h
-- Installing: /tmp/xz/include/lzma/version.h
-- Installing: /tmp/xz/include/lzma.h
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-targets.cmake
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-targets-noconfig.cmake
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-config.cmake
-- Installing: /tmp/xz/lib/cmake/liblzma/liblzma-config-version.cmake
-- Installing: /tmp/xz/lib/pkgconfig/liblzma.pc
-- Installing: /tmp/xz/bin/xzdec
-- Installing: /tmp/xz/bin/lzmadec
-- Installing: /tmp/xz/share/man/man1/xzdec.1
-- Installing: /tmp/xz/bin/lzmainfo
-- Installing: /tmp/xz/share/man/man1/lzmainfo.1
CMake Error at build/cmake_install.cmake:162 (file):
  file INSTALL cannot find ""/home/paul/git/xz/po/ca.gmo"": No such file or
  directory.
```
","",0,0,"","none","pmqs",82,"[Bug]: cmake install fails with github mainline","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-23 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-23 15:46:22","1970-01-01 00:00:00","none",0,"","",0,0,"lzma_decoder_improvements","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-23 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-23 13:15:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,3,"","","","none"
"2024-02-23 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-23 13:14:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,1,"","","","none"
"2024-02-23 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-23 12:48:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-23 08:00:00","WatchEvent","WYHYDHD","tukaani-project/xz","2024-02-23 08:53:52","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-23 08:00:00","WatchEvent","dilt91","tukaani-project/xz-java","2024-02-23 08:31:20","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 20:00:00","IssuesEvent","Larhzu","tukaani-project/xz","2024-02-22 20:05:57","2024-02-22 20:05:56","closed",0,"# Short version

Public domain has (real or perceived) legal issues in some jurisdictions. To avoid those issues, a widely-accepted public-domain-equivalent license that requires no attribution is considered for future versions. Feedback is wanted to know if this idea is good.


# Why the XZ projects are in the public domain

[LZMA SDK](https://7-zip.org/sdk.html) used to be available under the GNU LGPL and a few other license choices.
In late 2008, LZMA SDK became public domain (PD). Since XZ Utils, XZ Embedded, and XZ for Java are derived from the LZMA SDK code, I felt that it made no sense to have more restrictions on the XZ projects code than what LZMA SDK had. Thus the XZ projects have been PD as well.

For example, the [MIT License](https://spdx.org/licenses/MIT.html), [BSD 2-Clause ""Simplified"" License](https://spdx.org/licenses/BSD-2-Clause.html), or [ISC License](https://spdx.org/licenses/ISC.html) would have been more restrictive than PD as those require keeping the copyright notice and license notice when distributing copies. Pure PD has no such requirements.

I knew even in 2008 that PD might be legally complicated in some jurisdictions but I didn't see ideal alternatives (a common advice was to not create a new license). In practice it seemed that PD projects were accepted in major distros with strict policies (like Debian and Fedora). A few discussions around the problems of PD have occurred over the years though and in general it's waste of everyone's time.


# Public-domain-equivalent licenses

In 2008 there were no _widely-recognized_ and _widely-accepted_ [public-domain-equivalent licenses](https://en.wikipedia.org/wiki/Public-domain-equivalent_license). Nowadays there are at least [BSD Zero Clause License](https://spdx.org/licenses/0BSD.html) (0BSD) and [MIT No Attribution license](https://spdx.org/licenses/MIT-0.html) (MIT-0) which look good.

A few other PD-equivalent licenses exist too. For example:

* [WTFPL](https://spdx.org/licenses/WTFPL.html) uses unprofessional language (and lacks a warranty disclaimer in case it matters).

* [CC0](https://creativecommons.org/publicdomain/zero/1.0/) is also a PD dedication with a fallback license. It explicitly lacks patent license which has made [Fedora consider it unacceptable for free software in 2022](https://www.mail-archive.com/legal@lists.fedoraproject.org/msg02944.html) (still fine for files other than code).

* [The Unlicense](https://unlicense.org/) is a PD dedication with a fallback license. Compared to 0BSD and MIT-0, a PD dedication doesn't seem to add much practical value but it can fuel discussions about how the PD-dedication, fallback license, and warranty disclaimer interact with each other and so on.

Both 0BSD and MIT-0 are simple modifications to existing license texts and thus more than one person might have created the same variants independently over the years. The difficult thing is making the license texts widely accepted. 0BSD came from [toybox](https://www.landley.net/toybox/) which is [included in Android](https://www.landley.net/toybox/faq.html#opensource). MIT-0 got visibility because [Amazon uses it for example code](https://github.com/aws/mit-0). 0BSD is slightly shorter than MIT-0 while both should have the same legal effect. 0BSD got wide recognition a little earlier:

* 0BSD in [SDPX license list v2.2 on 2015-09-30](https://spdx.org/licenses/archive/archived_ll_v2.2/index.html) and [OSI approval on 2015-10-14](https://opensource.org/license/0bsd/)

* MIT-0 in [SDPX license list v3.1 in 2018](https://spdx.org/licenses/archive/archived_ll_v3.1/index.html) and [OSI approval in 2020](https://opensource.org/license/mit-0/)

GitHub has over four times [0BSD-licensed repositories](https://github.com/search?q=license%3A0bsd&type=repositories) than [MIT-0-licensed repositories](https://github.com/search?q=license%3Amit-0&type=repositories).

[Google doesn't allow contributions to PD projects](https://opensource.google/documentation/reference/patching#forbidden) or certain PD-equivalent projects: WTFPL, CC0, and The Unlicense are explicitly mentioned as _prohibited_. However, 0BSD is explicitly listed as _allowed_. (It's spelled as BSD0 on that page but it links to 0BSD.) MIT-0 isn't mentioned at all.

So clearly the legal department in one large company is happy with 0BSD. And since Android contains 0BSD-licensed code, a few other companies must be OK with 0BSD too. Even [Microsoft has released code under 0BSD](https://github.com/microsoft/tslib).

With the above considerations, my impression is that 0BSD is currently be the best of the well-known public-domain-equivalent licenses for software although the difference to MIT-0 is minuscule. The reasons to prefer 0BSD are that it's more popular, clearly accepted by legal departments of more than one large company, and that it's slightly shorter while being equivalent in legal meaning.


# The Plan

The change would affect future versions only. The public domain code in the old releases would obviously remain in the public domain.

For simplicity, all currently-PD code would be marked as 0BSD (with per-file SPDX license identifiers). If one wishes to know which parts are available as PD, one can look at the old releases or Git commit history. Those aren't going away.

We have already asked a few authors that they indeed are OK that their code would be under 0BSD. It feels a bit silly to ask since PD allows this already, but this way only a fairly small amount of code will rely solely on PD dedications. In any case, some code would remain that is from PD-only source.

Switching to 0BSD should affect users and distributors very little. PD code can be distributed without any notices about where the code came from. The same can be done with 0BSD.

(There is one tiny difference still: With 0BSD-licensed code, one shouldn't claim that it is in the public domain. Code under 0BSD is copyrighted, thus it's not literally in the public domain. Example: It is fine to take PD code and re-release it under The Unlicense. But one cannot re-release someone else's 0BSD-licensed code under The Unlicense because The Unlicense has a PD dedication and one cannot dedicate code into PD if one isn't its copyright holder. 0BSD to MIT-0 should be fine because there is no PD dedication in MIT-0.)


# Questions

1. Would using 0BSD instead of PD make legal considerations easier for distributors and contributors, even if some code still relies on PD dedications?

2. Should the XZ projects switch from PD to 0BSD for future releases?

When answering, if you represent an organization, please mention it. Otherwise the answer is assumed be an opinion of a private person.

Thank you!","",0,0,"","none","Larhzu",79,"Switch from public domain to BSD Zero Clause License?","[]","closed",0,"","[]",1,"MEMBER","2024-02-22 20:05:56","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 17:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-22 17:22:55","1970-01-01 00:00:00","none",0,"","",0,0,"windres_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-22 17:22:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-02-22 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 17:24:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.6_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-22 17:17:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/windres_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-22 15:12:43","1970-01-01 00:00:00","none",0,"","",0,0,"v5.6_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 15:07:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 15:04:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 14:27:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 13:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-22 13:25:56","1970-01-01 00:00:00","none",0,"","",0,0,"landlock_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-22 13:39:29","1970-01-01 00:00:00","none",0,"","",0,0,"landlock_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-22 13:39:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-02-22 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-22 13:38:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 12:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-22 12:46:19","1970-01-01 00:00:00","none",0,"","",0,0,"rc_config","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 12:50:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-22 12:45:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 12:29:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,3,"","","","none"
"2024-02-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 12:24:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-22 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-22 11:52:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 19:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-21 19:53:17","1970-01-01 00:00:00","none",0,"","",0,0,"rc_config","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 17:43:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-21 16:08:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 16:57:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 16:37:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-21 16:58:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/manpage_typo_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-21 16:05:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/NEWS_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-21 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-21 14:37:25","1970-01-01 00:00:00","none",0,"","",0,0,"NEWS_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-21 14:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-21 14:58:43","1970-01-01 00:00:00","none",0,"","",0,0,"w32_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-20 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-20 19:04:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,6,"","","","none"
"2024-02-20 17:00:00","WatchEvent","webbtrail","tukaani-project/xz","2024-02-20 17:00:53","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-20 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-20 16:33:10","1970-01-01 00:00:00","none",0,"","",0,0,"manpage_typo_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-20 16:00:00","WatchEvent","user8446","tukaani-project/xz","2024-02-20 16:14:32","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-20 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-20 15:33:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-20 13:14:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2024-02-19 22:00:00","WatchEvent","Nikos-116","tukaani-project/xz-java","2024-02-19 22:01:35","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-19 20:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-02-19 20:01:53","2024-02-19 20:01:52","created",1953092508,"On 2024-02-18 vector-is wrote:
> I'm looking for binaries for Windows.

The thought of starting to provide official binaries again has been
considered for a while. The package build script etc. have been updated
recently and hopefully get merged to master this week. There are some
non-technical considerations to decide but there is a possibility (so
it's still very uncertain) that XZ Utils 5.6.0 might get a Windows
binary package as well.

-- 
Lasse Collin
","",0,0,"","none","Larhzu",81,"Where can I download Latest compiled binaries ?","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-19 19:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-19 19:40:16","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-19 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 17:50:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-02-19 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 17:43:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 17:32:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-02-19 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 16:53:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 15:56:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 15:40:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",21,5,"","","","none"
"2024-02-19 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 14:48:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 14:30:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,1,"","","","none"
"2024-02-19 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 12:22:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 11:38:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 11:38:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 10:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 10:25:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,14,"","","","none"
"2024-02-19 10:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 10:01:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2024-02-19 10:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-19 10:01:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-19 03:00:00","IssueCommentEvent","vectoris","tukaani-project/xz","2024-02-19 03:24:02","2024-02-19 03:24:00","created",1951626829,"Thanks. 
I'm looking for binaries for Windows.","",0,0,"","none","vectoris",81,"Where can I download Latest compiled binaries ?","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-18 21:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-18 21:14:43","1970-01-01 00:00:00","none",0,"","",0,0,"sandbox3","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-18 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-18 21:59:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-18 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-18 16:13:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",22,4,"","","","none"
"2024-02-18 14:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-02-18 14:15:49","2024-02-18 14:15:47","created",1951338942,"Examples: GNU/Linux distributions like Arch Linux, Debian, Fedora,
Gentoo, Slackware, and Ubuntu include XZ Utils. FreeBSD includes
XZ Utils in the base system. OpenBSD provides a prebuilt package.

https://archlinux.org/

https://www.debian.org/

https://fedoraproject.org/

https://www.gentoo.org/

http://www.slackware.com/

https://ubuntu.com/

https://www.freebsd.org/

https://www.openbsd.org/

I hope this helps.

If you were looking for binaries for non-free operating systems like
Windows, then I don't have a recommendations for up-to-date binaries.
The XZ Utils home page has binaries for 5.2.9. I'm hoping to include
updated simplified build instructions for Windows in XZ Utils 5.6.0, if
I have time.
","",0,0,"","none","Larhzu",81,"Where can I download Latest compiled binaries ?","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-18 13:00:00","IssuesEvent","vectoris","tukaani-project/xz","2024-02-18 13:48:20","2024-02-18 13:48:18","opened",0,"https://xz.tukaani.org/xz-utils/  has this message:  `Many free software operating systems already provide easy-to-install XZ Utils binaries. It doesn't make sense to provide links to all those here. ` 

I couldn't find even one project that uses XZ Utils binaries.
Please give me a link to project where I can download Latest compiled binaries.","",0,0,"","none","vectoris",81,"Where can I download Latest compiled binaries ?","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-18 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-18 13:05:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-18 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-18 12:37:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-18 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-18 12:20:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-18 05:00:00","WatchEvent","dlebed","tukaani-project/xz-embedded","2024-02-18 05:22:06","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-18 02:00:00","WatchEvent","Uthar","tukaani-project/xz-java","2024-02-18 02:34:24","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-17 23:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 23:43:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,12,"","","","none"
"2024-02-17 23:00:00","WatchEvent","HTRamsey","tukaani-project/xz-embedded","2024-02-17 23:00:30","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-17 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 21:09:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2024-02-17 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 20:27:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-17 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 20:15:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-17 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 19:46:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,11,"","","","none"
"2024-02-17 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 17:10:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-17 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 17:05:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-02-17 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 17:14:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox3","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,7,"","","","none"
"2024-02-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-17 17:14:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-17 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 17:17:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-17 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 17:42:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-17 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 15:53:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,8,"","","","none"
"2024-02-17 14:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-17 14:03:20","1970-01-01 00:00:00","none",0,"","",0,0,"cstdfix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-17 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-02-17 14:31:24","2024-02-17 14:31:22","created",1950224184,"Omitting assembly from x86-32 is certainly much simpler than trying to adapt for it. Thanks for the PR! This is merged in master as e9053c907250c70d98b319d95fa54cb94fc76869. ","",0,0,"","none","JiaT75",80,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.","[]","closed",0,"","[]",1,"CONTRIBUTOR","2024-02-17 14:31:22","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-17 14:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2024-02-17 14:31:23","2024-02-17 14:31:22","closed",0,"The x32 port has a x86-64 ABI in term of all registers but uses only 32bit pointer like x86-32. The assembly optimisation fails to compile on x32. Given the state of x32 I suggest to exclude it from the optimisation rather than trying to fix it.

## Pull request type

Please check the type of change your PR introduces:
- [X] Bugfix

## What is the current behavior?
https://buildd.debian.org/status/fetch.php?pkg=xz-utils&arch=x32&ver=5.5.2beta-1&stamp=1708036388&raw=0

```
In file included from ../../../../src/liblzma/lzma/lzma_decoder.c:17:
In function ‘lzma_decode’,
    inlined from ‘lzma_decode’ at ../../../../src/liblzma/lzma/lzma_decoder.c:235:1:
../../../../src/liblzma/rangecoder/range_decoder.h:644:9: error: invalid 'asm': operand is not a condition code, invalid operand code 'c'
  644 |         __asm__( \
      |         ^~~~~~~
../../../../src/liblzma/rangecoder/range_decoder.h:671:9: note: in expansion of macro ‘rc_asm_bittree_n’
  671 |         rc_asm_bittree_n(probs_base_var, final_add, \
      |         ^~~~~~~~~~~~~~~~
../../../../src/liblzma/lzma/lzma_decoder.c:75:17: note: in expansion of macro ‘rc_bittree3’
   75 |                 rc_bittree3(ld.low[pos_state], \
      |                 ^~~~~~~~~~~
../../../../src/liblzma/lzma/lzma_decoder.c:421:25: note: in expansion of macro ‘len_decode_fast’
  421 |                         len_decode_fast(len, coder->match_len_decoder,
      |                         ^~~~~~~~~~~~~~~
../../../../src/liblzma/rangecoder/range_decoder.h:644:9: error: invalid 'asm': operand is not a condition code, invalid operand code 'c'
…
```



## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","sebastianas",80,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.","[]","closed",0,"","[]",1,"CONTRIBUTOR","2024-02-17 14:31:22","1970-01-01 00:00:00","","[]","[]","x32","92228b3c74d97643ded809baa01448a8905c9625","master","711e22d5c5f3bac39ac904efb3ede874a66e2045",0,0,0,"dirty","",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2024-02-17 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 14:23:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-17 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 14:04:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,8,"","","","none"
"2024-02-17 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 14:03:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-17 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 13:50:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-17 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-17 13:40:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-02-17 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-17 13:13:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-02-17 13:00:00","WatchEvent","jialebit","tukaani-project/xz","2024-02-17 13:59:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-16 21:00:00","PullRequestEvent","sebastianas","tukaani-project/xz","2024-02-16 21:02:21","2024-02-16 21:02:20","opened",0,"The x32 port has a x86-64 ABI in term of all registers but uses only 32bit pointer like x86-32. The assembly optimisation fails to compile on x32. Given the state of x32 I suggest to exclude it from the optimisation rather than trying to fix it.

## Pull request type

Please check the type of change your PR introduces:
- [X] Bugfix

## What is the current behavior?
https://buildd.debian.org/status/fetch.php?pkg=xz-utils&arch=x32&ver=5.5.2beta-1&stamp=1708036388&raw=0

```
In file included from ../../../../src/liblzma/lzma/lzma_decoder.c:17:
In function ‘lzma_decode’,
    inlined from ‘lzma_decode’ at ../../../../src/liblzma/lzma/lzma_decoder.c:235:1:
../../../../src/liblzma/rangecoder/range_decoder.h:644:9: error: invalid 'asm': operand is not a condition code, invalid operand code 'c'
  644 |         __asm__( \
      |         ^~~~~~~
../../../../src/liblzma/rangecoder/range_decoder.h:671:9: note: in expansion of macro ‘rc_asm_bittree_n’
  671 |         rc_asm_bittree_n(probs_base_var, final_add, \
      |         ^~~~~~~~~~~~~~~~
../../../../src/liblzma/lzma/lzma_decoder.c:75:17: note: in expansion of macro ‘rc_bittree3’
   75 |                 rc_bittree3(ld.low[pos_state], \
      |                 ^~~~~~~~~~~
../../../../src/liblzma/lzma/lzma_decoder.c:421:25: note: in expansion of macro ‘len_decode_fast’
  421 |                         len_decode_fast(len, coder->match_len_decoder,
      |                         ^~~~~~~~~~~~~~~
../../../../src/liblzma/rangecoder/range_decoder.h:644:9: error: invalid 'asm': operand is not a condition code, invalid operand code 'c'
…
```



## Does this introduce a breaking change?

- [ ] Yes
- [X] No","",0,0,"","none","sebastianas",80,"liblzma/rangecoder: Exclude x32 from the x86-64 optimisation.","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","x32","92228b3c74d97643ded809baa01448a8905c9625","master","711e22d5c5f3bac39ac904efb3ede874a66e2045",0,0,0,"unknown","",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2024-02-16 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-16 21:27:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_updates","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2024-02-16 20:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-16 20:42:05","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_updates","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-16 20:00:00","ForkEvent","sebastianas","tukaani-project/xz","2024-02-16 20:55:47","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-16 19:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-16 19:38:51","1970-01-01 00:00:00","none",0,"","",0,0,"cstdfix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-16 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-16 16:03:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox3","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-16 15:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-16 15:51:34","1970-01-01 00:00:00","none",0,"","",0,0,"sandbox3","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-16 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-16 15:57:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox3","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,6,"","","","none"
"2024-02-16 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-16 15:54:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-16 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-16 14:55:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-15 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-15 20:34:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-15 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-15 14:28:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-15 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-15 11:48:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",90,7,"","","","none"
"2024-02-14 21:00:00","ForkEvent","Wolfi-Chainguard-Demo","tukaani-project/xz","2024-02-14 21:33:59","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-14 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 19:15:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-14 18:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-02-14 18:05:56","1970-01-01 00:00:00","none",0,"","",0,0,"v5.5.2beta","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-14 18:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-02-14 18:46:19","2024-02-14 18:46:18","created",1944400549,"Thank you to everyone for the discussion and feedback! The core parts of the XZ Utils master branch are now under 0BSD as is the 5.5.2beta release. Assuming that people are fine with it in XZ Utils, similar change will be done later in XZ for Java and XZ Embedded.","",0,0,"","none","Larhzu",79,"Switch from public domain to BSD Zero Clause License?","[]","open",0,"","[]",1,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-14 18:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-02-14 18:19:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-14 18:25:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 18:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-02-14 18:13:29","1970-01-01 00:00:00","published",0,"This is the first release made under the 0BSD license. Please let us
know if there are any concerns about the license change. We are looking
forward to releasing 5.6.0 later this month!

```
5.5.2beta (2024-02-14)

    * Licensing change: The core components are now under the
      BSD Zero Clause License (0BSD). In XZ Utils 5.4.6 and older
      and 5.5.1alpha these components are in the public domain and
      obviously remain so; the change affects the new releases only.

      0BSD is an extremely permissive license which doesn't require
      retaining or reproducing copyright or license notices when
      distributing the code, thus in practice there is extremely
      little difference to public domain.

    * liblzma

        - Significant speed optimizations to the LZMA decoder were
          made. There are now three variants that can be chosen at
          build time:

            * Basic C version: This is a few percent faster than
              5.4.x due to some new optimizations.

            * Branchless C: This is currently the default on platforms
              for which there is no assembly code. This should be a few
              percent faster than the basic C version.

            * x86-64 inline assembly. This works with GCC and Clang.

          The default choice can currently be overriden by setting
          LZMA_RANGE_DECODER_CONFIG in CPPFLAGS: 0 means the basic
          version and 3 means that branchless C version.

        - Optimized the CRC32 calculation on ARM64 platforms using the
          CRC32 instructions. The instructions are optional in ARMv8.0
          and are required in ARMv8.1 and later. Runtime detection for
          the instruction is used on GNU/Linux, FreeBSD, Windows, and
          macOS. If the compiler flags indicate unconditional CRC32
          instruction support (+crc) then the generic version is not
          built.

    * Added lz4 support to xzdiff/xzcmp and xzgrep.

    * Man pages of xzdiff/xzcmp, xzgrep, and xzmore were rewritten
      to simplify licensing of the man page translations.

    * Translations:

        - Updated Chinese (simplified), German, Korean, Polish,
          Romanian, Spanish, Swedish, and Ukrainian translations.

        - Updated German, Korean, Romanian, and Ukrainian man page
          translations.

    * Small improvements to the tests.

    * Added doc/examples/11_file_info.c. It was added to the Git
      repository in 2017 but forgotten to be added into distribution
      tarballs.

    * Removed doc/examples_old. These were from 2012.

    * Removed the macos/build.sh script. It had not been updated
      since 2013.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.5.2beta","XZ Utils 5.5.2 Beta","none"
"2024-02-14 17:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-02-14 17:56:27","1970-01-01 00:00:00","none",0,"","",0,0,"misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 17:46:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 17:38:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 17:28:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 17:22:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 17:12:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 17:06:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 16:45:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",38,0,"","","","none"
"2024-02-14 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 15:26:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",34,34,"","","","none"
"2024-02-14 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 15:07:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",34,34,"","","","none"
"2024-02-14 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 13:35:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",40,37,"","","","none"
"2024-02-14 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 13:20:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-14 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-14 12:58:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-13 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 21:23:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",33,33,"","","","none"
"2024-02-13 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 20:46:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,14,"","","","none"
"2024-02-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-13 15:34:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-02-13 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 15:02:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-13 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 14:41:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",29,29,"","","","none"
"2024-02-13 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 12:38:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-13 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 12:11:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-13 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 12:05:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-13 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-13 11:26:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",35,33,"","","","none"
"2024-02-12 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-12 21:30:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-12 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-12 17:57:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-12 15:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-02-12 15:11:42","1970-01-01 00:00:00","none",0,"","",0,0,"misc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-12 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-12 15:14:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/misc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",22,22,"","","","none"
"2024-02-12 13:00:00","WatchEvent","erlend-aasland","tukaani-project/xz","2024-02-12 13:25:10","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-12 12:00:00","IssueCommentEvent","bokken","tukaani-project/xz-java","2024-02-12 12:50:12","2024-02-12 12:50:11","created",1938620841,"Is the ask here to implement ReadableByteChannel?
https://docs.oracle.com/javase/8/docs/api/java/nio/channels/ReadableByteChannel.html","",0,0,"","none","bokken",2,"[Feature Request]: SeekableXZInputStream ability to write straight into java.nio.ByteBuffer","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-11 21:00:00","PullRequestEvent","bokken","tukaani-project/xz-java","2024-02-11 21:47:41","2024-02-11 21:47:39","opened",0,"Much of the compression work is comparing ranges of binary values. These changes improve the performance for every platform on jdk9+.

For x86 this is done by using a byteArrayViewVarHandle to process 8 (64 bit) or 4 bytes at a time.

https://docs.oracle.com/javase%2F9%2Fdocs%2Fapi%2F%2F/java/lang/invoke/MethodHandles.html#byteArrayViewVarHandle-java.lang.Class-java.nio.ByteOrder-

For all other platforms, this uses the Arrays.mismatch method to do the comparison, which is implemented in the jdk itself with vectors.

https://docs.oracle.com/javase%2F9%2Fdocs%2Fapi%2F%2F/java/util/Arrays.html#mismatch-byte:A-int-int-byte:A-int-int-

For older jdks (7 and 8) on x86 or aarch64, sun.misc.Unsafe is used (if it can be found) to process 8 (64 bit) or 4 bytes at a time.

As previously discussed on the mailing list, this shows substantial improvements (~20%) in total compression times for a variety of real-world data sets for both arm and x86, with only minor regressions if forced (by system property) to legacy byte-by-byte comparisons. https://www.mail-archive.com/xz-devel@tukaani.org/msg00400.html


I have additional unit tests specific to the ArrayMismatch implementations, which can be added on top of https://github.com/tukaani-project/xz-java/pull/10

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","bokken",12,"improve byte array mismatch calculation performance","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","array_comparison_performance","81cb81abcc19d835514972b5cba1b6286b2af0e7","master","171b3625fa6c4c24e8d32b0ce8f66b5eb1c78d43",0,0,0,"unknown","",0,0,1,1143,66,15,"",0,"","",0,0,"","","","none"
"2024-02-10 21:00:00","PullRequestEvent","bokken","tukaani-project/xz-java","2024-02-10 21:57:47","2024-02-10 21:57:45","opened",0,"## Pull request checklist
Improves the performance of delta coding, as covered on the mailing list:

https://www.mail-archive.com/xz-devel@tukaani.org/msg00503.html

Unit tests are included in
https://github.com/tukaani-project/xz-java/pull/10

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","bokken",11,"delta coding performance","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","delta_performance","ac59626aacf388470aa25ae403cd4801f311870e","master","171b3625fa6c4c24e8d32b0ce8f66b5eb1c78d43",0,0,0,"unknown","",0,0,1,42,12,3,"",0,"","",0,0,"","","","none"
"2024-02-10 18:00:00","PullRequestEvent","bokken","tukaani-project/xz-java","2024-02-10 18:46:58","2024-02-10 18:46:56","opened",0,"This is a start at how the project could be converted to build with maven.

I removed the sample/demo code because code in base package seems to break the bundle plugin (generate osgi manifest).
I also added several basic unit tests.
I added maven reports for some static code analysis and test code coverage.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","bokken",10,"use maven to build project","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","maven","77919e966bae15dcde9f723ccdd90b779397e56e","master","171b3625fa6c4c24e8d32b0ce8f66b5eb1c78d43",0,0,0,"unknown","",0,0,1,1021,882,124,"",0,"","",0,0,"","","","none"
"2024-02-10 16:00:00","IssuesEvent","bokken","tukaani-project/xz-java","2024-02-10 16:37:15","2024-02-10 16:37:14","opened",0,"### Describe the Feature

maven is more commonly used now than ant, and it's pom.xml and repository have become something of a standard for open source jar distribution.
It would also simplify adding unit tests.

### Expected Complications

Some project structural changes to comply with maven convention (i.e. source moved to /src/main/java).
Naming of some secondary artifacts would likely change.
There could be future work to break out some of the sample code into separate projects, which could be part of a reactor build.

### Will I try to implement this new feature?

Yes","",0,0,"","none","bokken",9,"[Discussion]: Is there interest in moving to maven based build instead of ant","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-09 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-02-09 21:26:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-09 12:00:00","ForkEvent","bokken","tukaani-project/xz-java","2024-02-09 12:37:34","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-09 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-09 12:09:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-08 16:00:00","IssuesEvent","Larhzu","tukaani-project/xz","2024-02-08 16:03:28","2024-02-08 16:03:27","opened",0,"# Short version

Public domain has (real or perceived) legal issues in some jurisdictions. To avoid those issues, a widely-accepted public-domain-equivalent license that requires no attribution is considered for future versions. Feedback is wanted to know if this idea is good.


# Why the XZ projects are in the public domain

[LZMA SDK](https://7-zip.org/sdk.html) used to be available under the GNU LGPL and a few other license choices.
In late 2008, LZMA SDK became public domain (PD). Since XZ Utils, XZ Embedded, and XZ for Java are derived from the LZMA SDK code, I felt that it made no sense to have more restrictions on the XZ projects code than what LZMA SDK had. Thus the XZ projects have been PD as well.

For example, the [MIT License](https://spdx.org/licenses/MIT.html), [BSD 2-Clause ""Simplified"" License](https://spdx.org/licenses/BSD-2-Clause.html), or [ISC License](https://spdx.org/licenses/ISC.html) would have been more restrictive than PD as those require keeping the copyright notice and license notice when distributing copies. Pure PD has no such requirements.

I knew even in 2008 that PD might be legally complicated in some jurisdictions but I didn't see ideal alternatives (a common advice was to not create a new license). In practice it seemed that PD projects were accepted in major distros with strict policies (like Debian and Fedora). A few discussions around the problems of PD have occurred over the years though and in general it's waste of everyone's time.


# Public-domain-equivalent licenses

In 2008 there were no _widely-recognized_ and _widely-accepted_ [public-domain-equivalent licenses](https://en.wikipedia.org/wiki/Public-domain-equivalent_license). Nowadays there are at least [BSD Zero Clause License](https://spdx.org/licenses/0BSD.html) (0BSD) and [MIT No Attribution license](https://spdx.org/licenses/MIT-0.html) (MIT-0) which look good.

A few other PD-equivalent licenses exist too. For example:

* [WTFPL](https://spdx.org/licenses/WTFPL.html) uses unprofessional language (and lacks a warranty disclaimer in case it matters).

* [CC0](https://creativecommons.org/publicdomain/zero/1.0/) is also a PD dedication with a fallback license. It explicitly lacks patent license which has made [Fedora consider it unacceptable for free software in 2022](https://www.mail-archive.com/legal@lists.fedoraproject.org/msg02944.html) (still fine for files other than code).

* [The Unlicense](https://unlicense.org/) is a PD dedication with a fallback license. Compared to 0BSD and MIT-0, a PD dedication doesn't seem to add much practical value but it can fuel discussions about how the PD-dedication, fallback license, and warranty disclaimer interact with each other and so on.

Both 0BSD and MIT-0 are simple modifications to existing license texts and thus more than one person might have created the same variants independently over the years. The difficult thing is making the license texts widely accepted. 0BSD came from [toybox](https://www.landley.net/toybox/) which is [included in Android](https://www.landley.net/toybox/faq.html#opensource). MIT-0 got visibility because [Amazon uses it for example code](https://github.com/aws/mit-0). 0BSD is slightly shorter than MIT-0 while both should have the same legal effect. 0BSD got wide recognition a little earlier:

* 0BSD in [SDPX license list v2.2 on 2015-09-30](https://spdx.org/licenses/archive/archived_ll_v2.2/index.html) and [OSI approval on 2015-10-14](https://opensource.org/license/0bsd/)

* MIT-0 in [SDPX license list v3.1 in 2018](https://spdx.org/licenses/archive/archived_ll_v3.1/index.html) and [OSI approval in 2020](https://opensource.org/license/mit-0/)

GitHub has over four times [0BSD-licensed repositories](https://github.com/search?q=license%3A0bsd&type=repositories) than [MIT-0-licensed repositories](https://github.com/search?q=license%3Amit-0&type=repositories).

[Google doesn't allow contributions to PD projects](https://opensource.google/documentation/reference/patching#forbidden) or certain PD-equivalent projects: WTFPL, CC0, and The Unlicense are explicitly mentioned as _prohibited_. However, 0BSD is explicitly listed as _allowed_. (It's spelled as BSD0 on that page but it links to 0BSD.) MIT-0 isn't mentioned at all.

So clearly the legal department in one large company is happy with 0BSD. And since Android contains 0BSD-licensed code, a few other companies must be OK with 0BSD too. Even [Microsoft has released code under 0BSD](https://github.com/microsoft/tslib).

With the above considerations, my impression is that 0BSD is currently be the best of the well-known public-domain-equivalent licenses for software although the difference to MIT-0 is minuscule. The reasons to prefer 0BSD are that it's more popular, clearly accepted by legal departments of more than one large company, and that it's slightly shorter while being equivalent in legal meaning.


# The Plan

The change would affect future versions only. The public domain code in the old releases would obviously remain in the public domain.

For simplicity, all currently-PD code would be marked as 0BSD (with per-file SPDX license identifiers). If one wishes to know which parts are available as PD, one can look at the old releases or Git commit history. Those aren't going away.

We have already asked a few authors that they indeed are OK that their code would be under 0BSD. It feels a bit silly to ask since PD allows this already, but this way only a fairly small amount of code will rely solely on PD dedications. In any case, some code would remain that is from PD-only source.

Switching to 0BSD should affect users and distributors very little. PD code can be distributed without any notices about where the code came from. The same can be done with 0BSD.

(There is one tiny difference still: With 0BSD-licensed code, one shouldn't claim that it is in the public domain. Code under 0BSD is copyrighted, thus it's not literally in the public domain. Example: It is fine to take PD code and re-release it under The Unlicense. But one cannot re-release someone else's 0BSD-licensed code under The Unlicense because The Unlicense has a PD dedication and one cannot dedicate code into PD if one isn't its copyright holder. 0BSD to MIT-0 should be fine because there is no PD dedication in MIT-0.)


# Questions

1. Would using 0BSD instead of PD make legal considerations easier for distributors and contributors, even if some code still relies on PD dedications?

2. Should the XZ projects switch from PD to 0BSD for future releases?

When answering, if you represent an organization, please mention it. Otherwise the answer is assumed be an opinion of a private person.

Thank you!","",0,0,"","none","Larhzu",79,"Switch from public domain to BSD Zero Clause License?","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-08 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-08 12:10:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-02-08 07:00:00","WatchEvent","awbtux","tukaani-project/xz","2024-02-08 07:21:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-07 15:00:00","WatchEvent","matagus","tukaani-project/xz","2024-02-07 15:23:13","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-07 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-07 14:04:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-02-02 15:00:00","WatchEvent","firasuke","tukaani-project/xz","2024-02-02 15:17:55","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-02 02:00:00","WatchEvent","Ginchung","tukaani-project/xz","2024-02-02 02:51:50","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-01 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-01 17:42:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-02-01 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-02-01 12:57:09","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_crc32","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-02-01 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2024-02-01 12:52:50","2024-02-01 12:52:49","closed",0,"The CRC32 instructions in ARM64 can calculate the CRC32 result for 8 bytes in a single operation, making the use of ARM64 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if ARM64 has CRC extension running on Linux.

## Pull request checklist

Please check if your PR fulfills the following requirements:

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:

- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?

<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?

<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Enable optimized CRC32 algorithm if ARM64 support CRC extension.
  -
  -

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

Benchmark data will be updated soon","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","closed",0,"","[]",19,"NONE","2024-02-01 12:52:49","1970-01-01 00:00:00","","[]","[]","master","fa5257f38f779632ffc35b210562d51b767e30e5","master","fbb3ce541ef79cad1710e88a27a5babb5f6f8e5b",0,0,0,"unknown","",0,0,1,130,9,6,"",0,"","",0,0,"","","","none"
"2024-02-01 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-02-01 12:24:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-02-01 12:00:00","WatchEvent","YathenStianbase","tukaani-project/xz","2024-02-01 12:24:01","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-31 23:00:00","WatchEvent","theoparis","tukaani-project/xz","2024-01-31 23:38:43","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-31 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-31 19:25:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2024-01-31 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 17:45:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 16:41:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 16:24:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-31 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 16:04:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-31 15:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2024-01-31 15:30:34","2024-01-31 15:30:33","closed",0,"### Describe the bug

After updating to v5.2.12 it seems --disable-assembler flag is not fully affecting liblzma  

compiler is not standard but for this case it can be considered as clang, also tried v5.2.11 and it's working fine so I'm guessing it must be a configuration changes between these two versions

### Version

v5.2.12

### Operating System

docker/ubuntu:jammy

### Relevant log output

```shell
22.71 make[3]: Entering directory '/opt/xz-5.2.12/src/liblzma'
22.71 /bin/bash ../../libtool  --tag=CC   --mode=compile /emsdk/upstream/emscripten/emcc -DHAVE_CONFIG_H -I. -I../..  -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -I/usr/local/include/ -I/opt/zlib-1.3 -I/opt/bzip2-1.0.8 -I/opt/openssl-1.0.2s/include -I/opt/openssl-1.0.2s/test -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT liblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c -o liblzma_la-common.lo `test -f 'common/common.c' || echo './'`common/common.c
22.76 libtool: compile:  /emsdk/upstream/emscripten/emcc -DHAVE_CONFIG_H -I. -I../.. -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -I/usr/local/include/ -I/opt/zlib-1.3 -I/opt/bzip2-1.0.8 -I/opt/openssl-1.0.2s/include -I/opt/openssl-1.0.2s/test -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT liblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c common/common.c  -fPIC -DPIC -o .libs/liblzma_la-common.o
22.87 <inline asm>:1:1: error: unknown directive
22.87     1 | .symver lzma_get_progress_522,lzma_get_progress@XZ_5.2.2
22.87       | ^
22.87 <inline asm>:2:1: error: unknown directive
22.87     2 | .symver lzma_get_progress_52,lzma_get_progress@@XZ_5.2
22.87       | ^
22.89 2 errors generated.
```
","",0,0,"","none","nika-begiashvili",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","closed",0,"","[]",3,"NONE","2024-01-31 15:30:33","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-31 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-31 12:02:59","2024-01-31 12:02:57","created",1918972334,"> ```
> for (buf_end = ((size - align_amount) - 8) + buf; buf < buf_end;
> 		buf += 8)
> ```
> 
> I suspect that `clang -fsanitize=undefined` will complain at runtime. If `size` equals 1 and `align_amount` equals 0 or 1, it ends up calculating `buf - 8` or `buf - 7`. That is, the pointer arithmetic may go beyond the beginning of the buffer, which the C standard doesn't allow (but one element past the end is allowed).
> 
> Although it should work in practice on ARM64 (unless the buffer is at a weird address where the address would overflow but that's unlikely), I think it should be possible to avoid the problem without a performance penalty.

Thanks for pointing this out! I pushed a new version to avoid pointer arithmetic beyond the beginning of the buffer. I also added macOS support, but I couldn't test it since I do not have an Apple device. The Apple specific code is small so it should work but I hope someone can test this.","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",19,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-31 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-31 11:54:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2024-01-30 18:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-01-30 18:12:33","2024-01-30 18:12:32","created",1917620035,"```
for (buf_end = ((size - align_amount) - 8) + buf; buf < buf_end;
		buf += 8)

```

I suspect that `clang -fsanitize=undefined` will complain at runtime. If `size` equals 1 and `align_amount` equals 0 or 1, it ends up calculating `buf - 8` or `buf - 7`. That is, the pointer arithmetic may go beyond the beginning of the buffer, which the C standard doesn't allow (but one element past the end is allowed).

Although it should work in practice on ARM64 (unless the buffer is at a weird address where the address would overflow but that's unlikely), I think it should be possible to avoid the problem without a performance penalty.","",0,0,"","none","Larhzu",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",18,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-30 16:00:00","WatchEvent","jonaski","tukaani-project/xz","2024-01-30 16:44:04","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-30 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-30 12:51:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-29 21:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2024-01-29 21:19:33","2024-01-29 21:19:31","created",1915590564,"> @parheliamm @hansjans162 Thank you for your patience on this review. We had a few other things we were focusing on (new website, release, etc.). I promise I did not forget about this :)
> 
> I created a [branch](https://github.com/tukaani-project/xz/tree/arm64_crc32) with some additions to this PR that will also be helpful for the CRC64 CLMUL. The extent of the edits should be clear from the commit messages and code changes, but let me know if you have questions about the changes.
> 
> Can you both test this on your hardware to be sure it works correctly (and is still fast)? I was able to cross-compile it with GCC, Clang, and MSVC but I do not have an ARM64 device so I have not run the code. Thanks!

I tested your code and found a problem with the crc32_arch_optimized function. the updated function below should fix this.

I made two changes to this function. First was making align_amount the difference from 8 instead of just the remainder. I also xor this with 8 so buf_end does not change if it is already properly aligned. The second thing was changing __crc32w to __crc32d.
```c
crc_attr_target
static uint32_t
crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)
{
	crc = ~crc;

	// Align the input buffer because this was shown to be
	// significantly faster than unaligned accesses.
	const size_t align_amount = my_min(size, ((8-((uintptr_t)(buf) & 7))^8));
	const uint8_t *buf_end = buf + align_amount;

	for (; buf < buf_end; ++buf)
		crc = __crc32b(crc, *buf);

	for (buf_end = ((size - align_amount) - 8) + buf; buf < buf_end;
			buf += 8)
		crc = __crc32d(crc, aligned_read64le(buf));

	for (buf_end += 8; buf < buf_end; ++buf)
		crc = __crc32b(crc, *buf);

	return ~crc;
}
```","",0,0,"","none","hansjans162",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",16,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-29 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-29 13:50:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",95,14,"","","","none"
"2024-01-29 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-29 12:08:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-27 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-27 16:05:38","1970-01-01 00:00:00","none",0,"","",0,0,"arm64_crc32","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-27 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-27 16:20:00","2024-01-27 16:19:58","created",1913236380,"@parheliamm @hansjans162 Thank you for your patience on this review. We had a few other things we were focusing on (new website, release, etc.). I promise I did not forget about this :)

I created a [branch](https://github.com/tukaani-project/xz/tree/arm64_crc32) with some additions to this PR that will also be helpful for the CRC64 CLMUL. The extent of the edits should be clear from the commit messages and code changes, but let me know if you have questions about the changes.

Can you both test this on your hardware to be sure it works correctly (and is still fast)? I was able to cross-compile it with GCC, Clang, and MSVC but I do not have an ARM64 device so I have not run the code. Thanks!","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",15,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-27 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-27 16:12:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/arm64_crc32","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-26 23:00:00","WatchEvent","shurko0x4cfd","tukaani-project/xz","2024-01-26 23:27:43","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 17:00:00","ForkEvent","Tony7466","tukaani-project/xz","2024-01-26 17:53:46","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-26 13:01:14","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-26 12:13:01","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4.6","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-26 12:13:18","1970-01-01 00:00:00","none",0,"","",0,0,"v5.5.1alpha","tag","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-26 12:11:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-26 12:11:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",24,2,"","","","none"
"2024-01-26 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-26 12:27:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-26 12:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-01-26 12:16:54","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.5.1alpha (2024-01-26)

    * Added a new filter for RISC-V binaries. The filter can be used
      for 32-bit and 64-bit binaries with either little or big
      endianness. In liblzma, the Filter ID is LZMA_FILTER_RISCV (0x0B)
      and the xz option is --riscv. liblzma filter string syntax
      recognizes this filter as ""riscv"".

    * liblzma:

        - Added lzma_mt_block_size() to recommend a Block size for
          multithreaded encoding

        - Added CLMUL-based CRC32 on x86-64 and E2K with runtime
          processor detection. Similar to CRC64, on 32-bit x86 it
          isn't available unless --disable-assembler is used.

        - Implemented GNU indirect function (IFUNC) as a runtime
          function dispatching method for CRC32 and CRC64 fast
          implementations on x86. Only GNU/Linux (glibc) and FreeBSD
          builds will use IFUNC, unless --enable-ifunc is specified to
          configure.

        - Added definitions of mask values like
          LZMA_INDEX_CHECK_MASK_CRC32 to <lzma/index.h>.

        - The XZ logo is now included in the Doxygen generated
          documentation. It is licensed under Creative Commons
          Attribution-ShareAlike 4.0.

    * xz:

        - Multithreaded mode is now the default. This improves
          compression speed and creates .xz files that can be
          decompressed multithreaded at the cost of increased memory
          usage and slightly worse compression ratio.

        - Added new command line option --filters to set the filter
          chain using liblzma filter string syntax.

        - Added new command line options --filters1 ... --filters9 to
          set additional filter chains using liblzma filter string
          syntax. The --block-list option now allows specifying filter
          chains that were set using these new options.

        - Added support for Linux Landlock as a sandboxing method.

        - xzdec now supports pledge(2), Capsicum, and Linux Landlock as
          sandboxing methods.

        - Progress indicator time stats remain accurate after pausing
          xz with SIGTSTP.

        - Ported xz and xzdec to Windows MSVC. Visual Studio 2015 or
          later is required.

    * CMake Build:

        - Supports pledge(2), Capsicum, and Linux Landlock sandboxing
          methods.

        - Replacement functions for getopt_long() are used on platforms
          that do not have it.

    * Enabled unaligned access by default on PowerPC64LE and on RISC-V
      targets that define __riscv_misaligned_fast.

    * Tests:

        - Added two new fuzz targets to OSS-Fuzz.

        - Implemented Continuous Integration (CI) testing using
          GitHub Actions.

    * Changed quoting style from `...' to '...' in all messages,
      scripts, and documentation.

    * Added basic Codespell support to help catch typo errors.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.5.1alpha","XZ Utils 5.5.1 Alpha","none"
"2024-01-26 12:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2024-01-26 12:22:12","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.4.6 (2024-01-26)

    * Fixed a bug involving internal function pointers in liblzma not
      being initialized to NULL. The bug can only be triggered if
      lzma_filters_update() is called on a LZMA1 encoder, so it does
      not affect xz or any application known to us that uses liblzma.

    * xz:

        - Fixed a regression introduced in 5.4.2 that caused encoding
          in the raw format to unnecessarily fail if --suffix was not
          used. For instance, the following command no longer reports
          that --suffix must be used:

              echo foo | xz --format=raw --lzma2 | wc -c

        - Fixed an issue on MinGW-w64 builds that prevented reading
          from or writing to non-terminal character devices like NUL.

    * Added a new test.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.6","XZ Utils 5.4.6 Stable","none"
"2024-01-25 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-25 16:39:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-25 16:00:00","WatchEvent","YohnWang","tukaani-project/xz","2024-01-25 16:48:59","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-25 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-01-25 13:54:38","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen_tweak","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-25 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-25 13:54:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-01-25 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-25 13:54:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,7,"","","","none"
"2024-01-24 18:00:00","CreateEvent","Larhzu","tukaani-project/xz","2024-01-24 18:07:03","1970-01-01 00:00:00","none",0,"","",0,0,"doxygen_tweak","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-24 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-24 17:49:57","1970-01-01 00:00:00","none",0,"","",0,0,"xz_logo_doxygen","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:49:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,0,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:39:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:32:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:21:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-24 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 17:07:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-01-24 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 16:16:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-01-24 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 16:19:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-24 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-24 15:47:44","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-24 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-24 14:41:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",91,7,"","","","none"
"2024-01-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-24 14:32:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_logo_doxygen","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",34,4,"","","","none"
"2024-01-24 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-24 12:12:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-24 12:00:00","ReleaseEvent","JiaT75","tukaani-project/xz-embedded","2024-01-24 12:12:58","1970-01-01 00:00:00","published",0,"Notable changes since last release (20210201):

    - Added ARM64 filter support.

    - Added MicroLZMA decoder support. The MicroLZMA format does not
      support BCJ filters.

    - Added xz_dec_catrun() to support concatenated .xz files. To
      include this function, XZ_DEC_CONCATENATED must be defined in
      xz_config.h or in the compiler flags.

    - Updated website URL and contact email address.","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v20240124","XZ Embedded 20240124","none"
"2024-01-23 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-23 16:41:24","1970-01-01 00:00:00","none",0,"","",0,0,"riscv_filter","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-23 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-23 16:40:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2024-01-23 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-23 16:30:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/threads_by_default","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-23 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-23 16:23:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/threads_by_default","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",77,1,"","","","none"
"2024-01-23 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-23 15:17:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2024-01-23 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-23 15:57:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2024-01-23 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-23 14:00:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-23 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-23 14:38:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2024-01-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-23 14:18:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-23 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-23 14:13:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-23 12:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2024-01-23 12:56:35","2024-01-23 12:56:35","none",137636490,"A small description of the chart could be useful. It took me longer than I would like to admit to realize that the shift amount is row2 - row3. Also someone less familiar with the spec could look at this and be confused","src/liblzma/simple/riscv.c",31,390,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"58d6e5551a1a8fd71600552e9cfe319310d57fa5","",0,0,"","","","none"
"2024-01-22 22:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-22 22:11:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-22 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-22 15:34:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2024-01-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-22 12:06:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",13,8,"","","","none"
"2024-01-22 02:00:00","WatchEvent","crazymongo","tukaani-project/xz","2024-01-22 02:43:24","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 23:00:00","WatchEvent","TeeJay69","tukaani-project/xz","2024-01-19 23:58:28","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2024-01-19 15:09:41","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz-embedded","2024-01-19 15:40:16","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz-java","2024-01-19 15:24:47","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-01-19 15:42:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-19 15:58:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-19 15:08:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-01-19 15:17:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-19 15:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-01-19 15:39:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-19 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-19 14:32:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2024-01-19 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-19 14:43:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2024-01-19 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-19 14:17:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-19 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-19 12:18:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-18 13:00:00","PushEvent","JiaT75","tukaani-project/xz-java","2024-01-18 13:16:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-18 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-18 12:51:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-17 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-17 12:29:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-17 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-17 12:41:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-17 12:00:00","WatchEvent","JiaT75","tukaani-project/xz-java","2024-01-17 12:10:43","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-17 03:00:00","WatchEvent","yeylcode","tukaani-project/xz-java","2024-01-17 03:24:05","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-17 02:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2024-01-17 02:03:26","2024-01-17 02:03:24","created",1894816440,"> > The crc32_arch_optimized seems takes more time on my local test.
> 
> @parheliamm I'm glad your test result match up with mine. I still found that the arm64 clmul implementation for crc64 is faster than the generic and worth keeping. Maybe you can test this to confirm? I will remove crc32 clmul from my code, but keep in crc64 clmul.

@hansjans162 
I will check CRC64 with clmul on my side.
I believed the CRC64 clmul is faster than generic code.
I will share the result later.","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",14,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-16 16:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2024-01-16 16:48:38","2024-01-16 16:48:36","created",1894126740,"> The crc32_arch_optimized seems takes more time on my local test.

@parheliamm I'm glad your test result match up with mine. I still found that the arm64 clmul implementation for crc64 is faster than the generic and worth keeping. Maybe you can test this to confirm? I will remove crc32 clmul from my code, but keep in crc64 clmul.","",0,0,"","none","hansjans162",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",13,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-16 13:31:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2024-01-16 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-16 13:20:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-16 12:10:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",25,4,"","","","none"
"2024-01-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2024-01-16 12:08:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-15 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-15 17:41:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-15 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-15 14:42:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-15 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz-java","2024-01-15 13:41:37","2024-01-15 13:41:36","created",1892199500,"Hello! Thanks for the detailed bug report.

The issue here is that the failing ""sample"" encoding has the uncompressed size set in the header (0x6) and also uses an End of Payload Marker. This was originally done intentionally since XZ Utils also rejected such files until 5.2.6, when it was noticed that LZMA SDK (the 7-Zip implementation) allows such files and is documented to do so. If you test this file on xz <= 5.2.5, then it should also reject this file.

So XZ for Java needs to support these files as well and we will keep this Issue open until that is added. Thanks for bringing this to our attention!","",0,0,"","none","JiaT75",8,"[Bug]: Decompression with xz-java results in CorruptedInputException, while decompression with xz works just fine","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-14 15:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-01-14 15:44:15","2024-01-14 15:44:13","created",1890987168,"Seems to work fine at the moment. The hosting provider had reported that a denial of service attack happened 2-3 days ago.

The 5.4.2 release is available on GitHub and also on [Sourceforge](https://sourceforge.net/projects/lzmautils/files/). Future release will use github.com as the primary download URL for unrelated reasons.
","",0,0,"","none","Larhzu",78,"[Bug]: Unable to install via conan, tukanni.org is down","['bug']","closed",0,"","[]",1,"NONE","2024-01-14 15:44:13","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-14 15:00:00","IssuesEvent","Larhzu","tukaani-project/xz","2024-01-14 15:44:14","2024-01-14 15:44:14","closed",0,"### Describe the bug

Trying to install xz_utils via conan - 
```
xz_utils/5.4.2: Sources downloaded from 'conancenter'
xz_utils/5.4.2: Calling source() in C:\Users\ContainerAdministrator\.conan2\p\xz_ut55e9abba365d4\s\src
xz_utils/5.4.2: ERROR: Error downloading file https://tukaani.org/xz/xz-5.4.2.tar.gz: 'HTTPSConnectionPool(host='tukaani.org', port=443): Read timed out. (read timeout=60)'
```

Seems like https://tukaani.org is down for the past week

### Version

5.4.2

### Operating System

Windows 11

### Relevant log output

_No response_","",0,0,"","none","snweiss",78,"[Bug]: Unable to install via conan, tukanni.org is down","['bug']","closed",0,"","[]",1,"NONE","2024-01-14 15:44:13","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-14 12:00:00","IssuesEvent","snweiss","tukaani-project/xz","2024-01-14 12:50:24","2024-01-14 12:50:23","opened",0,"### Describe the bug

Trying to install xz_utils via conan - 
```
xz_utils/5.4.2: Sources downloaded from 'conancenter'
xz_utils/5.4.2: Calling source() in C:\Users\ContainerAdministrator\.conan2\p\xz_ut55e9abba365d4\s\src
xz_utils/5.4.2: ERROR: Error downloading file https://tukaani.org/xz/xz-5.4.2.tar.gz: 'HTTPSConnectionPool(host='tukaani.org', port=443): Read timed out. (read timeout=60)'
```

### Version

5.4.2

### Operating System

Windows 11

### Relevant log output

_No response_","",0,0,"","none","snweiss",78,"[Bug]: Unable to install via conan, tukanni.org is down","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-14 00:00:00","IssuesEvent","jvanheesch","tukaani-project/xz-java","2024-01-14 00:10:03","2024-01-14 00:10:01","opened",0,"### Describe the bug

Decompressing the value `{93, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 57, -104, 73, -2, -17, -28, -15, 86, -9, -33, -1, -3, -111, 16, 0}` - which is the result of compressing the string `""sample""` using lzma-js, as demonstrated [here](https://playcode.io/1718777) - results in `CorruptedInputException`, while decompression with xz works flawlessly (as does decompression with lzma-java and lzma-js).

Reproducer: https://github.com/jvanheesch/lzma

### Version

1.9

### Operating System

macOS 13.4.1 (22F82)

### Relevant log output

_No response_","",0,0,"","none","jvanheesch",8,"[Bug]: Decompression with xz-java results in CorruptedInputException, while decompression with xz works just fine","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-13 16:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 16:01:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 15:45:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 15:33:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-13 13:19:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-13 02:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2024-01-13 02:04:14","2024-01-13 02:04:12","created",1890250413,"> I've updated aarch64 CRC code with align memory access. Other parts will be rebased to the latest code.

@hansjans162 :
I did a quick tests for CRC32s with 16MB data with 1024 loops:
```
lge@kunpeng920:~/SATA/work/CRC$ ./crc
algined crc32d，time: 1268.48 ms, address=0xc52d0060
crc=0xb596e05e
unalgined crc32d，time: 1264.09 ms, address=0xc62d0061
crc=0xb596e05e
unaligned crc32_arch_optimized，time: 3178.84 ms, address=0xc62d0061
crc=0xb596e05e
```
The crc32_arch_optimized seems takes more time on my local test.","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",12,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-12 20:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2024-01-12 20:52:40","2024-01-12 20:52:38","created",1889935507,"> Would you please share your implementation here, I would like to double check the CRC32 speed on my side. For CRC32d insns, I can unroll it for larger size, e.g 4K or 16K like google did, that will be much better performance but larger code size.

@parheliamm [Here](https://github.com/hansjans162/xz/tree/tmp-arm64-crc-clmul) is the arm64 clmul implementation. Sorry for the delay I was updating my code to use the new organization. I would also like to note that my code is not finished yet. is_arch_extension_supported currently always returns true, and platform checks in configure.ac and CMakeLists.txt need to be made.","",0,0,"","none","hansjans162",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",11,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-12 14:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2024-01-12 14:23:47","2024-01-12 14:23:46","created",1889343594,"I've updated aarch64 CRC code with align memory access.
Other parts will be rebased to the latest code.","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",10,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-12 14:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-12 14:29:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-12 03:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2024-01-12 03:18:23","2024-01-12 03:18:22","created",1888369401,"> @parheliamm:
> 
> > Unaligned memory access is a default feature by ARM64, so there is no need to consider align it first.
> 
> I would expect aligned access to be faster still. In general, when unaligned access is fast on some hardware, it's fast in context of other methods for unaligned access. That is, it's much faster than doing byte-by-byte access. When the access crosses cache line or page boundaries, it may have penalties that don't occur with aligned access.
> 
> You could test with something like `uint64_t buf[2048]` and then comparing speeds of `lzma_crc32((unsigned char *)buf, sizeof(buf) - 1, 0)` and `lzma_crc32((unsigned char *)buf + 1, sizeof(buf) - 1, 0)`. If there is no difference then it's great news.
> 
> > I don't have big-endian test environments, so I cannot predict the behavior and unit test on big-endian.
> > I think support little-endian-only is a good idea. I will modify the code.
> 
> Linux has [CRC32 assembly](https://github.com/torvalds/linux/blob/master/arch/arm64/lib/crc32.S) for both endiannesses. Maybe it can help in learning what extra steps are needed for big endian support. Having said that, little-endian-only version is fine for now, especially since it sounds that no one can test the big endian code anyway.
> 
> **Edited** to add missing casts to the `lzma_crc32` calls.

Based on my local test, unaligned access is slower than aligned access.
So I will modify the code to handle unaligned data first.","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",9,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-12 02:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2024-01-12 02:26:47","2024-01-12 02:26:46","created",1888333263,"> @parheliamm:
> 
> > Unaligned memory access is a default feature by ARM64, so there is no need to consider align it first.
> 
> I would expect aligned access to be faster still. In general, when unaligned access is fast on some hardware, it's fast in context of other methods for unaligned access. That is, it's much faster than doing byte-by-byte access. When the access crosses cache line or page boundaries, it may have penalties that don't occur with aligned access.
> 
> You could test with something like `uint64_t buf[2048]` and then comparing speeds of `lzma_crc32((unsigned char *)buf, sizeof(buf) - 1, 0)` and `lzma_crc32((unsigned char *)buf + 1, sizeof(buf) - 1, 0)`. If there is no difference then it's great news.
> 
> > I don't have big-endian test environments, so I cannot predict the behavior and unit test on big-endian.
> > I think support little-endian-only is a good idea. I will modify the code.
> 
> Linux has [CRC32 assembly](https://github.com/torvalds/linux/blob/master/arch/arm64/lib/crc32.S) for both endiannesses. Maybe it can help in learning what extra steps are needed for big endian support. Having said that, little-endian-only version is fine for now, especially since it sounds that no one can test the big endian code anyway.
> 
> **Edited** to add missing casts to the `lzma_crc32` calls.

Based on my test, there is no difference between aligned access and unaligned access on my kunpeng 920 ARM64 platform.
Here is the test result:
lge@kunpeng920:~/SATA/work/CRC$ ./crc
algined，time: 1454.59 ms, address=0xcfad0060
crc=0xb596e05e
unalgined，time: 1454.59 ms, address=0xd0ad0061
crc=0xb596e05e

","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",9,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-11 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2024-01-11 17:16:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-11 14:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-01-11 14:25:40","2024-01-11 14:25:38","created",1887297605,"@parheliamm:
> Unaligned memory access is a default feature by ARM64, so there is no need to consider align it first.

I would expect aligned access to be faster still. In general, when unaligned access is fast on some hardware, it's fast in context of other methods for unaligned access. That is, it's much faster than doing byte-by-byte access. When the access crosses cache line or page boundaries, it may have penalties that don't occur with aligned access.

You could test with something like `uint64_t buf[2048]` and then comparing speeds of `lzma_crc32(buf, sizeof(buf) - 1, 0)` and `lzma_crc32(buf + 1, sizeof(buf) - 1, 0)`. If there is no difference then it's great news.

> I don't have big-endian test environments, so I cannot predict the behavior and unit test on big-endian.
> I think support little-endian-only is a good idea. I will modify the code.

Linux has [CRC32 assembly](https://github.com/torvalds/linux/blob/master/arch/arm64/lib/crc32.S) for both endiannesses. Maybe it can help in learning what extra steps are needed for big endian support. Having said that, little-endian-only version is fine for now, especially since it sounds that no one can test the big endian code anyway.
","",0,0,"","none","Larhzu",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",8,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-11 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-11 14:05:33","2024-01-11 14:05:31","created",1887228657,"@hansjans162 Thanks for continuing your work on ARM64 CLMUL! Your benchmarks so far sound promising and will likely be a great value to liblzma. We look forward to seeing the code and further benchmarks when they are ready :)

It sounds like runtime checks will be needed, but please let us know if anyone finds reasons to contradict this.

We did a refactor to the existing CRC related files for code organization and small optimization related reasons. This change means that architecture specific CRC optimizations should go into header files that are included in the corresponding crc32/64_fast.c file. The reasons for this are best explained in the commit message [here](https://github.com/tukaani-project/xz/commit/419f55f9dfc2df8792902b8953d50690121afeea).

Based on the refactor, @parheliamm, please put your changes into `crc32_arm64.h`, then include that header file in `crc32_fast.c`. 

Similarly, Hans please refactor what you have to create `crc64_arm64.h` with your CRC64 CLMUL work (and include this file in `crc64_fast.c`). You are likely still blocked until this PR is complete since the build changes and runtime checks should be coordinated between the branches. Feel free to send us a link to your branch whenever you have something ready that you want to show us :)

We apologize for the refactor after this was already submitted, but this PR helped inform that refactor (and gave us the needed motivation to close out the branch). Thank you everyone so far for you patience and your contributions so far!

","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-11 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2024-01-11 13:37:58","1970-01-01 00:00:00","none",0,"","",0,0,"crc_edits","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-11 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-11 13:08:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_edits","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-11 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-11 12:40:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_edits","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2024-01-11 00:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2024-01-11 00:31:10","2024-01-11 00:31:09","created",1885983775,"> Over the holidays I got an odroid which has the crc instruction and pmull, so I have been working on an arm64 clmul implementation for crc32 and crc64. I have compared this to my implementation with clmul and found that the performance is similar to mine for smaller inputs, but becomes faster the larger the input size. From what I have found it seems like the arm64 crc instruction is also more supported than the pmull instruction that the clmul implementation depends on.
> 
> I will look into seeing how commonly supported the crc instruction and pmull are, and if runtime checks would be necessary. I have already run into cases where pmull has not been supported so it is likely we would need runtime check if we wanted to include crc64 clmul. The speed increase of crc clmul and the crc instruction were both very significant for larger bytes. The crc64 clmul reached up to 3 times as fast for these inputs.
> 
> I still need to clean up my code and remove the crc32 clmul so I can make a pr for it after this is resolved.

Would you please share your implementation here, I would like to double check the CRC32 speed on my side.","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",6,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-10 22:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2024-01-10 22:24:02","2024-01-10 22:24:00","created",1885838273,"Over the holidays I got an odroid which has the crc instruction and pmull, so I have been working on an arm64 clmul implementation for crc32 and crc64. I have compared this to my implementation with clmul and found that the performance is similar to mine for smaller inputs, but becomes faster the larger the input size. From what I have found it seems like the arm64 crc instruction is also more supported than the pmull instruction that the clmul implementation depends on.

I will look into seeing how commonly supported the crc instruction and pmull are, and if runtime checks would be necessary. I have already run into cases where pmull has not been supported so it is likely we would need runtime check if we wanted to include crc64 clmul. The speed increase of crc clmul and the crc instruction were both very significant for larger bytes. The crc64 clmul reached up to 3 times as fast for these inputs.

I still need to clean up my code and remove the crc32 clmul so I can make a pr for it after this is resolved.","",0,0,"","none","hansjans162",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-10 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-10 16:02:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_edits","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",78,6,"","","","none"
"2024-01-10 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-10 16:19:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_edits","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-10 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2024-01-10 16:23:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_edits","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2024-01-10 12:00:00","IssueCommentEvent","thesamesam","tukaani-project/xz","2024-01-10 12:13:38","2024-01-10 12:13:36","created",1884736146,">So if all processors in practice actually supported CRC32 in armv8.0, 

Unfortunately, I have an arm64 machine without crc32, but it is an odd one.","",0,0,"","none","thesamesam",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-10 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-10 12:12:53","2024-01-10 12:12:51","created",1884735121,"> > `getauxval` is a libc function (not inline) so it's unsafe to combine it with ifunc. That is, ifunc would need to stay disabled on ARM64.
> 
> Try to fix in the next push.
> 
> > Are ARM64 processors without CRC32 common enough that runtime detection is worth it? Even they are, `#ifdef __ARM_FEATURE_CRC32` could be used at compile time to detect if CRC32 can be assumed to be supported.
> 
> ""crc"" is a part of ARMv8.1 feature. To make all armv8 processors happy, it need to detect the processor feature on runtime.
> 
> > The crc_edits branch is still under consideration so that may change where the code will go, possibly making things simpler.

Hello! Thanks for the PR. The point about not needing runtime detection likely needs more research. From a quick search, my understanding is that CRC32 instruction is optional in armv8.0 and required in ARMv8.1. So if all processors in practice actually supported CRC32 in armv8.0, then it will really simplify this feature since the runtime detection adds significant complexity. The runtime detection likely requires avoiding ifunc and having different versions based on the platform (`getauxval()`, `IsProcessorFeaturePresent()`, etc).

A note on compile time detection: __ARM_FEATURE_CRC32 isn't supported by MSVC so we will need another way to detect CRC32 instruction support there.","",0,0,"","none","JiaT75",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-10 04:00:00","WatchEvent","sorairolake","tukaani-project/xz","2024-01-10 04:21:52","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-09 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2024-01-09 19:43:46","2024-01-09 19:43:45","created",1883673406,"Thanks! A quick few early comments (I or Jia will comment more later):

The `Data` pointer seems pointless. I don't see a reason to cast away the const qualifier.

ARM64 processors tend to support unaligned memory access but would it still be worth it (better speed) to align the `buf` first with calls to `__builtin_aarch64_crc32b`? See how aligning is done in the generic code.

I'm not sure but I guess the input `crc` variable doesn't need byte-swapping but reading the input in loop will need it. So it should use `read64le` instead, or `aligned_read64le` if `buf` is first aligned. This should be investigated or the code should be marked little-endian-only if we aren't sure.

`getauxval` is a libc function (not inline) so it's unsafe to combine it with ifunc. That is, ifunc would need to stay disabled on ARM64.

Are ARM64 processors without CRC32 common enough that runtime detection is worth it? Even they are, `#ifdef __ARM_FEATURE_CRC32` could be used at compile time to detect if CRC32 can be assumed to be supported.

The crc_edits branch is still under consideration so that may change where the code will go, possibly making things simpler.
","",0,0,"","none","Larhzu",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-09 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2024-01-09 12:46:06","1970-01-01 00:00:00","none",0,"","",0,0,"xz_logo_doxygen","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-09 09:00:00","PullRequestEvent","parheliamm","tukaani-project/xz","2024-01-09 09:38:02","2024-01-09 09:38:00","opened",0,"The CRC32 instructions in ARM64 can calculate the CRC32 result for 8 bytes in a single operation, making the use of ARM64 instructions much faster compared to the general CRC32 algorithm.

Optimized CRC32 will be enabled if ARM64 has CRC extension running on Linux.

## Pull request checklist

Please check if your PR fulfills the following requirements:

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:

- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?

<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?

<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Enable optimized CRC32 algorithm if ARM64 support CRC extension.
  -
  -

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

Benchmark data will be updated soon","",0,0,"","none","parheliamm",77,"Speed up CRC32 calculation on ARM64","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","master","9d1e1b2137053b10c87918df17b762e412627868","master","15cf3f04f270d707a5c91cc0208b23b6db42b774",0,0,0,"unknown","",0,0,1,73,6,6,"",0,"","",0,0,"","","","none"
"2024-01-08 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2024-01-08 15:11:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,8,"","","","none"
"2024-01-08 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-08 13:44:08","2024-01-08 13:44:06","created",1881035084,"Thanks for sharing your Dockerfile. The reason that 5.2.11 ""works"" is because there was a bug when disabling threads. See [this issue](https://github.com/tukaani-project/xz/issues/45). The bug was fixed in 5.2.12, so with your `configure` options you are building shared libraries again. So you can use `--disable-shared` instead of `--enable-static=yes` and this will disable symbol versioning as a side effect (symbol versioning is only enabled when building a shared library). Or, if you actually want a shared library, you can use `--disable-symbol-versions` as I mentioned before.

Hope this helps!","",0,0,"","none","JiaT75",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-06 17:00:00","IssueCommentEvent","nika-begiashvili","tukaani-project/xz","2024-01-06 17:34:28","2024-01-06 17:34:27","created",1879763148,"Hi,

Strangely 5.2.11 works for me [here's my docker file](https://github.com/nika-begiashvili/libarchivejs/blob/v2/lib/tools/docker/Dockerfile)","",0,0,"","none","nika-begiashvili",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-05 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2024-01-05 13:17:52","2024-01-05 13:17:51","created",1878647289,"Hello!

There were no changes to any of the assembly related code between `5.2.11` and `5.2.12`. I see you are using `emscripten`, so I was able to recreate your error on both `5.2.11` and `5.2.12` using:

```bash
emconfigure ./configure
make
```

```shell
<inline asm>:1:1: error: unknown directive
.symver lzma_get_progress_522,lzma_get_progress@XZ_5.2.2
^
<inline asm>:2:1: error: unknown directive
.symver lzma_get_progress_52,lzma_get_progress@@XZ_5.2
^
```

So the problem isn't a difference between `5.2.11` and `5.2.12`. Also, unless you are building on 32-bit x86 the `disable-assembler` flag has no effect. In order to build, you need to pass the `disable-symbol-versions` flag.

```bash
emconfigure ./configure --disable-symbol-versions
make
```

The underlying issue here is that `emcc` (and I believe WebAssembly in general) does not support symbol versioning so it needs to be manually disabled. `emconfigure` does not change the underlying `$host_os` or `$host_cpu` so `configure` will guess that symbol versioning is supported on GNU or FreeBSD systems.
","",0,0,"","none","JiaT75",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-05 10:00:00","IssuesEvent","nika-begiashvili","tukaani-project/xz","2024-01-05 10:03:46","2024-01-05 10:03:45","opened",0,"### Describe the bug

After updating to v5.2.12 it seems --disable-assembler flag is not fully affecting liblzma  

compiler is not standard but for this case it can be considered as clang, also tried v5.2.11 and it's working fine so I'm guessing it must be a configuration changes between these two versions

### Version

v5.2.12

### Operating System

docker/ubuntu:jammy

### Relevant log output

```shell
22.71 make[3]: Entering directory '/opt/xz-5.2.12/src/liblzma'
22.71 /bin/bash ../../libtool  --tag=CC   --mode=compile /emsdk/upstream/emscripten/emcc -DHAVE_CONFIG_H -I. -I../..  -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -I/usr/local/include/ -I/opt/zlib-1.3 -I/opt/bzip2-1.0.8 -I/opt/openssl-1.0.2s/include -I/opt/openssl-1.0.2s/test -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT liblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c -o liblzma_la-common.lo `test -f 'common/common.c' || echo './'`common/common.c
22.76 libtool: compile:  /emsdk/upstream/emscripten/emcc -DHAVE_CONFIG_H -I. -I../.. -I../../src/liblzma/api -I../../src/liblzma/common -I../../src/liblzma/check -I../../src/liblzma/lz -I../../src/liblzma/rangecoder -I../../src/liblzma/lzma -I../../src/liblzma/delta -I../../src/liblzma/simple -I../../src/common -DTUKLIB_SYMBOL_PREFIX=lzma_ -I/usr/local/include/ -I/opt/zlib-1.3 -I/opt/bzip2-1.0.8 -I/opt/openssl-1.0.2s/include -I/opt/openssl-1.0.2s/test -fvisibility=hidden -Wall -Wextra -Wvla -Wformat=2 -Winit-self -Wmissing-include-dirs -Wstrict-aliasing -Wfloat-equal -Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wold-style-definition -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -g -O2 -MT liblzma_la-common.lo -MD -MP -MF .deps/liblzma_la-common.Tpo -c common/common.c  -fPIC -DPIC -o .libs/liblzma_la-common.o
22.87 <inline asm>:1:1: error: unknown directive
22.87     1 | .symver lzma_get_progress_522,lzma_get_progress@XZ_5.2.2
22.87       | ^
22.87 <inline asm>:2:1: error: unknown directive
22.87     2 | .symver lzma_get_progress_52,lzma_get_progress@@XZ_5.2
22.87       | ^
22.89 2 errors generated.
```
","",0,0,"","none","nika-begiashvili",76,"[Bug]: --disable-assembler broken since v5.2.12","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-03 17:00:00","WatchEvent","MeirP-3","tukaani-project/xz","2024-01-03 17:38:01","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-03 12:00:00","WatchEvent","Jnnes","tukaani-project/xz","2024-01-03 12:50:30","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2024-01-01 12:00:00","WatchEvent","Dart55","tukaani-project/xz","2024-01-01 12:08:54","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-30 15:00:00","ForkEvent","rohitk98","tukaani-project/xz","2023-12-30 15:53:12","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-28 22:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-12-28 22:55:52","1970-01-01 00:00:00","none",0,"","",0,0,"xz_pledge","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-28 16:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-12-28 16:50:45","1970-01-01 00:00:00","none",0,"","",0,0,"memcmplen_arm64","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-28 16:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-12-28 16:54:14","2023-12-28 16:54:12","created",1871341248,"The 8-byte version is now enabled in memcmplen.h for ARM64 in the master branch. It will be included in XZ Utils 5.6.0. Thanks!","",0,0,"","none","Larhzu",75,"Performance improvements on ARM64","[]","closed",0,"","[]",3,"NONE","2023-12-28 16:54:12","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-28 16:00:00","PullRequestEvent","Larhzu","tukaani-project/xz","2023-12-28 16:54:13","2023-12-28 16:54:13","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:

- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [x] Build related changes
- [ ] Documentation content changes
- [x] Other (please describe): 


## What is the current behavior?

<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?

<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Change LZMA_MEMCMPLEN_EXTRA to 8 on ARM64
- select enable-unsafe-type-punning if enable_unaligned_access enabled
  -

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

Performance improvements on ARM64 with 2 commits:

    vanilla:
    Compressor name         Compress. Decompress. Compr. size  Ratio Filename
    memcpy                   5102 MB/s  5183 MB/s   211957760 100.00 silesia.tar
    xz 5.2.5 -0              15.9 MB/s  51.6 MB/s    62579868  29.52 silesia.tar
    xz 5.2.5 -1              11.8 MB/s  57.5 MB/s    58408297  27.56 silesia.tar
    xz 5.2.5 -2              7.53 MB/s  59.9 MB/s    56708167  26.75 silesia.tar
    xz 5.2.5 -3              5.02 MB/s  61.6 MB/s    55745576  26.30 silesia.tar
    xz 5.2.5 -4              3.15 MB/s  62.7 MB/s    52106950  24.58 silesia.tar
    xz 5.2.5 -5              2.29 MB/s  65.1 MB/s    49960648  23.57 silesia.tar
    xz 5.2.5 -6              1.94 MB/s  65.5 MB/s    49196155  23.21 silesia.tar
    xz 5.2.5 -7              1.83 MB/s  65.7 MB/s    48926731  23.08 silesia.tar
    xz 5.2.5 -8              1.87 MB/s  66.4 MB/s    48768992  23.01 silesia.tar
    xz 5.2.5 -9              1.85 MB/s  66.5 MB/s    48747544  23.00 silesia.tar



Patched:

```
Compressor name         Compress. Decompress. Compr. size  Ratio Filename
memcpy                   5209 MB/s  5265 MB/s   211957760 100.00 silesia.tar
xz 5.2.5 -0              16.4 MB/s  51.9 MB/s    62579868  29.52 silesia.tar
xz 5.2.5 -1              12.0 MB/s  57.8 MB/s    58408297  27.56 silesia.tar
xz 5.2.5 -2              8.26 MB/s  60.2 MB/s    56708167  26.75 silesia.tar
xz 5.2.5 -3              5.14 MB/s  61.6 MB/s    55745576  26.30 silesia.tar
xz 5.2.5 -4              3.29 MB/s  62.7 MB/s    52106950  24.58 silesia.tar
xz 5.2.5 -5              2.42 MB/s  64.9 MB/s    49960648  23.57 silesia.tar
xz 5.2.5 -6              2.03 MB/s  65.6 MB/s    49196155  23.21 silesia.tar
xz 5.2.5 -7              1.93 MB/s  65.6 MB/s    48926731  23.08 silesia.tar
xz 5.2.5 -8              1.94 MB/s  66.3 MB/s    48768992  23.01 silesia.tar
xz 5.2.5 -9              1.91 MB/s  66.4 MB/s    48747544  23.00 silesia.tar
done... (cIters=1 dIters=1 cTime=1.0 dTime=2.0 chunkSize=1706MB cSpeed=0MB)
```

","",0,0,"","none","parheliamm",75,"Performance improvements on ARM64","[]","closed",0,"","[]",3,"NONE","2023-12-28 16:54:12","1970-01-01 00:00:00","3d5f9ac24fc72a6933485e0a92cd1b95947176f3","[]","[]","master","913541910857519860e830b21a3937a0b7fceaaa","master","183a62f0b540ff4d23cc19b2b6bc2525f0bd64df",0,0,0,"dirty","",0,0,2,8,1,2,"",0,"","",0,0,"","","","none"
"2023-12-28 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-12-28 16:48:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-12-22 17:00:00","WatchEvent","ImaginaryStargazer","tukaani-project/xz","2023-12-22 17:19:36","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-22 09:00:00","WatchEvent","jiaoyk","tukaani-project/xz","2023-12-22 09:14:41","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-21 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-12-21 14:03:26","1970-01-01 00:00:00","none",0,"","",0,0,"xzdec_sandbox","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-21 13:29:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-12-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-21 13:43:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,1,"","","","none"
"2023-12-21 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-21 12:30:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-12-21 01:00:00","IssueCommentEvent","parheliamm","tukaani-project/xz","2023-12-21 01:20:14","2023-12-21 01:20:12","created",1865344776,"> I created a branch memcmplen_arm64 which should do the same as your first commit and also adds MSVC support on ARM64 (untested).
> 
> The commit message of your second commit has significantly higher numbers on the memcpy line. I'm not familiar with lzbench but I wonder if 10 % difference in memcpy could indicate that there was something different on the test computer and thus the benchmark results could be slightly different too. The difference in compression speed is small so it would be good to be sure that it's not due to noise.
> 
> In any case, the second patch cannot be accepted. Unfortunately you have misunderstood the problem with type punning. It's about the C programming language and how modern compilers optimize while still staying within the exact requirements of the C standard. Unsafe use of type punning breaks strict aliasing rules and might result in broken executables. The instruction set being used doesn't matter; even if unaligned access wasn't supported by the hardware, type punning would be problematic with modern compilers when accessing aligned data.
> 
> The memcpy method used by tuklib_integer.h should compile to a single instruction with modern GCC and Clang/LLVM versions when building for a target that supports fast unaligned access. Thus the use of type punning shouldn't make a difference on ARM64. However, it's possible that compilers do something slightly differently still and thus there could be a difference in practice, or the violation of aliasing rules allows compilers to do something that happens to work but could cause problems some day. It's a bit annoying situation but I don't know any better way.
>

Yes, you are correct, I disassemble the code, not only memcpy but also UNSAFE_TYPE_PUNNING are all interpreted as below:
```
 640:	f9400000 	ldr	x0, [x0]
 644:	d65f03c0 	ret
```

So the 2nd patch is useless, we can keep the 1st patch only.

> Thanks!

","",0,0,"","none","parheliamm",75,"Performance improvements on ARM64","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-20 19:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-12-20 19:51:50","1970-01-01 00:00:00","none",0,"","",0,0,"memcmplen_arm64","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-20 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-12-20 19:51:59","2023-12-20 19:51:58","created",1865048052,"I created a branch memcmplen_arm64 which should do the same as your first commit and also adds MSVC support on ARM64 (untested).

The commit message of your second commit has significantly higher numbers on the memcpy line. I'm not familiar with lzbench but I wonder if 10 % difference in memcpy could indicate that there was something different on the test computer and thus the benchmark results could be slightly different too. The difference in compression speed is small so it would be good to be sure that it's not due to noise.

In any case, the second patch cannot be accepted. Unfortunately you have misunderstood the problem with type punning. It's about the C programming language and how modern compilers optimize while still staying within the exact requirements of the C standard. Unsafe use of type punning breaks strict aliasing rules and might result in broken executables. The instruction set being used doesn't matter; even if unaligned access wasn't supported by the hardware, type punning would be problematic with modern compilers when accessing aligned data.

The memcpy method used by tuklib_integer.h should compile to a single instruction with modern GCC and Clang/LLVM versions when building for a target that supports fast unaligned access. Thus the use of type punning shouldn't make a difference on ARM64. However, it's possible that compilers do something slightly differently still and thus there could be a difference in practice, or the violation of aliasing rules allows compilers to do something that happens to work but could cause problems some day. It's a bit annoying situation but I don't know any better way.

Thanks!","",0,0,"","none","Larhzu",75,"Performance improvements on ARM64","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-20 16:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-12-20 16:28:36","1970-01-01 00:00:00","none",0,"","",0,0,"xz_pledge","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-20 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 16:10:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2023-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 14:22:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-12-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 14:56:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-12-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 13:39:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-20 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-20 11:58:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xzdec_sandbox","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-20 04:00:00","WatchEvent","omasanori","tukaani-project/xz","2023-12-20 04:10:14","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-19 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-19 14:23:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",158,9,"","","","none"
"2023-12-19 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-19 13:24:02","1970-01-01 00:00:00","none",0,"","",0,0,"xzdec_sandbox","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-19 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-19 13:36:00","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/website_url_change","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-12-19 01:00:00","PullRequestEvent","parheliamm","tukaani-project/xz","2023-12-19 01:29:33","2023-12-19 01:29:31","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:

- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:

- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [x] Other (please describe): 


## What is the current behavior?

<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?

<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Change LZMA_MEMCMPLEN_EXTRA to 8 on ARM64
- select enable-unsafe-type-punning if enable_unaligned_access enabled
  -

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

Performance improvements on ARM64 with 2 commits:

    vanilla:
    Compressor name         Compress. Decompress. Compr. size  Ratio Filename
    memcpy                   5102 MB/s  5183 MB/s   211957760 100.00 silesia.tar
    xz 5.2.5 -0              15.9 MB/s  51.6 MB/s    62579868  29.52 silesia.tar
    xz 5.2.5 -1              11.8 MB/s  57.5 MB/s    58408297  27.56 silesia.tar
    xz 5.2.5 -2              7.53 MB/s  59.9 MB/s    56708167  26.75 silesia.tar
    xz 5.2.5 -3              5.02 MB/s  61.6 MB/s    55745576  26.30 silesia.tar
    xz 5.2.5 -4              3.15 MB/s  62.7 MB/s    52106950  24.58 silesia.tar
    xz 5.2.5 -5              2.29 MB/s  65.1 MB/s    49960648  23.57 silesia.tar
    xz 5.2.5 -6              1.94 MB/s  65.5 MB/s    49196155  23.21 silesia.tar
    xz 5.2.5 -7              1.83 MB/s  65.7 MB/s    48926731  23.08 silesia.tar
    xz 5.2.5 -8              1.87 MB/s  66.4 MB/s    48768992  23.01 silesia.tar
    xz 5.2.5 -9              1.85 MB/s  66.5 MB/s    48747544  23.00 silesia.tar



Patched:

```
Compressor name         Compress. Decompress. Compr. size  Ratio Filename
memcpy                   5209 MB/s  5265 MB/s   211957760 100.00 silesia.tar
xz 5.2.5 -0              16.4 MB/s  51.9 MB/s    62579868  29.52 silesia.tar
xz 5.2.5 -1              12.0 MB/s  57.8 MB/s    58408297  27.56 silesia.tar
xz 5.2.5 -2              8.26 MB/s  60.2 MB/s    56708167  26.75 silesia.tar
xz 5.2.5 -3              5.14 MB/s  61.6 MB/s    55745576  26.30 silesia.tar
xz 5.2.5 -4              3.29 MB/s  62.7 MB/s    52106950  24.58 silesia.tar
xz 5.2.5 -5              2.42 MB/s  64.9 MB/s    49960648  23.57 silesia.tar
xz 5.2.5 -6              2.03 MB/s  65.6 MB/s    49196155  23.21 silesia.tar
xz 5.2.5 -7              1.93 MB/s  65.6 MB/s    48926731  23.08 silesia.tar
xz 5.2.5 -8              1.94 MB/s  66.3 MB/s    48768992  23.01 silesia.tar
xz 5.2.5 -9              1.91 MB/s  66.4 MB/s    48747544  23.00 silesia.tar
done... (cIters=1 dIters=1 cTime=1.0 dTime=2.0 chunkSize=1706MB cSpeed=0MB)
```

","",0,0,"","none","parheliamm",75,"Performance improvements on ARM64","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","master","913541910857519860e830b21a3937a0b7fceaaa","master","183a62f0b540ff4d23cc19b2b6bc2525f0bd64df",0,0,0,"unknown","",0,1,2,8,1,2,"",0,"","",0,0,"","","","none"
"2023-12-18 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-18 16:37:47","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 16:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2023-12-18 16:19:07","1970-01-01 00:00:00","none",0,"","",0,0,"minor_changes","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 16:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-12-18 16:19:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 12:00:00","CreateEvent","JiaT75","tukaani-project/xz-java","2023-12-18 12:11:04","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-18 11:00:00","CreateEvent","JiaT75","tukaani-project/xz-embedded","2023-12-18 11:53:39","1970-01-01 00:00:00","none",0,"","",0,0,"website_url_change","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-16 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-12-16 13:19:42","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-16 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-12-16 13:44:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-16 13:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-12-16 13:18:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-16 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-16 12:54:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,5,"","","","none"
"2023-12-15 16:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-12-15 16:05:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-15 11:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-15 11:53:17","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-15 06:00:00","WatchEvent","Chensiyy","tukaani-project/xz","2023-12-15 06:57:04","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-12 05:00:00","WatchEvent","RKitSeal","tukaani-project/xz","2023-12-12 05:37:55","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-09 05:00:00","WatchEvent","abanoubha","tukaani-project/xz","2023-12-09 05:28:29","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-07 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-07 15:21:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-12-07 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-12-07 12:09:58","1970-01-01 00:00:00","none",0,"","",0,0,"oss_fuzz","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-07 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-12-07 12:12:09","2023-12-07 12:12:07","created",1845233755,"@mvatsyk-lsg Thanks for the commands to use for a local test. You caught my mistake but testing locally also highlighted it. I just merged your commits into master.

Great work with this! Thanks for being so flexible and responsive with all the changes.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","closed",0,"","[]",22,"CONTRIBUTOR","2023-12-07 12:09:42","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-07 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-12-07 12:09:43","2023-12-07 12:09:42","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","closed",0,"","[]",21,"CONTRIBUTOR","2023-12-07 12:09:42","1970-01-01 00:00:00","e895e684387cf2952da65f7e6325377722bde9f1","[]","[]","master","bc27dd7034c08757762d05f1c6d050094fb241ec","master","685094b8e1c1aa1bf934de0366ca42ef599d25f7",0,0,0,"unknown","",31,0,5,268,88,12,"",0,"","",0,0,"","","","none"
"2023-12-06 15:00:00","CommitCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-06 15:18:09","2023-12-06 15:18:09","none",134340953,"The same declaration is repeated on the line 24","tests/ossfuzz/fuzz_decode_stream.c",27,37,"","none","mvatsyk-lsg",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"f342b524483e85586ff9bed8a21d0333225ed65c","",0,0,"","","","none"
"2023-12-06 15:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-06 15:01:24","2023-12-06 15:01:22","created",1843065062,"@JiaT75 the changes look good to me! I have also updated the pull request to the oss-fuzz repo. To test the new fuzzing setup locally, you can run the following commands on your machine:

```bash
# clone my fork of the oss-fuzz repo with pull request changes
git clone https://github.com/mvatsyk-lsg/oss-fuzz
cd oss-fuzz/

# update the Dockerfile to clone the oss_fuzz branch specifically
sed 's/git clone /git clone -b oss_fuzz /' projects/xz/Dockerfile

# build project image
python3 infra/helper.py build_image 'xz'

# generate introspector report 
python3 infra/helper.py introspector 'xz'
```
","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",21,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-06 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-12-06 15:43:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/oss_fuzz","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-12-06 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-12-06 12:16:33","1970-01-01 00:00:00","none",0,"","",0,0,"oss_fuzz","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-06 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-12-06 12:21:35","2023-12-06 12:21:34","created",1842760084,"@mvatsyk-lsg Thanks! Things are looking pretty good now. I created a separate [branch](https://github.com/tukaani-project/xz/tree/oss_fuzz) with all of your commits plus a minor cleanup commit. Can you test this branch to be sure I didn't break anything during my changes?

As I'm sure you know, the draft PR in OSS-Fuzz needs updating from all the changes we made here. I want to do a quick local test before merging but it will be easier if the OSS-Fuzz changes are updated on that PR.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",20,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-06 10:00:00","WatchEvent","rlconst","tukaani-project/xz-java","2023-12-06 10:40:25","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-05 15:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-05 15:31:34","2023-12-05 15:31:32","created",1841029573,"@JiaT75 done! 
","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",19,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-05 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-12-05 12:43:20","2023-12-05 12:43:18","created",1840722453,"Thank you @DavidKorczynski for the explanation and the advice for combining fuzzers. I had not thought of using a byte from the fuzz input to control the fuzzer's entry point.

With that in mind, @mvatsyk-lsg we should combine `fuzz_encode_stream.c` and `fuzz_encode_stream_light.c` into just one fuzzer. We can use the same name `fuzz_encode_stream.c` for this fuzz target. We can use the first byte of input to help us determine the preset level. So the function could look like:

```c
extern int
LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
{
	if (size == 0)
		return 0;

	lzma_stream strm = LZMA_STREAM_INIT;

	uint32_t preset_level;

	uint8_t decider = inbuf[0];

	switch (decider) {
	case 0:
	case 1:
	case 5:
		preset_level = decider;
		break;
	case 6:
		preset_level = 0 | LZMA_PRESET_EXTREME;
		break;
	case 7:
		preset_level = 3 | LZMA_PRESET_EXTREME;
		break;
	}

	lzma_options_lzma opt_lzma;
	if (lzma_lzma_preset(&opt_lzma, preset_level)){
		fprintf(stderr, ""lzma_lzma_preset() failed\n"");
		abort();
	}

	// Initialize filter chain for lzma_stream_decoder() call
	// Use single LZMA2 filter for encoding
	lzma_filter filters[2];
	filters[0].id = LZMA_FILTER_LZMA2;
	filters[0].options = &opt_lzma;
	filters[1].id = LZMA_VLI_UNKNOWN;

	// Initialize the stream encoder using the above
	// filter chain and CRC64.
	if (lzma_stream_encoder(&strm,
			filters, LZMA_CHECK_CRC64) != LZMA_OK) {
		fprintf(stderr, ""lzma_stream_encoder() failed\n"");
		abort();
	}

	fuzz_code(&strm, inbuf, inbuf_size);

	// Free the allocated memory.
	lzma_end(&strm);
	return 0;
}
```

This can test a few different dictionary sizes, match finders, nice length, modes, and depth levels with the same fuzzer.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",18,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-05 00:00:00","IssueCommentEvent","DavidKorczynski","tukaani-project/xz","2023-12-05 00:40:03","2023-12-05 00:40:02","created",1839804133,"Thanks for reaching out @mvatsyk-lsg -- I didn't go through the whole discussion here so am trying to give an OSS-Fuzz perspective from a limited understanding of this PR.

Regarding OSS-Fuzz resources, then I think by default it makes sense to not be too concerned about this. OSS-Fuzz relies on [Clusterfuzz](https://github.com/google/clusterfuzz) which has a set of scheduling/prioritisation strategies. A single fuzzer for CRC may be a bit much. However, it's also possible to merge a bunch of simple fuzzers into a single larger function:

```cpp
int LLVMFuzzerTestOneInput(uint8_t *data, size_t size) {

  if (size < 1) {
    return 0;
  }
  uint8_t decider = data[0];
  data++;
  size--;
  switch decider {
      case 1: { fuzz_first_entrypoint(data, size); break; }
      case 2: { fuzz_second_entrypoint(data, size); break; }
      ...
      case N
    }
}
```

This is often a common strategy for hitting smaller functions. In fact, you can even do this by throwing the same smaller fuzzers into the larger meaningful fuzzers -- the fuzzer will through it's mutational genetic algorithm start exploring the code where there is more code to explore, so more efforts will be ""put in the right places"".

The scheduling in Clusterfuzz will be responsible for dividing time allocated to each of the targets.","",0,0,"","none","DavidKorczynski",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",17,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-04 16:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-04 16:27:49","2023-12-04 16:27:48","created",1839003321,"Okay, @JiaT75, I've rebased the pull request. Does the commit history look good to you?","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",16,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-04 16:00:00","PullRequestEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-04 16:12:51","2023-12-04 16:12:50","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","closed",0,"","[]",15,"NONE","2023-12-04 16:12:50","1970-01-01 00:00:00","b42e5043ca73ec4dc79686c9074e435100b520fd","[]","[]","master","12b89bcc9915090eb42ae638e565af44b6832a23","master","685094b8e1c1aa1bf934de0366ca42ef599d25f7",0,0,0,"unknown","",31,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-04 16:00:00","PullRequestEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-04 16:26:07","2023-12-04 16:26:06","reopened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",15,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","b42e5043ca73ec4dc79686c9074e435100b520fd","[]","[]","master","7a40101663ed514d613d79c45f7dab4e279ca95f","master","685094b8e1c1aa1bf934de0366ca42ef599d25f7",0,0,0,"unknown","",31,1,5,299,88,14,"",0,"","",0,0,"","","","none"
"2023-12-03 10:00:00","WatchEvent","Brugarolas","tukaani-project/xz","2023-12-03 10:21:26","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-02 12:00:00","ForkEvent","xels034","tukaani-project/xz-java","2023-12-02 12:36:48","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 19:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-01 19:04:43","2023-12-01 19:04:41","created",1836630018,"Hi @Larhzu !

> Seems that [renaming a fuzz target](https://google.github.io/oss-fuzz/faq/#what-happens-when-i-rename-a-fuzz-target-) requires renaming the accumulated corpora too.

In the existing setup, the corpora are generated dynamically in a [build.sh](https://github.com/google/oss-fuzz/pull/11279/commits/97ba2c05158912b2c8a5a2dd6c721fa31f2ed819) file. So, any modifications have to be done in a separate [pull request](https://github.com/google/oss-fuzz/pull/11279). After we merge this pull request, I will go ahead and update the latter one to properly reflect all the changes. 

> Does adding more fuzzers mean that the project-specific fuzzing resources (processor time) will be divided between the fuzzers? With a quick look I didn't find any advice about resource usage in OSS-Fuzz docs and it's not discussed much in this thread either.

I did not find any hard cap of the execution time for the OSS Fuzz itself. However, their CI integration, CIFuzz will divide the [shared fuzzing time of 10 minutes](https://google.github.io/oss-fuzz/getting-started/continuous-integration/#how-it-works) between all fuzz targets in the project. 

Getting back to the OSS Fuzz, each fuzz target will be run on [a dedicated machine](https://google.github.io/oss-fuzz/faq/#what-are-the-specs-on-your-machines) with 1 CPU and a cap of ~ 2GB RAM. 

Since the fuzzers are written in C/C++, I doubt that introducing new fuzzers, at least for now, will decrease the overall quality of the fuzzing output. On my test setup inside a VM with similar hardware parameters, the fuzzing and the generation of an introspector report took around 5 minutes.

> The value of code coverage in fuzzing is unclear. If extending coverage by a few simple lines of code could slow down fuzzing of more important parts of the code, does it make sense to extend fuzzing coverage in that case?

This absolutely makes sense. However, current fuzzing setup is very limited and covers only half of the lib (since `--disable-encoders` flag is used during the compilation). Its runtime coverage is 116/162 functions. The setup proposed in this pull request extends the fuzzing coverage to all common encoders and decoders to increase the runtime coverage to 270/360 functions.

> fuzz_encode_alone.c would test end of payload marker (EOPM) encoding in LZMA but otherwise it doesn't test much that won't be tested by fuzz_encode_stream.c. They both use the LZMA encoder in the end. So it seems that fuzz_encode_alone.c isn't useful and could maybe even be harmful due to resource usage unless the fuzzers are smart enough to spot when code paths become identical.

> fuzz_decode_alone.c splits into three different decoders depending on the input. Yet the three decoders are fuzzed separately too (stream, alone, lzip). So the only extra fuzzed thing is the small auto_decoder.c.

We can remove those, however this decreases the runtime fuzzing coverage from 270/360 to 249/360 functions. Should we proceed with deleting the fuzz targets?","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",12,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 17:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-12-01 17:19:16","2023-12-01 17:19:14","created",1836491554,"Thanks to both of you for your work so far!

There are a few things I would like to understand better. I have only skimmed OSS-Fuzz's docs so I might be asking silly questions, sorry.

1. Seems that [renaming a fuzz target](https://google.github.io/oss-fuzz/faq/#what-happens-when-i-rename-a-fuzz-target-) requires renaming the accumulated corpora too.

2. Does adding more fuzzers mean that the project-specific fuzzing resources (processor time) will be divided between the fuzzers? With a quick look I didn't find any advice about resource usage in OSS-Fuzz docs and it's not discussed much in this thread either.

3. The value of code coverage in fuzzing is unclear. *If* extending coverage by a few simple lines of code could slow down fuzzing of more important parts of the code, does it make sense to extend fuzzing coverage in that case? I'm thinking of cases where an old-school code review shouldn't take a lot of time (code snippets that are about 200 lines each and do nothing unusually complicated). Or perhaps these should be fuzzed at first but disabled after some time if they find nothing?

Examples of remaining significant overlap in the new fuzzing targets:

* fuzz_encode_alone.c would test end of payload marker (EOPM) encoding in LZMA but otherwise it doesn't test much that won't be tested by fuzz_encode_stream.c. They both use the LZMA encoder in the end. So it seems that fuzz_encode_alone.c isn't useful and could _maybe_ even be harmful due to resource usage unless the fuzzers are smart enough to spot when code paths become identical.

* fuzz_decode_alone.c splits into three different decoders depending on the input. Yet the three decoders are fuzzed separately too (stream, alone, lzip). So the only extra fuzzed thing is the small auto_decoder.c.

I don't know enough about the fuzzing methods to know what actually makes sense. I would like to be assured that adding all these fuzzers adds real value.

Thanks!
","",0,0,"","none","Larhzu",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",11,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 17:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-12-01 17:14:18","2023-12-01 17:14:19","created",1412378423,"Just listing the names in ""Authors:"" works best. I suspect that I didn't write the exact fuzz.c but it's based on the example programs in doc/examples which I did write. With these particular files, the author info doesn't matter to me, it's just that someone auditing where the code came from might care about ""Authors:"" convering everyone.","tests/ossfuzz/fuzz_decode_alone.c",0,0,"","none","Larhzu",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","0fffb448ab9f0a51007f1b03fb3290436ed6dc15","[]","[]","master","9394218ec8062f5aa608141f3e42f9694d4a950a","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,41 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_alone.c
+/// \brief      Fuzz test program for liblzma lzma_alone_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma",8,"9394218ec8062f5aa608141f3e42f9694d4a950a","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 17:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-12-01 17:14:19","2023-12-01 17:14:19","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","0fffb448ab9f0a51007f1b03fb3290436ed6dc15","[]","[]","master","9394218ec8062f5aa608141f3e42f9694d4a950a","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-12-01 13:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-01 13:58:50","2023-12-01 13:58:48","created",1836163853,"> > Also, I am now questioning whether the addition of `.lzma_raw` files is needed, since the corresponding fuzzers were removed from the pull request
> 
> Its safe to remove the `.lzma_raw` files and the `tests/files/README` changes.
> 
> Thanks for all the changes so far! I feel we are getting close to this being ready.

Thank you for the review! I've reverted the changes and added the `max_len=4096` to all fuzzer options. ","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",10,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 13:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-01 13:06:19","2023-12-01 13:06:18","created",1836089976,"Also, I am now questioning whether the addition of `.lzma_raw` files is needed, since the corresponding fuzzers were removed from the pull request","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",8,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 13:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-01 13:03:57","2023-12-01 13:03:56","created",1836086873,"Apart from the possible re-addition of `options` files with `max_len` options back to the pull request, everything is ready for your review @JiaT75 ! ","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-12-01 13:39:02","2023-12-01 13:39:02","created",1412114193,"> Good! What size would you consider reasonable for the test cases?

The 4096 number you were using before seems good. That should be more than enough to trigger the sanitizers if there is a possible bad code path","tests/ossfuzz/config/fuzz_decode_alone.options",2,2,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","c0170977d3a65431ada2db938e8a94cbdebef957","[]","[]","master","0f81fb417f8b4ddbdecd6479fde67e4a0cd60f71","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_lzma.dict",2,"0f81fb417f8b4ddbdecd6479fde67e4a0cd60f71","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-12-01 13:39:03","2023-12-01 13:39:02","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","c0170977d3a65431ada2db938e8a94cbdebef957","[]","[]","master","0f81fb417f8b4ddbdecd6479fde67e4a0cd60f71","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-12-01 12:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-01 12:35:27","2023-12-01 12:35:26","created",1836048761,"A follow up on the redundant fuzzers: I ran the setup without them, and the coverage difference is indeed negligible. I am removing them from the pull request","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",6,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-12-01 12:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-12-01 12:37:22","2023-12-01 12:37:23","created",1412055614,"I apologize, this was a bad suggestion from me. I didn't realize the `ret` value was being used in the error message, which could be helpful if the fuzz targets somehow fail when creating the coders. Don't worry about reverting this, I will make the change after we merge.","tests/ossfuzz/fuzz_decode_alone.c",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,41 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_alone.c
+/// \brief      Fuzz test program for liblzma lzma_alone_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize a LZMA alone decoder using the above memory usage limit.
+	lzma_stream strm = LZMA_STREAM_INIT;
+	lzma_ret ret = lzma_alone_decoder(&strm, MEM_LIMIT);
+	if (ret != LZMA_OK) {",28,"c765d096b9e0a60855d7a690685345f9d8caf177","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 12:00:00","PullRequestReviewCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-12-01 12:33:14","2023-12-01 12:33:15","created",1412052362,"Good! What size would you consider reasonable for the test cases?  ","tests/ossfuzz/config/fuzz_decode_alone.options",2,2,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_lzma.dict",2,"c765d096b9e0a60855d7a690685345f9d8caf177","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 12:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-12-01 12:25:16","2023-12-01 12:25:16","created",1412044487,"Based on the [libFuzzer docs](https://llvm.org/docs/LibFuzzer.html#options), it seems that the default is a special 0 value that indicates the maximum input length should be inferred from the corpus. Most of our test files are small (I believe the largest is ~50 Kb .xz file) so its likely that the default value is good enough in practice.

However it could be a good idea to set an upper bound on a size we think is reasonable, especially for the fuzz targets that are meant to test handling bytes early in the input stream. So I would vote for this.","tests/ossfuzz/config/fuzz_decode_alone.options",2,2,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_lzma.dict",2,"c765d096b9e0a60855d7a690685345f9d8caf177","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-12-01 12:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-12-01 12:37:23","2023-12-01 12:37:23","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-12-01 12:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-12-01 12:25:17","2023-12-01 12:25:16","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","6828cf74b51d3840e18d1e407de3861a3da238ad","[]","[]","master","c765d096b9e0a60855d7a690685345f9d8caf177","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-12-01 03:00:00","IssueCommentEvent","kianmeng","tukaani-project/xz","2023-12-01 03:53:38","2023-12-01 03:53:37","created",1835414185,":partying_face: :partying_face: :partying_face: :partying_face: :partying_face: ","",0,0,"","none","kianmeng",74,"Docs: Fix typos","[]","closed",0,"","[]",6,"CONTRIBUTOR","2023-11-30 15:08:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 19:00:00","PullRequestReviewCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-11-30 19:00:15","2023-11-30 19:00:15","created",1411142218,"I believe the oss-fuzz will fall back to the default max length of the generated input of 4096 bytes if the `max_len` option is not provided in the `.options` file, so setting it explicitly is not necessary. My bad for not standardising the options file formats. 

We can either remove the files entirely as per the above comment, or include this option explicitly in each config file. Which options sounds better to you?","tests/ossfuzz/config/fuzz_decode_alone.options",2,2,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_lzma.dict",2,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 19:00:00","PullRequestReviewEvent","mvatsyk-lsg","tukaani-project/xz","2023-11-30 19:00:16","2023-11-30 19:00:15","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:37:12","2023-11-30 17:37:12","created",1411052376,"We can also omit this fuzz target. It should be covered by `fuzz_encode_alone`, which is mostly covered by `lzma_encode_stream()` anyway","tests/ossfuzz/fuzz_encode_raw.c",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,53 @@
+///////////////////////////////////////////////////////////////////////////////",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:27:06","2023-11-30 17:27:06","created",1411018779,"We can probably omit this fuzz target since its interesting code paths will be hit by `fuzz_encode_stream`","tests/ossfuzz/fuzz_encode_raw_lzma2.c",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,53 @@
+///////////////////////////////////////////////////////////////////////////////",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:20:05","2023-11-30 17:20:05","created",1411000976,"Since we treat tabs at 8 character width, this line is more than 80 characters. We try to always wrap our lines at 80 characters","tests/ossfuzz/fuzz_decode_raw_lzma2.c",42,42,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,52 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_raw_lzma2.c
+/// \brief      Fuzz test program for liblzma lzma_raw_decoder() w/ LZMA2
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize filter chain for lzma_raw_decoder() call
+	// Use single LZMA2 filter for decoding
+	lzma_options_lzma opt_lzma;
+	
+	lzma_filter filters[LZMA_FILTERS_MAX + 1];
+	filters[0].id = LZMA_FILTER_LZMA2;
+	filters[0].options = &opt_lzma;
+	filters[1].id = LZMA_VLI_UNKNOWN;
+
+	// Initialize a raw decoder using the above filter chain.
+	lzma_stream strm = LZMA_STREAM_INIT;
+	lzma_ret ret = lzma_raw_decoder(&strm, filters);
+	
+	if (ret != LZMA_OK) {
+		// This should never happen unless the system has
+		// no free memory or address space to allow the small
+		// allocations that the initialization requires.
+		fprintf(stderr, ""lzma_raw_decoder() LZMA 2 failed (%d)\n"", ret);",42,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 17:08:23","2023-11-30 17:08:23","created",1410980788,"I'm not convinced this fuzz target is needed. The interesting LZMA decoding code should be covered by `fuzz_decode_alone` already.","tests/ossfuzz/fuzz_decode_raw.c",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:37:13","2023-11-30 17:37:12","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:34:09","2023-11-30 17:34:08","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:20:06","2023-11-30 17:20:05","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:17:49","2023-11-30 17:17:48","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 17:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 17:08:24","2023-11-30 17:08:23","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","ForkEvent","daihao0615","tukaani-project/xz","2023-11-30 16:22:23","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:42:10","2023-11-30 16:42:10","created",1410948981,"There is no need to check `ret == LZMA_STREAM_END` here. The while loop would end if `ret` isn't `LZMA_OK` here.","tests/ossfuzz/fuzz_common.h",27,27,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  
+    // Give the whole input buffer at once to liblzma.
+	// Output buffer isn't initialized as liblzma only writes to it.
+	stream->next_in = inbuf;
+	stream->avail_in = inbuf_size;
+	stream->next_out = OUTBUF;
+	stream->avail_out = sizeof(OUTBUF);
+
+    lzma_ret ret;
+	while ((ret = lzma_code(stream, LZMA_FINISH)) == LZMA_OK) {
+		if (stream->avail_out == 0 || ret == LZMA_STREAM_END) {",27,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:49:02","2023-11-30 16:49:03","created",1410957833,"Since `ret` isn't used outside of this if statement anymore, its enough to just say:

if (lzma_alone_decoder(&strm, MEM_LIMIT) != LZMA_OK)

and remove the `ret` variable from these programs.","tests/ossfuzz/fuzz_decode_alone.c",28,28,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,41 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_alone.c
+/// \brief      Fuzz test program for liblzma lzma_alone_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize a LZMA alone decoder using the above memory usage limit.
+	lzma_stream strm = LZMA_STREAM_INIT;
+	lzma_ret ret = lzma_alone_decoder(&strm, MEM_LIMIT);
+	if (ret != LZMA_OK) {",28,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:53:29","2023-11-30 16:53:29","created",1410963294,"The memory limit has moved to the header file so this comment should be updated","tests/ossfuzz/fuzz_decode_auto.c",25,25,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,52 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       fuzz_decode_auto.c
+/// \brief      Fuzz test program for liblzma lzma_auto_decoder()
+//
+//  Author:     Maksym Vatsyk
+//
+//  Based on Lasse Collin's original fuzz.c fuzzer for liblzma
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+#include ""fuzz_common.h""
+
+
+extern int
+LLVMFuzzerTestOneInput(const uint8_t *inbuf, size_t inbuf_size)
+{
+	// Initialize an Auto decoder using the above memory usage limit.",25,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:55","2023-11-30 16:34:55","created",1410938033,"Missing an empty newline at the end of the file","tests/ossfuzz/fuzz_common.h",43,43,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  
+    // Give the whole input buffer at once to liblzma.
+	// Output buffer isn't initialized as liblzma only writes to it.
+	stream->next_in = inbuf;
+	stream->avail_in = inbuf_size;
+	stream->next_out = OUTBUF;
+	stream->avail_out = sizeof(OUTBUF);
+
+    lzma_ret ret;
+	while ((ret = lzma_code(stream, LZMA_FINISH)) == LZMA_OK) {
+		if (stream->avail_out == 0 || ret == LZMA_STREAM_END) {
+			// outbuf became full. We don't care about the
+			// uncompressed data there, so we simply reuse
+			// the outbuf and overwrite the old data.
+			stream->next_out = OUTBUF;
+			stream->avail_out = sizeof(OUTBUF);
+		}
+	}
+
+	// LZMA_PROG_ERROR should never happen as long as the code calling
+	// the liblzma functions is correct. Thus LZMA_PROG_ERROR is a sign
+	// of a bug in either this function or in liblzma.
+	if (ret == LZMA_PROG_ERROR) {
+		fprintf(stderr, ""lzma_code() returned LZMA_PROG_ERROR\n"");
+		abort();
+	}
+}",43,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:20","2023-11-30 16:34:20","created",1410937247,"It looks like there is a mix of tabs and spaces. In .c files we use tabs, and treat the tab width as 8 characters. I'm sure other projects do this differently since there is no right answer to the tabs vs spaces debate","tests/ossfuzz/fuzz_common.h",19,19,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  
+    // Give the whole input buffer at once to liblzma.
+	// Output buffer isn't initialized as liblzma only writes to it.",19,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:32:25","2023-11-30 16:32:26","created",1410934630,"The function name should start on a new line. And this should be static. So the first line:
static void

Second line:
fuzz_code(...

This is to match our style in the project. Having the function name starting at column index 0 helps certain tools and text editors search for function names.","tests/ossfuzz/fuzz_common.h",17,17,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB
+
+
+void fuzz_code(lzma_stream *stream, const uint8_t *inbuf, size_t inbuf_size) {  ",17,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:27:49","2023-11-30 16:27:50","created",1410928176,"This variable should also be static (`static const ...`)","tests/ossfuzz/fuzz_common.h",14,14,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include ""lzma.h""
+
+
+// Output buffer for decompressed data. This is write only; nothing cares
+// about the actual data written here.
+static uint8_t OUTBUF[4096];
+
+// Some header values can make liblzma allocate a lot of RAM
+// (up to about 4 GiB with liblzma 5.2.x). We set a limit here to
+// prevent extreme allocations when fuzzing.
+const uint64_t MEM_LIMIT = 300 << 20; // 300 MiB",14,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:24:12","2023-11-30 16:24:13","created",1410923080,"The header comments are missing from this file","tests/ossfuzz/fuzz_common.h",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,43 @@
+#include <inttypes.h>",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 16:18:33","2023-11-30 16:18:33","created",1410911695,"Instead of **mode** it should be **preset**. In the documentation **mode** in the context of compression mode refers to a match finder setting (fast or normal).

The LZMA properties resulting in 0x5d are lc=3, lp=0, pb=2. It could be helpful to mention this once, and then only mention the dictionary size for each .dict entry since the LZMA properties aren't changing.","tests/ossfuzz/config/fuzz_lzma.dict",7,7,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,20 @@
+# first 5 header bytes of .lzma archives based on the info from
+# - extra/scanlzma/scanlzma.c (lines 32-52)
+# - src/liblzma/common/alone_encoder.c (lines 107-126)
+# - https://github.com/cscott/lzma-purejs/blob/master/FORMAT.md
+# - manual hexdump of data produced by the lzma CLI suite
+
+# compression mode 1    (LZMA properties = 0x5d, dict size = 0x00100000)",7,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 16:00:00","WatchEvent","daihao0615","tukaani-project/xz","2023-11-30 16:22:13","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:42:11","2023-11-30 16:42:10","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:49:03","2023-11-30 16:49:03","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:53:30","2023-11-30 16:53:29","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:56","2023-11-30 16:34:55","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:34:21","2023-11-30 16:34:20","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:32:26","2023-11-30 16:32:25","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:27:50","2023-11-30 16:27:49","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:24:14","2023-11-30 16:24:13","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 16:18:34","2023-11-30 16:18:33","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 15:55:16","2023-11-30 15:55:16","created",1410880961,"Does every fuzz target need a `.options` file? If not, then I don't think we need to include a `.options` file if the fuzz target doesn't need anything special","tests/ossfuzz/config/fuzz_decode_auto.options",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"cc0f39c288b99977edab4079feddac7a0426c6ab","cc0f39c288b99977edab4079feddac7a0426c6ab",0,0,"","","","none"
"2023-11-30 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 15:11:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-30 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 15:08:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-30 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-30 15:58:40","2023-11-30 15:58:39","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","9154df5f6bcb8e7f77e1f10429a37514efaf58e3","[]","[]","master","cc0f39c288b99977edab4079feddac7a0426c6ab","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-30 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 14:08:49","2023-11-30 14:08:48","created",1833851100,"> @JiaT75 I've addressed your comments and tested the new Makefile and fuzz targets' code on a local setup. They seem to compile and work just fine. A quick question: should I go back and edit the description of all commits before the review, or will you be making a squash during the merge?

We like to keep our commits small and focused, so we will likely want more than one commit for this many changes. For now, don't worry about squashing your commits until the review is basically done. At the end we can figure out how many commits are appropriate for this and squash accordingly. So feel free to keep adding fix up commits as we go.

I'll start reviewing your new changes.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 13:00:00","ForkEvent","kianmeng","tukaani-project/xz","2023-11-30 13:37:51","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 13:59:53","2023-11-30 13:59:51","created",1833836564,"Hello!

Thanks for the PR. Could you please separate this into two separate commits? One for the typo fix in `file_io.c` and another for the typo fixes in the test files. 

In the commit messages, the first should be prefixed with ""xz:"" instead of ""Docs:"". We use the ""Docs:"" prefix when referring to changes to things like the README, man pages, INSTALL, etc. The second commit should be prefixed with ""Tests:"".","",0,0,"","none","JiaT75",74,"Docs: Fix typos","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 13:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-11-30 13:34:17","2023-11-30 13:34:15","created",1833795913,"@JiaT75 I've addressed your comments and tested the new Makefile and fuzz targets' code on a local setup. They seem to compile and work just fine. A quick question: should I go back and edit the description of all commits before the review, or will you be making a squash during the merge?","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 13:00:00","PullRequestEvent","kianmeng","tukaani-project/xz","2023-11-30 13:47:27","2023-11-30 13:47:26","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Typos fixes of `codespell`.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- Found new typos via `typos --hidden --format brief`
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","kianmeng",74,"Docs: Fix typos","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","fix-typos","68a6a62617a29845ba5593027650c6adea305979","master","35558adf9c45e5597f2c8dbd969885dd484038d2",0,0,0,"unknown","",0,1,1,4,4,3,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-30 12:53:37","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_detect_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-30 12:18:21","2023-11-30 12:18:19","created",1833658924,"> @mgood7123 Thanks again for reporting and helping us test this. I would like to add you to our `THANKS` file, but I did not see your name on your GitHub profile. Is there a name you would like us to use for you in our `THANKS` file? Otherwise you may remain anonymous :)

Matthew Good","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",16,"NONE","2023-11-30 12:10:16","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-30 12:12:50","2023-11-30 12:12:49","created",1833651026,"@mgood7123 Thanks again for reporting and helping us test this. I would like to add you to our `THANKS` file, but I did not see your name on your GitHub profile. Is there a name you would like us to use for you in our `THANKS` file? Otherwise you may remain anonymous :)","",0,0,"","none","JiaT75",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",15,"NONE","2023-11-30 12:10:16","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","IssuesEvent","JiaT75","tukaani-project/xz","2023-11-30 12:10:17","2023-11-30 12:10:16","closed",0,"### Describe the bug

```
localhost:~/llvm_18$ release_BUILD/LIBXZ/OUT/bin/lzma
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
```

```cmake
if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/xz ${CMAKE_BINARY_DIR}/LIBXZ
  )
endif()

if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ/OUT/lib/liblzma.a)
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      -D CMAKE_BUILD_TYPE=Release
      -D ""CMAKE_C_FLAGS=${CMAKE_C_FLAGS}""
      -D ""CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}""
      -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -D CMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/LIBXZ/OUT
      -D BUILD_SHARED_LIBS=OFF
      -B ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --build ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --install ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
endif()
```

### Version

5.5.0 git master https://github.com/tukaani-project/xz/commit/837ea40b1c9d4998cac4500b55171bf33e0c31a6

### Operating System

alpine linux

### Relevant log output

_No response_","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",14,"NONE","2023-11-30 12:10:16","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-30 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 12:41:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-30 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-30 12:10:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-29 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 16:52:49","2023-11-29 16:52:47","created",1832327289,"> @JiaT75 thanks a lot for the swift review! I will start implementing the suggested changes asap. I am going to focus on fixing the highlighted issues before implementing any new fuzzers, if that makes sense :)

Makes perfect sense. I noted the BCJ filter fuzzing as option to consider. We don't necessarily need to implement it or implement it right away. Just an idea of something we could also be fuzzing if we agree the value is there.

> * I completely agree that the fuzz targets' code can be reduced via templates and shared code. Would you like to simply move the common functionality into a separate header file, or to generate the fuzzers' code dynamically by replacing the lines in a template file as well?

I think the simplest approach would be to use a common separate header file. Creating a dynamic template would take some extra build logic whereas an extra header file would only require updating the Makefile.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-29 15:00:00","IssueCommentEvent","mvatsyk-lsg","tukaani-project/xz","2023-11-29 15:59:46","2023-11-29 15:59:45","created",1832193611,"@JiaT75 thanks a lot for the swift review! I will start implementing the suggested changes asap. I am going to focus on fixing the highlighted issues before implementing any new fuzzers, if that makes sense :) 

To address some of your comments above:
- The new fuzz targets were chosen to cover most of the `liblzma` common use cases from the code of XZ utils (i.e. we expanded the tests to cover the decoders and encoders used by the CLI utilities) 
- I completely agree that the fuzz targets' code can be reduced via templates and shared code. Would you like to simply move the common functionality into a separate header file, or to generate the fuzzers' code dynamically by replacing the lines in a template file as well? 

","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-29 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:07:44","2023-11-29 13:07:43","created",1831864854,"Hello!

Thanks for the PR. This is a great start to improving the fuzz testing. I will start with a few overall comments here and then add some more specific comments directly on the commits themselves.

First, we need to be sure that we are using the fuzz resources in the best way we can. Its easy to think of the OSS-Fuzz resources as unlimited, but each project can only be fuzzed so much. We should only include a fuzz target if it provides clear value and is testing an important part of liblzma that isn't being covered by a different fuzz target. Otherwise, less useful fuzz targets will take away compute time from the more useful ones. So, can you justify the reasoning behind each of the new fuzz targets? For instance, I am not sure that the raw encoder and decoder fuzz targets are useful since their important code paths are already covered by every other fuzz target. The raw coders don't have important header data, its just raw LZMA data. I am likely missing an important fuzz case, but in my mind I can think of three useful things to fuzz in our library:

- Metadata encoding/decoding (magic bytes, file headers, block headers, lzma2 chunk headers, etc.)
- Filter data encoding/decoding (LZMA1, BCJ, delta)
- Check functions (CRC32, CRC64, SHA256)

Next, the code itself has a lot of repeated boilerplate. Each of the fuzz targets has very little unique code. For instance, this could be reorganized into a shared header file that provides a function for encoding and a function for decoding. These functions can take the coder init function (lzma_alone_decoder(), lzma_auto_decoder(), etc.) as a function pointer arg and any needed flags or options.

We could also consider fuzzing the various BCJ filters (x86, PowerPC, ARM64, etc). These filters are designed to be applied to executable data, but will be run on non-executable data very often. So its possible that there are hidden data corruption bugs on an unexpected input sequence since they are mostly tested on executable data, making it a good candidate for fuzz testing. These filters cannot be used as raw coders at this time, so they will have to be combined in a filter chain with LZMA1/2. If we want to look for data corruption bugs, we should encode a chunk, then decode it and compare if the decoded version exactly matches the original data.

For your commit messages, we like to keep a consistent format. When we release, our Changelog is generated automatically from the contents of the commit messages. Also it helps us maintain our codebase better when the commit messages are descriptive and clear. For your commits, please have them start with the category of what they are changing. For these, I would prepend ""Tests:"" to the first line of each commit. The first line of each commit should be a brief description of the purpose of the commit. The following lines should explain what was changed and why. Make sure to wrap the lines of the commit message to at most 73 characters since different commit log viewers may or may not wrap long lines and it helps keep a consistent look in our Changelog.","",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:43:01","2023-11-29 13:43:02","created",1409301912,"This Makefile could be done with wildcards instead of repeating the same commands for each fuzz target since all of the .c/.o files become fuzz targets. ","tests/ossfuzz/Makefile",0,0,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1,6 +1,61 @@
-fuzz: fuzz.c
-	$(CC) $(CFLAGS) -c fuzz.c -I ../../src/liblzma/api/
-	$(CXX) $(CXXFLAGS) $(LIB_FUZZING_ENGINE) fuzz.o -o $(OUT)/fuzz \
+fuzz_decode_xz: fuzz_decode_xz.c
+	$(CC) $(CFLAGS) -c fuzz_decode_xz.c -I ../../src/liblzma/api/
+	$(CXX) $(CXXFLAGS) $(LIB_FUZZING_ENGINE) fuzz_decode_xz.o -o $(OUT)/fuzz_decode_xz \
+	      ../../src/liblzma/.libs/liblzma.a
+
+fuzz_decode_xz_crc: fuzz_decode_xz_crc.c",9,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:22:32","2023-11-29 13:22:32","created",1409275186,"There isn't a need to mention the previous filename. This information is capture in the commit history","tests/ossfuzz/fuzz_decode_stream.c",9,8,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1,10 +1,13 @@
 ///////////////////////////////////////////////////////////////////////////////
 //
-/// \file       fuzz.c
+/// \file       fuzz_decode_stream.c
 /// \brief      Fuzz test program for liblzma
 //
 //  Author:     Lasse Collin
 //
+//  Original fuzz.c fuzzer, renamed to fuzz_decode_stream to conform with new",9,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:20:49","2023-11-29 13:20:50","created",1409273144,"Raw LZMA2 does not use the .xz magic bytes, so this dictionary isn't that helpful for the fuzz test","tests/ossfuzz/config/fuzz_decode_raw_lzma2.options",2,2,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,2 @@
+[libfuzzer]
+dict = fuzz_xz.dict",2,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-11-29 13:15:16","2023-11-29 13:15:16","created",1409266227,"This dictionary could also include valid lzip header bytes for versions 0 and 1. See the [file format](https://www.nongnu.org/lzip/lzip_talk_ghm_2019.html) for what these bytes should be.","tests/ossfuzz/config/fuzz_lzip.dict",1,1,"","none","JiaT75",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1 @@
+""LZIP""",1,"955b9ce080fa671492b770795815be77ce911a32","2fb6e6e40d32ec8c72fc9b75adf8b9eb05b37a71",0,0,"","","","none"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:43:02","2023-11-29 13:43:02","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:22:33","2023-11-29 13:22:32","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:20:51","2023-11-29 13:20:50","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:15:17","2023-11-29 13:15:16","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 13:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-11-29 13:10:39","2023-11-29 13:10:38","created",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: N/A


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Total number of fuzzers increased from 1 to 12
- 6 new fuzzers for decompressing supported archive types
- 5 new fuzzers for compressing data into supported archive types
- Added LZMA Raw test files based on the existing `.lzma` ones

## Does this introduce a breaking change?

- [x] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->
This pull request will temporarily break existing oss-fuzz setup until the `oss-fuzz` repo accepts [a corresponding pull request](https://github.com/google/oss-fuzz/pull/11279) with the updated fuzzer configuration on their side.

## Other information

<!-- Any other information that is important to this PR. -->
The improvements to the fuzzing setup were made as a part of Google ISE project.","",0,0,"","none","mvatsyk-lsg",73,"Improve existing oss-fuzz coverage","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d3a9ede6ed9bb67acd02f7da183075432ccdfd25","[]","[]","master","955b9ce080fa671492b770795815be77ce911a32","master","12b89bcc9915090eb42ae638e565af44b6832a23",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-11-29 09:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-29 09:42:55","2023-11-29 09:42:54","created",1831549696,"> > Maybe we could just add a define for musl
> > 
> > make -D MUSL=1
> 
> The default build options need to create a working build on all of our supported platforms. Right now people can just disable ifunc for a working musl build as you discovered with `-DALLOW_ATTR_IFUNC=OFF`. That is only a temporary workaround since we want to make our build systems as easy to use for people as possible.
> 
> I have been working a [branch](https://github.com/tukaani-project/xz/tree/ifunc_detect_fix) to address this. The idea is to change the ifunc option for our CMake and Autotools build from ON/OFF or enable/disable to auto/ON/OFF. 'auto' will try to enforce using ifunc with glibc or BSD platforms only. ON will always try to use ifunc and OFF will obviously disable ifunc completely. Both auto and ON will still test the compiler if it supports `__attribute__((__ifunc__()))`.
> 
> If you can test the new branch on Alpine that would be very helpful. I tested with `musl-gcc` wrapper and things seemed to work. We haven't decided 100% if this is the approach we want to take but it seems promising so far.
> 
> Thanks for all of your help so far!

That works ^^","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",14,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-28 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 14:12:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-11-28 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 12:12:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-11-28 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 12:03:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-11-28 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-28 11:58:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-28 10:00:00","ForkEvent","mvatsyk-lsg","tukaani-project/xz","2023-11-28 10:15:36","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-28 03:00:00","WatchEvent","hom","tukaani-project/xz","2023-11-28 03:17:02","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-27 13:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-27 13:08:17","2023-11-27 13:08:16","created",1827802576,"Alright

On Mon, 27 Nov 2023, 11:04 pm Jia Tan, ***@***.***> wrote:

> Maybe we could just add a define for musl
>
> make -D MUSL=1
>
> The default build options need to create a working build on all of our
> supported platforms. Right now people can just disable ifunc for a working
> musl build as you discovered with -DALLOW_ATTR_IFUNC=OFF. That is only a
> temporary workaround since we want to make our build systems as easy to use
> for people as possible.
>
> I have been working a branch
> <https://github.com/tukaani-project/xz/tree/ifunc_detect_fix> to address
> this. The idea is to change the ifunc option for our CMake and Autotools
> build from ON/OFF or enable/disable to auto/ON/OFF. 'auto' will try to
> enforce using ifunc with glibc or BSD platforms only. ON will always try to
> use ifunc and OFF will obviously disable ifunc completely. Both auto and ON
> will still test the compiler if it supports __attribute__((__ifunc__())).
>
> If you can test the new branch on Alpine that would be very helpful. I
> tested with musl-gcc wrapper and things seemed to work. We haven't
> decided 100% if this is the approach we want to take but it seems promising
> so far.
>
> Thanks for all of your help so far!
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/tukaani-project/xz/issues/70#issuecomment-1827795707>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AGLITH3CC7DIVMAJSDP2IMTYGSFUPAVCNFSM6AAAAAA7LYSUISVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRXG44TKNZQG4>
> .
> You are receiving this because you modified the open/close state.Message
> ID: ***@***.***>
>
","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",13,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-27 03:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-27 03:49:12","2023-11-27 03:49:11","created",1827084170,"Maybe we could just add a define for musl

make -D MUSL=1","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",11,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-24 17:00:00","WatchEvent","itsMohammadHeidari","tukaani-project/xz","2023-11-24 17:50:26","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-24 14:02:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-24 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-24 13:56:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-11-23 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-23 16:05:14","2023-11-23 16:05:13","created",1824666098,"> we could extract the triple on gcc/clang via `-dumpmachine`

I don't think this will work for us since a tool like `musl-gcc` (a GCC wrapper for using musl libc) still outputs `x86_64-linux-gnu` with `-dumpmachine`. So this would fix things for Alpine, but our builds would still be broken for anyone compiling for musl libc using a wrapper like this.

","",0,0,"","none","JiaT75",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",9,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-23 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-23 15:49:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2023-11-23 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-11-23 15:39:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-23 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-23 14:20:26","1970-01-01 00:00:00","none",0,"","",0,0,"isatty_windows_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-23 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-23 14:44:38","1970-01-01 00:00:00","none",0,"","",0,0,"isatty_windows_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-23 14:43:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,4,"","","","none"
"2023-11-23 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-23 14:32:05","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/isatty_windows_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-22 18:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-22 18:19:27","1970-01-01 00:00:00","none",0,"","",0,0,"v5.4_dev","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:21:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,4,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:25:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:34:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-22 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 13:51:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/ifunc_detect_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-22 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-22 12:37:57","1970-01-01 00:00:00","none",0,"","",0,0,"ifunc_detect_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-22 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-22 12:41:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-22 06:00:00","WatchEvent","ksqeib","tukaani-project/xz-java","2023-11-22 06:50:35","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-22 03:00:00","WatchEvent","LionChen-WORK","tukaani-project/xz","2023-11-22 03:14:53","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-21 02:00:00","IssuesEvent","yani","tukaani-project/xz-java","2023-11-21 02:23:23","2023-11-21 02:23:22","opened",0,"### Describe the Feature

Support for BCJ2.

(I hope this is the correct package. I am not really familiar with Java yet)

### Expected Complications

No

### Will I try to implement this new feature?

No","",0,0,"","none","yani",7,"[Feature Request]: BCJ2","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-19 03:00:00","WatchEvent","JustOneSummer","tukaani-project/xz-java","2023-11-19 03:31:41","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-17 17:59:52","1970-01-01 00:00:00","none",0,"","",0,0,"suffix_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-11-17 17:36:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/suffix_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-17 17:12:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/suffix_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-17 17:59:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,0,"","","","none"
"2023-11-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-17 17:56:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/suffix_fix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-17 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-17 15:18:14","1970-01-01 00:00:00","none",0,"","",0,0,"suffix_fix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-17 15:29:00","2023-11-17 15:28:58","created",1816634805,"There is no shame in asking question. I'm glad we were able to help :)","",0,0,"","none","JiaT75",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","closed",0,"","[]",5,"NONE","2023-11-17 07:30:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 12:00:00","WatchEvent","xiaomaoaichiyu","tukaani-project/xz","2023-11-17 12:19:49","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 08:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-17 08:28:36","2023-11-17 08:28:35","created",1815931340,"we could extract the triple on gcc/clang via `-dumpmachine`

```
$ clang -dumpmachine
x86_64-alpine-linux-musl
```","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",8,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 08:00:00","WatchEvent","DaveLak","tukaani-project/xz","2023-11-17 08:13:08","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 07:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-17 07:34:32","2023-11-17 07:34:31","created",1815873488,"I just took care to enter ""_unin_"" in the web browser's search field and indeed it revealed that some targets exist. My bad, I had had to enter in it an irrelevant term at the time I reported. **That's no excuse**. This also means I wasted the time of the participants in this discussion. Not proud of myself. I am sorry.","",0,0,"","none","Ricky-Tigg",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","closed",0,"","[]",4,"NONE","2023-11-17 07:30:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 07:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-17 07:31:53","2023-11-17 07:31:52","created",1815870908,"I just took care to enter ""_unin_"" in the web browser's search field and indeed it revealed that some targets exist. My bad, I had to enter in it an irrelevant term.**That's no excuse**. This also means I wasted the time of the participants in this discussion. Not proud of myself. I am sorry.","",0,0,"","none","Ricky-Tigg",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","closed",0,"","[]",4,"NONE","2023-11-17 07:30:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 07:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-17 07:30:31","2023-11-17 07:30:29","created",1815869507,"I just took care to enter ""_unin_"" in it and indeed it revealed that some targets exist. My bad, I had to enter in the web browser's search field an irrelevant term.**That's no excuse**. This also means I wasted the time of the participants in this discussion. Not proud of myself. I am sorry.","",0,0,"","none","Ricky-Tigg",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","closed",0,"","[]",4,"NONE","2023-11-17 07:30:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-17 07:00:00","IssuesEvent","Ricky-Tigg","tukaani-project/xz","2023-11-17 07:30:31","2023-11-17 07:30:30","closed",0,"### Describe the Feature

Hello. The program acquired from this repository and installed works as intended. Nonetheless I'd rather keep the benefit of having a release installed as packaged by the Linux distribution I am using in order to obtain its automatic updates. However, the uninstallation is uncovered in the`INSTALL.generic` file. This could be rectified by an addition either of a methodology into this file or script dedicated for that purpose.

### Expected Complications

_No response_

### Will I try to implement this new feature?

Yes","",0,0,"","none","Ricky-Tigg",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","closed",0,"","[]",4,"NONE","2023-11-17 07:30:29","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-11-16 19:55:32","2023-11-16 19:55:30","created",1815219616,"> an ifunc WILL compile and link successfully in a dynamically built program, but musl does not implement ifunc (GNU glibc only extension)

Yes, I relealized this as I wrote in my next message. Since GCC upstream knows that musl doesn't support ifunc, I wonder if Clang/LLVM should know it too and then warn or error if the ifunc attribute is used. That is, I wonder if this could be a Clang/LLVM bug.

> a crude hack to detect musl is to detect /lib/ld-musl-*

In Autoconf, checking if `$host_os` equals `linux-musl` probably is the correct method. I don't know right now how to detect it in CMake.

According to musl's FAQ, there intentionally is no easy `#ifdef` to detect musl in C code.

Hacks like checking file paths wouldn't work when cross-compiling.

On the second thought, uClibc might not support ifunc either. It could be better to detect glibc, so `linux-gnu` in case of Autoconf (maybe FreeBSD too). But once again I don't know right now how to detect the libc in CMake.","",0,0,"","none","Larhzu",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",7,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 19:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-16 19:02:26","2023-11-16 19:02:25","created",1815113062,"a crude hack to detect musl is to detect /lib/ld-musl-*","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",6,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 19:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-16 19:01:17","2023-11-16 19:01:15","created",1815103366,"> In CMake-based build, the test for attributes both compiles and links. Perhaps the problem is that linker can omit the function as it's not used in the program.
> 
> CMakeLists.txt line 810:
> 
> ```
> int main(void) { return 0; }
> ```
> 
> I wonder if this would help:
> 
> ```
> int main(void) { func_ifunc(); return 0; }
> ```
> 
> (Edited: Accidental Ctrl-Enter submits in GH. That's a dangerously easy keyboard shortcut for such a critical action. Oh well.)

an ifunc WILL compile and link successfully in a dynamically built program, but musl does not implement ifunc (GNU glibc only extension)","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 13:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-11-16 13:39:53","2023-11-16 13:39:51","created",1814455227,"INSTALL.generic [does mention](https://github.com/tukaani-project/xz/blob/f481523baac946fa3bc13d79186ffaf0c0b818a7/INSTALL.generic#L85) `make uninstall`. Note that for it to work you practically need to keep the matching build tree around. Builds made with different options or builds of different package versions can install and thus uninstall a different set of files.

`--prefix` sets the location where the files are expected to be when the programs or libraries are used. This matters because some paths may get hardcoded (like translations or library search path (rpath)).

`DESTDIR` allows doing a kind of fake install to a temporary directory from which a distro-specific package (`.deb`, `.rpm`, `.txz` etc.) can be created. In general one cannot run the program in the `DESTDIR` directory.

One option is to use

```
./configure --prefix=/home/foo/local-xz
make install
```

and then put /home/foo/local-xz/bin to `PATH`. This way uninstallation is simple: just `rm -r /home/foo/local-xz`.

In case of XZ Utils, if you only want the latest `xz` command line tool, build it against static liblzma without translation support. In case of `xz` there will then be no dependencies that rely on `--prefix`. With many other packages it's not so; this tip is specific to XZ Utils. You can also use the `-j` option with `make` to use multiple processor cores for a shorter build time.

```
./configure --disable-shared --disable-nls
make -j4
cp src/xz/xz /home/foo/bin/
```

The `/home/foo/bin/` is a directory of your choosing. That is, no need to use `make install` if you only need `xz`.","",0,0,"","none","Larhzu",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 13:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-11-16 13:15:23","2023-11-16 13:15:22","created",1814416890,"> Those links are **tied to a same named file** - _xz-5.4.5.tar.gz_. That represents a reasonable source of confusion.

I hadn't realized this. When hovers of the link, it points to _v5.4.5.tar.gz_. If copy the link and use it with `wget` I will get _v5.4.5.tar.gz_. But if I click the link with Firefox, the name gets converted to _xz-5.4.5.tar.gz_.

Having a way to get a tarball of the git tag is useful in general and for some projects it's all they need. But for many other projects it's confusing especially since the link is forcefully named _Source code_. The icons differ but a cube vs. a zipper doesn't convey any meaning to me at least.","",0,0,"","none","Larhzu",71,"Missing `configure` file","['bug']","closed",0,"","[]",5,"NONE","2023-11-16 12:52:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 13:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-16 13:14:25","2023-11-16 13:14:24","created",1814415479,"Thanks to your quote, I could notice in it _installation_ while I had in mind  _uninstallation_ while reporting. Rectified in report.","",0,0,"","none","Ricky-Tigg",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 13:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-16 13:13:32","2023-11-16 13:13:30","created",1814414122,"Thanks to your quote, I could notice in it _installation_ while I had in mind  uninstallation while reporting. Rectified in report.","",0,0,"","none","Ricky-Tigg",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-16 12:59:45","2023-11-16 12:59:44","created",1814392404,"Hello!

> the installation is uncovered in the`INSTALL.generic` file. This could be rectified by an addition either of a methodology into this file or script dedicated for that purpose.

There is a section in INSTALL.generic ""Installation Names"". This describes when using the Autotools build system where the installation files go (defaults to `/usr/local/`). Your Linux distribution should install/update your packages in a different directory so these should not conflict.

You may already know this, but typically to build and install a package with Autotools the steps are (and should be covered in INSTALL.generic already):

1. `./configure [options]`. The options can enable/disable features, dependencies, set installation locations, etc.
2. `make`. This will compile the project.
3. `make check`. This will compile and run the test framework to be sure the binaries work as expected.
4. `make install`. This will install the binaries and documentation (unless disabled).
5. `make uninstall`. This will remove the installed artifacts.

You can set a different installation location when running configure by passing `--prefix=[path to install directory]` or during installation `make install DESTDIR=[path to install directory]`.

I hope this explanation was clear. Let me know if you have more questions.

","",0,0,"","none","JiaT75",72,"Uninstallation | Support by script or documented in the `INSTALL.generic` file","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 12:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-16 12:52:43","2023-11-16 12:52:41","created",1814381767,"I learned my lesson, I know i will ignore archives auto-generated by this platform. As we can conclude there is no case for an issue, hence closing accordingly.","",0,0,"","none","Ricky-Tigg",71,"Missing `configure` file","['bug']","closed",0,"","[]",4,"NONE","2023-11-16 12:52:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-11-16 12:22:51","2023-11-16 12:22:49","created",1814339011,"I can understand the confusion here. While GitHub does a lot of things well, unfortunately maintainers on GitHub have no control over the naming of the ""Source code"" release files, but we can add extra files to the release. Some projects choose to add pre-compiled binaries to the release, so it is more obvious in those projects which files you want to download (and to be sure that the source is always easily available for every release without having to clone the entire project).

It is my understanding that under the hood GitHub is using `git archive` to generate the ""Source code"" archives based on the tag of the release. So it would be possible for us to exclude most or all files from `git archive` using a `.gitattributes` file to make it clear that the GitHub auto-generated archives are not meant to be consumed by users. This would be annoying for anyone who has already been using `git archive` though so I don't see us doing this.

Like many projects, when we generate our source code releases, we essentially run Automake's `dist-gzip` target to prepare our documentation, translations, etc. and, as you know, generate the configure script. `git archive` does not run these steps and so the GitHub archives are best thought of as a snapshot of the git repository at the time of the release. ","",0,0,"","none","JiaT75",71,"Missing `configure` file","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 12:00:00","IssuesEvent","Ricky-Tigg","tukaani-project/xz","2023-11-16 12:52:42","2023-11-16 12:52:41","closed",0,"### Describe the bug

_Reference:_ _INSTALL.generic_ | `./configure` is present as a configuration instruction.

Hello, In Bash Shell:
```
$ ./configure
bash: ./configure: No such file or directory
$ ls | grep -i configure
configure.ac
```

### Version

5.4.5; as source code (tar.gz)

### Operating System

Fedora; edition 39

### Relevant log output

_No response_","",0,0,"","none","Ricky-Tigg",71,"Missing `configure` file","['bug']","closed",0,"","[]",4,"NONE","2023-11-16 12:52:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-16 10:00:00","IssueCommentEvent","Ricky-Tigg","tukaani-project/xz","2023-11-16 10:07:48","2023-11-16 10:07:46","created",1814139633,"I feel that i am learning something. I have observed that on this platform, with no regard to the date before and after it was acquired by Microsoft, that the _Release_ section, when it contains items In the _Assets_ section, may display a _Source code_-named link, which is the one I referred to and you referred to as well, as downloaded though.

I have always assumed, nonetheless without foundation, that all of the items that are present in this _Assets_ section provide the project's source code equally, however in various file formats. Hence I kept wondering the motivation for displaying a _Source code_-named link, The present project suits as an illustration.

While focusing on the latest release, among the displayed items those ones are present:
- `<icon> xz-5.4.5.tar.gz      | 2.75 MB | 2 weeks ago`
- `<icon> Source code (tar.gz) |         | 2 weeks ago`

_Notes:_ 
1. The icons referred as `<icon> ` differ from each other; I suppose for a reason.
2. The immediate mentions at the right side of the icons are links to files provided for download.

Those links are **tied to a same named file** - _xz-5.4.5.tar.gz_. That represents a reasonable source of confusion.","",0,0,"","none","Ricky-Tigg",71,"Missing `configure` file","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 17:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-11-15 17:47:14","2023-11-15 17:47:13","created",1812989020,"My above comment is wrong. The failure is from the dynamic linker, not static linker, sorry.

Perhaps it's that GCC knows that ifunc isn't supported with musl. [config.gcc](https://gcc.gnu.org/git?p=gcc.git;a=blob;f=gcc/config.gcc;h=c1460ca354e8f7baea3229312b17c63bd45f760a;hb=HEAD#l3637) doesn't set `default_gnu_indirect_function` with musl. Maybe Clang/LLVM needs to learn this too if it currently doesn't warn.","",0,0,"","none","Larhzu",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-15 15:49:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-15 14:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-11-15 14:59:47","2023-11-15 14:59:45","created",1812696950,"Thank you for letting us know. If you are able to continue, please let us know too to ensure that no duplicate work will happen (unlikely but still).","",0,0,"","none","Larhzu",64,"Crc32 clmul","[]","closed",0,"","[]",12,"CONTRIBUTOR","2023-10-13 12:54:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 14:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-11-15 14:51:53","2023-11-15 14:51:51","created",1812682440,"In CMake-based build, the test for attributes both compiles and links. Perhaps the problem is that linker can omit the function as it's not used in the program.

CMakeLists.txt line 810:

```
int main(void) { return 0; }
```

I wonder if this would help:","",0,0,"","none","Larhzu",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 04:00:00","IssueCommentEvent","thesamesam","tukaani-project/xz","2023-11-15 04:00:22","2023-11-15 04:00:20","created",1811772372,"I think we should keep this open so the build system can work around it.","",0,0,"","none","thesamesam",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",2,"NONE","2023-11-15 03:43:47","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 04:00:00","IssuesEvent","mgood7123","tukaani-project/xz","2023-11-15 04:01:55","2023-11-15 04:01:55","reopened",0,"### Describe the bug

```
localhost:~/llvm_18$ release_BUILD/LIBXZ/OUT/bin/lzma
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
```

```cmake
if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/xz ${CMAKE_BINARY_DIR}/LIBXZ
  )
endif()

if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ/OUT/lib/liblzma.a)
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      -D CMAKE_BUILD_TYPE=Release
      -D ""CMAKE_C_FLAGS=${CMAKE_C_FLAGS}""
      -D ""CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}""
      -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -D CMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/LIBXZ/OUT
      -D BUILD_SHARED_LIBS=OFF
      -B ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --build ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --install ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
endif()
```

### Version

5.5.0 git master https://github.com/tukaani-project/xz/commit/837ea40b1c9d4998cac4500b55171bf33e0c31a6

### Operating System

alpine linux

### Relevant log output

_No response_","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 03:00:00","IssueCommentEvent","mgood7123","tukaani-project/xz","2023-11-15 03:42:53","2023-11-15 03:42:52","created",1811761835,"so this is caused by musl not supporting `_ifunc_` attribute and current alpine linux clang compilers (clang 14, 15, 16, and 17 to 17.0.3) not emitting a warning if `ifunc` is used for a musl target, (unlike gcc which does emit a warning)","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 03:00:00","IssuesEvent","mgood7123","tukaani-project/xz","2023-11-15 03:43:48","2023-11-15 03:43:47","closed",0,"### Describe the bug

```
localhost:~/llvm_18$ release_BUILD/LIBXZ/OUT/bin/lzma
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
```

```cmake
if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/xz ${CMAKE_BINARY_DIR}/LIBXZ
  )
endif()

if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ/OUT/lib/liblzma.a)
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      -D CMAKE_BUILD_TYPE=Release
      -D ""CMAKE_C_FLAGS=${CMAKE_C_FLAGS}""
      -D ""CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}""
      -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -D CMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/LIBXZ/OUT
      -D BUILD_SHARED_LIBS=OFF
      -B ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --build ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --install ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
endif()
```

### Version

5.5.0 git master https://github.com/tukaani-project/xz/commit/837ea40b1c9d4998cac4500b55171bf33e0c31a6

### Operating System

alpine linux

### Relevant log output

_No response_","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE unsupported relocation type 37","['bug']","closed",0,"","[]",1,"NONE","2023-11-15 03:43:47","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-15 02:00:00","IssuesEvent","mgood7123","tukaani-project/xz","2023-11-15 02:17:35","2023-11-15 02:17:34","opened",0,"### Describe the bug

```
localhost:~/llvm_18$ release_BUILD/LIBXZ/BUILD/lzma
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
Error relocating release_BUILD/LIBXZ/BUILD/lzma: unsupported relocation type 37
```

```cmake
if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ)
  execute_process(
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/xz ${CMAKE_BINARY_DIR}/LIBXZ
  )
endif()

if (NOT EXISTS ${CMAKE_BINARY_DIR}/LIBXZ/OUT/lib/liblzma.a)
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      -D CMAKE_BUILD_TYPE=Release
      -D ""CMAKE_C_FLAGS=${CMAKE_C_FLAGS}""
      -D ""CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}""
      -D CMAKE_C_COMPILER=${CMAKE_C_COMPILER}
      -D CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
      -D CMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/LIBXZ/OUT
      -D BUILD_SHARED_LIBS=OFF
      -B ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --build ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
  execute_process(
    COMMAND
      ${CMAKE_COMMAND}
      --install ${CMAKE_BINARY_DIR}/LIBXZ/BUILD
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/LIBXZ
    COMMAND_ECHO STDOUT
  )
endif()
```

### Version

5.5.0

### Operating System

alpine linux

### Relevant log output

_No response_","",0,0,"","none","mgood7123",70,"[Bug]: MUSL CMAKE relocation error 37","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-13 12:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-13 12:51:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-13 08:00:00","WatchEvent","lingr7","tukaani-project/xz","2023-11-13 08:30:36","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-11 11:00:00","WatchEvent","templarundead","tukaani-project/xz","2023-11-11 11:43:18","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-10 16:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-10 16:58:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 16:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-10 16:09:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 15:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-10 15:19:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-11-10 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-11-10 14:11:05","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-10 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-11-10 14:11:14","1970-01-01 00:00:00","none",0,"","",0,0,"xz_recursive_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-10 14:26:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-11-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-10 14:42:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-10 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-10 14:40:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_recursive2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,9,"","","","none"
"2023-11-09 03:00:00","WatchEvent","sam7894604","tukaani-project/xz","2023-11-09 03:44:07","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-08 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-08 17:18:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-08 17:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-08 17:03:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-08 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-08 17:22:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-08 16:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2023-11-08 16:16:01","2023-11-08 16:16:00","created",1802220006,"While working on implementing arm support for crc_clmul I found that the processor I am using does not have support for PMULL. I am not going to continue work on this at the moment since the devices I have can't test my code, but I might continue later if I get hardware that supports this.","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","closed",0,"","[]",11,"CONTRIBUTOR","2023-10-13 12:54:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-08 07:00:00","WatchEvent","suprnana","tukaani-project/xz","2023-11-08 07:00:37","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-08 03:00:00","WatchEvent","ggnam","tukaani-project/xz","2023-11-08 03:44:17","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-07 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-07 13:21:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-07 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-07 13:12:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-07 10:00:00","ForkEvent","QSRINT","tukaani-project/xz","2023-11-07 10:56:25","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-05 06:00:00","WatchEvent","QuackBooster","tukaani-project/xz","2023-11-05 06:06:08","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-02 15:00:00","WatchEvent","gordonc64","tukaani-project/xz","2023-11-02 15:53:21","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-02 15:00:00","WatchEvent","darked89","tukaani-project/xz","2023-11-02 15:23:13","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-02 13:00:00","PushEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-02 13:27:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-02 12:00:00","CreateEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-02 12:42:33","1970-01-01 00:00:00","none",0,"","",0,0,"","repository","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-02 12:00:00","CreateEvent","JiaT75","tukaani-project/tukaani-project.github.io","2023-11-02 12:47:34","1970-01-01 00:00:00","none",0,"","",0,0,"master","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-01 16:00:00","IssueCommentEvent","thesamesam","tukaani-project/xz","2023-11-01 16:13:04","2023-11-01 16:13:02","created",1789241208,"What happened with this in the end?","",0,0,"","none","thesamesam",22,"XZ recursive CLI","['enhancement','5.5.0']","closed",0,"","[]",1,"MEMBER","2023-11-01 16:11:08","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-01 16:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-11-01 16:11:10","2023-11-01 16:11:08","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
The -r, --recursive option was commented out in the code as a placeholder.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- tuklib_list.h header file only linked list implementation was added
- All filename reading now uses tuklib_list instead of a string array
- XZ now supports -r, --recursive option to traverse directories

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",22,"XZ recursive CLI","['enhancement','5.5.0']","closed",0,"","[]",0,"MEMBER","2023-11-01 16:11:08","1970-01-01 00:00:00","7ad5c4cd21b4c0ce3bdfc53f2c0bb782cb642006","[]","[]","xz_recursive_cli","57d5db7e4a32c4f84fcffd140de0bc79f3b26e2d","master","78ccd93951f9e988d447bcdd70b24f6df5448d1d",0,0,0,"dirty","",0,0,7,364,48,16,"",0,"","",0,0,"","","","none"
"2023-11-01 13:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-11-01 13:18:56","1970-01-01 00:00:00","published",0,"Here is an extract from the NEWS file:

```
5.4.5 (2023-11-01)

    * liblzma:

        - Use __attribute__((__no_sanitize_address__)) to avoid address
          sanitization with CRC64 CLMUL. It uses 16-byte-aligned reads
          which can extend past the bounds of the input buffer and
          inherently trigger address sanitization errors. This isn't
          a bug.

        - Fixed an assertion failure that could be triggered by a large
          unpadded_size argument. It was verified that there was no
          other bug than the assertion failure.

        - Fixed a bug that prevented building with Windows Vista
          threading when __attribute__((__constructor__)) is not
          supported.

    * xz now properly handles special files such as ""con"" or ""nul"" on
      Windows. Before this fix, the following wrote ""foo"" to the
      console and deleted the input file ""con_xz"":

          echo foo | xz > con_xz
          xz --suffix=_xz --decompress con_xz

    * Build systems:

        - Allow builds with Windows win95 threading and small mode when
          __attribute__((__constructor__)) is supported.

        - Added a new line to liblzma.pc for MSYS2 (Windows):

              Cflags.private: -DLZMA_API_STATIC

          When compiling code that will link against static liblzma,
          the LZMA_API_STATIC macro needs to be defined on Windows.

        - CMake specific changes:

            * Fixed a bug that allowed CLOCK_MONOTONIC to be used even
              if the check for it failed.

            * Fixed a bug where configuring CMake multiple times
              resulted in HAVE_CLOCK_GETTIME and HAVE_CLOCK_MONOTONIC
              not being set.

            * Fixed the build with MinGW-w64-based Clang/LLVM 17.
              llvm-windres now has more accurate GNU windres emulation
              so the GNU windres workaround from 5.4.1 is needed with
              llvm-windres version 17 too.

            * The import library on Windows is now properly named
              ""liblzma.dll.a"" instead of ""libliblzma.dll.a""

            * Fixed a bug causing the Ninja Generator to fail on
              UNIX-like systems. This bug was introduced in 5.4.0.

            * Added a new option to disable CLMUL CRC64.

            * A module-definition (.def) file is now created when
              building liblzma.dll with MinGW-w64.

            * The pkg-config liblzma.pc file is now installed on all
              builds except when using MSVC on Windows.

            * Added large file support by default for platforms that
              need it to handle files larger than 2 GiB. This includes
              MinGW-w64, even 64-bit builds.

    * Small fixes and improvements to the tests.

    * Updated translations: Chinese (simplified) and Esperanto.
```","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.5","XZ Utils 5.4.5 Stable","none"
"2023-11-01 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-11-01 12:59:17","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-11-01 11:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-11-01 11:52:22","1970-01-01 00:00:00","none",0,"","",0,0,"threads_by_default","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-11-01 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-11-01 11:54:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/threads_by_default","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-31 18:00:00","PullRequestEvent","Jamaika1","tukaani-project/xz","2023-10-31 18:22:22","2023-10-31 18:22:21","opened",0,"```
fastpos.h:94:28: error: expected ';' before 'extern'
   94 | lzma_attr_visibility_hidden
      |                            ^
      |                            ;
   95 | extern const uint8_t lzma_fastpos[1 << FASTPOS_BITS];
      | ~~~~~~
```

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","Jamaika1",69,"Fix missing semicolon","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","patch-1","dfa88f81c4a4b43d0f23ac633cf3f677e2d6e3ec","master","148e20607e95781558bdfc823ecba07b7af4b590",0,0,0,"unknown","",0,1,1,1,0,1,"",0,"","",0,0,"","","","none"
"2023-10-31 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-31 16:05:37","2023-10-31 16:05:35","created",1787525956,"Our CMake support is considered unstable and is undergoing a lot of improvements. Many of these improvements are already on master but have not made it into a stable release. If you only need `liblzma`, then using a release from the 5.4 branch will work. We will have a new `5.4.5` release later today and that will include a few small CMake changes. We recently ported the command line tools `xz` and `xzdec` to MSVC but that will not be part of any of the 5.4 releases

We are planning to release 5.6.0 this December which may change the default library to being a shared library. We may consider our CMake support stable at that point. So, to be safe you should explicitly set the `BUILD_SHARED_LIBS` option if you do build `liblzma` through CMake since this option's default value specifically might not be stable.

If you can use our Autotools build system on Windows through something like Cygwin or MSYS2, that is recommended over CMake at the moment. If not, our CMake build will likely still work for you, but be careful of minor things changing in the future. We generally don't break things with our CMake build and are usually just adding more features. I hope this answers your question!","",0,0,"","none","JiaT75",68,"cmake stability","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-31 15:00:00","IssuesEvent","mgood7123","tukaani-project/xz","2023-10-31 15:42:16","2023-10-31 15:42:14","opened",0,"how stable is cmake support in xz ?

as i plan to build for windows via cmake and add xz as a library in my project","",0,0,"","none","mgood7123",68,"cmake stability","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-31 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-31 14:23:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",57,1,"","","","none"
"2023-10-31 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-31 13:54:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-31 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-31 10:49:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4_dev","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",34,34,"","","","none"
"2023-10-30 16:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-30 16:45:29","1970-01-01 00:00:00","none",0,"","",0,0,"always_inline","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-30 16:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-30 16:45:29","1970-01-01 00:00:00","none",0,"","",0,0,"visibility_hidden","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-30 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-30 16:44:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,3,"","","","none"
"2023-10-30 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-30 16:32:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/always_inline","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-10-30 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-30 16:11:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/always_inline","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-30 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-30 16:07:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/visibility_hidden","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",20,2,"","","","none"
"2023-10-30 15:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-30 15:48:07","1970-01-01 00:00:00","none",0,"","",0,0,"always_inline","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-29 08:00:00","WatchEvent","esdinb","tukaani-project/xz","2023-10-29 08:31:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-27 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-27 12:07:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,0,"","","","none"
"2023-10-26 18:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-26 18:48:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,14,"","","","none"
"2023-10-26 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-26 16:43:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,10,"","","","none"
"2023-10-26 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-26 15:42:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",53,14,"","","","none"
"2023-10-26 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-26 15:59:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,14,"","","","none"
"2023-10-25 20:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-25 20:40:55","1970-01-01 00:00:00","none",0,"","",0,0,"cflags_fsanitize","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-25 20:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-25 20:40:55","1970-01-01 00:00:00","none",0,"","",0,0,"cflags_fsanitize2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-25 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-25 17:31:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2023-10-25 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-25 17:18:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cflags_fsanitize2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-25 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-25 17:09:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cflags_fsanitize2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-25 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-25 17:04:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cflags_fsanitize2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-25 16:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-25 16:13:56","1970-01-01 00:00:00","none",0,"","",0,0,"cflags_fsanitize2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-25 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-25 16:23:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cflags_fsanitize2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-25 13:33:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cflags_fsanitize","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,3,"","","","none"
"2023-10-24 21:00:00","WatchEvent","space-aaron","tukaani-project/xz","2023-10-24 21:34:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-24 11:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-10-24 11:56:54","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 22:00:00","WatchEvent","Labryn","tukaani-project/xz","2023-10-23 22:06:33","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 17:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-23 17:57:09","1970-01-01 00:00:00","none",0,"","",0,0,"cflags_fsanitize","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-23 17:06:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2023-10-23 16:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-10-23 16:56:59","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 13:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-23 13:44:34","1970-01-01 00:00:00","none",0,"","",0,0,"sandbox_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-23 13:44:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,0,"","","","none"
"2023-10-23 12:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-23 12:20:29","1970-01-01 00:00:00","none",0,"","",0,0,"crc_edits","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-23 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-23 12:44:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/visibility_hidden","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-22 18:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 18:16:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-10-22 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 17:35:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-10-22 16:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-22 16:04:55","1970-01-01 00:00:00","none",0,"","",0,0,"clock_gettime","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-22 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 16:11:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",31,8,"","","","none"
"2023-10-22 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 16:07:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/visibility_hidden","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,2,"","","","none"
"2023-10-22 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 16:05:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",13,7,"","","","none"
"2023-10-22 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 16:04:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-10-22 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-22 15:59:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-10-22 14:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-22 14:30:51","1970-01-01 00:00:00","none",0,"","",0,0,"visibility_hidden","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-21 18:00:00","WatchEvent","bocke","tukaani-project/xz-embedded","2023-10-21 18:56:45","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-21 18:00:00","WatchEvent","bocke","tukaani-project/xz","2023-10-21 18:56:43","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-21 18:00:00","WatchEvent","michael105","tukaani-project/xz","2023-10-21 18:20:53","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-20 18:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-10-20 18:34:04","1970-01-01 00:00:00","none",0,"","",0,0,"tuklib_integer_memcpy","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-20 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-10-20 17:05:14","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-20 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-20 17:01:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",30,7,"","","","none"
"2023-10-20 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-20 16:05:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-20 11:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-10-20 11:28:29","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-19 15:06:40","2023-10-19 15:06:39","created",1771182272,"@arixmkii I ended up making the Windows-CI work with MSYS2, but it would be great if things worked with MSVC (which is why I left the Issue open). If you have experience working with MSVC that is great.

I imagine this would require writing a Windows PowerShell or Batch script to do things similar to what ci_build.sh does, and then refactoring windows-ci.yml to utilize the script. We need to use CMake to generate Windows Visual Studio files (using CMake's `-G` option to select the generator) and then compile everything and run the tests from Windows PowerShell or Command Prompt.

Recently we ported the xz command line tool to work with MSVC so making sure we can continue to build on MSVC as the codebase changes is certianly valuable. ","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",10,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 13:00:00","IssueCommentEvent","arixmkii","tukaani-project/xz","2023-10-19 13:24:02","2023-10-19 13:24:01","created",1770983598,"Hi @JiaT75  Thank you for the ping. Got it out of my focus. I will revisit the topic this weekend and update. I hope to get Windows part done.","",0,0,"","none","arixmkii",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",9,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 12:00:00","IssueCommentEvent","ashish-2022","tukaani-project/xz","2023-10-19 12:34:39","2023-10-19 12:34:38","created",1770889324,"> Hi! This question doesn't exactly belong on this issue. This issue is for discussing changes to our Continuous Integration scripts for improving Windows support (which I still need to improve/finish). Anyways, I will still answer your question here.
> 
> > Looks like you need to put following in CMakeLists.txt: `option(BUILD_SHARED_LIBS ""Build shared libraries"" ON)` Most opensource libs like **libxml2** have this ON by default. And before cmake when I compiled XZ it was generating liblzma.dll by default.
> 
> We have always had the `BUILD_SHARED_LIBS` option defined in `CMakeLists.txt` since we first supported a CMake build. You can search for the line `option(BUILD_SHARED_LIBS ""Build liblzma as a shared library instead of static"")` if you are curious. In general, CMake defaults to `BUILD_SHARED_LIBS` not being set. Other projects can choose to override this by default but since we have always had it OFF by default it is difficult to change. Applications may be relying on this default behavior if they only want the static library to be built. So changing the default to instead build the shared library could cause their build pipelines to fail.
> 
> Thank you for this report, but we will not be changing this.

Ok, Thanks.","",0,0,"","none","ashish-2022",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",8,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-19 12:28:55","2023-10-19 12:28:54","created",1770874618,"Hi! This question doesn't exactly belong on this issue. This issue is for discussing changes to our Continuous Integration scripts for improving Windows support (which I still need to improve/finish). Anyways, I will still answer your question here.

> Looks like you need to put following in CMakeLists.txt: `option(BUILD_SHARED_LIBS ""Build shared libraries"" ON)` Most opensource libs like **libxml2** have this ON by default. And before cmake when I compiled XZ it was generating liblzma.dll by default.

We have always had the `BUILD_SHARED_LIBS` option defined in `CMakeLists.txt` since we first supported a CMake build. You can search for the line `option(BUILD_SHARED_LIBS ""Build liblzma as a shared library instead of static"")` if you are curious. In general, CMake defaults to `BUILD_SHARED_LIBS` not being set. Other projects can choose to override this by default but since we have always had it OFF by default it is difficult to change. Applications may be relying on this default behavior if they only want the static library to be built. So changing the default to instead build the shared library could cause their build pipelines to fail.

Thank you for this report, but we will not be changing this.","",0,0,"","none","JiaT75",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",7,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-19 12:30:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-19 11:00:00","IssueCommentEvent","ashish-2022","tukaani-project/xz","2023-10-19 11:01:30","2023-10-19 11:01:29","created",1770577839,"Hi,

I was trying to compile XZ with cmake and below was my observation:

**Step 1: Set build environment**

```
D:\build>""C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat""
**********************************************************************
** Visual Studio 2022 Developer Command Prompt v17.6.4
** Copyright (c) 2022 Microsoft Corporation
**********************************************************************
[vcvarsall.bat] Environment initialized for: 'x64'

D:\build>
```

**Step 2: Configure build environment:**

`D:\build>cmake -S xz-master -B xz-build`

**Setp 3: Start build:**
`D:\build>cmake --build xz-build --config Release`

**Result:**
```
D:\build>dir xz-build\Release
 Volume in drive D is New Volume
 Volume Serial Number is DE48-AF3E

 Directory of D:\build\xz-build\Release

10/19/2023  03:22 AM    <DIR>          .
10/19/2023  03:22 AM    <DIR>          ..
10/19/2023  03:21 AM           498,446 liblzma.lib
10/19/2023  03:22 AM           230,912 xz.exe
10/19/2023  03:22 AM            86,016 xzdec.exe
               3 File(s)        815,374 bytes
               2 Dir(s)  214,589,665,280 bytes free

D:\build>
```

Looks like **liblzma.dll** is not getting generated.
","",0,0,"","none","ashish-2022",18,"[Feature Request]: Create Windows CI Support","[]","open",0,"","[]",6,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-19 06:00:00","IssuesEvent","RaymondLam1","tukaani-project/xz-java","2023-10-19 06:27:56","2023-10-19 06:27:54","opened",0,"### Describe the bug

I wrote a very simple program that uses json strings to generate an xz compressed file, but I found a puzzling bug.
```
    @Test
    public void testXzCompress() throws IOException {
        String json = new String(Files.readAllBytes(
                Paths.get(""/Users/raymond/jdks.json"")));
        compress(json);
    }

    public void compress(String input) {
        try (FileOutputStream fos = new FileOutputStream(""/Users/raymond/ztest/tmp3/jdks.json.xz"");
                XZOutputStream xzOut = new XZOutputStream(fos, new LZMA2Options())) {
            byte[] jsonData = input.getBytes();
            xzOut.write(jsonData);
        } catch (Throwable throwable) {
            throw new RuntimeException(throwable);
        }
    }
```
When jdks.json is below, It will cause `Error 79 - Inappropriate file type or format.`  when trying to open the generated jdks.json.xz in my mac.
```
{
  ""jdks"":[
    {
      ""vendor"":""Oracle""
    }
  ]
}
```
However, when jdk.json is below, The only difference is that a space is added after ""jdks"", It works well.
```
{
  ""jdks"": [
    {
      ""vendor"":""Oracle""
    }
  ]
}
```
I'm not sure if this is a bug or a usage error on my part.



### Version

1.9

### Operating System

macOS Monterey

### Relevant log output

_No response_","",0,0,"","none","RaymondLam1",6,"[Bug]: A strange format error in the generated xz file due to spaces","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-18 19:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2023-10-18 19:54:46","2023-10-18 19:54:46","created",1769222694,"> A few small changes were made to `crc_simd_body()` but the speed performance was not affected. I hope if you had already started working on ARM64 versions this does not add much extra work to incorporate the code reorganzation. These changes should make the code much better organized for the future ARM64 optimizations. Thanks for all your contributions and feel free to reply here or reach out over email (the email in the project README will redirect to Lasse and I) if you have comments or questions.

Thank you for the update, and I agree that it should not be much extra work to incorporate the changes into the code I have already written. ","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","closed",0,"","[]",10,"CONTRIBUTOR","2023-10-13 12:54:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-18 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-10-18 16:01:06","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-18 16:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-18 16:13:01","2023-10-18 16:13:00","created",1768871911,"@hansjans162 We committed some changes to reorganize the CLMUL code. We refactored things so all the CLMUL specific code is in a new `crc_clmul.c` file. Also, we created a macro `crc_always_inline` to force inline of `crc_simd_body()` since it was 50% slower on my benchmarks if the function is not properly inlined.

A few small changes were made to `crc_simd_body()` but the speed performance was not affected. I hope if you had already started working on ARM64 versions this does not add much extra work to incorporate the code reorganzation. These changes should make the code much better organized for the future ARM64 optimizations. Thanks for all your contributions and feel free to reply here or reach out over email (the email in the project README will redirect to Lasse and I) if you have comments or questions.","",0,0,"","none","JiaT75",64,"Crc32 clmul","[]","closed",0,"","[]",9,"CONTRIBUTOR","2023-10-13 12:54:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-18 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-18 16:12:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-10-18 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-18 15:34:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-10-18 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-18 11:32:47","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-18 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-18 11:06:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,15,"","","","none"
"2023-10-17 22:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-17 22:13:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",22,22,"","","","none"
"2023-10-17 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-17 17:26:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-10-17 16:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-10-17 16:35:52","2023-10-17 16:35:52","created",1766779777,"Thanks for the advice! I will follow that for future commit messages!","",0,0,"","none","gabibguti",67,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",6,"CONTRIBUTOR","2023-10-13 12:03:14","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-17 16:00:00","IssuesEvent","gabibguti","tukaani-project/xz","2023-10-17 16:53:45","2023-10-17 16:53:44","closed",0,"### Describe the Feature

Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.

Although there are pros and cons for each reference, GitHub understands [using commit SHAs is more reliable](https://docs.github.com/en/actions/learn-github-actions/finding-and-customizing-actions#using-shas), as does [Scorecard](https://github.com/ossf/scorecard/blob/main/docs/checks.md#pinned-dependencies) security tool.

If you agree, this would change, for example, `actions/checkout@v3` to `actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744` followed by a comment `# v3.6.0` to keep the version readable. Additionally, we can take this moment to bump `actions/checkout` to `v4` and other actions.

### Expected Complications

None.

### Will I try to implement this new feature?

Yes

##### Additional Context

Hi! I'm Gabriela and I work on behalf of Google and the OpenSSF suggesting supply-chain security changes :)","",0,0,"","none","gabibguti",65,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",4,"CONTRIBUTOR","2023-10-17 16:53:44","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-17 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-17 14:26:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-17 11:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-17 11:41:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/crc_clmul","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-17 11:00:00","WatchEvent","stlinkgangs","tukaani-project/xz","2023-10-17 11:14:15","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-17 07:00:00","WatchEvent","huo20102836shui","tukaani-project/xz-java","2023-10-17 07:31:57","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-16 18:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-16 18:39:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-16 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-16 17:55:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-16 15:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-16 15:02:47","1970-01-01 00:00:00","none",0,"","",0,0,"build_werror2","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-16 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-16 15:28:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror2","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-15 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-15 19:23:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,4,"","","","none"
"2023-10-15 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-15 15:23:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-15 11:00:00","WatchEvent","SylvanSerenity","tukaani-project/xz","2023-10-15 11:13:43","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-14 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-14 17:21:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,4,"","","","none"
"2023-10-14 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-10-14 15:18:58","1970-01-01 00:00:00","none",0,"","",0,0,"crc_clmul","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-14 15:00:00","ForkEvent","Ula1990","tukaani-project/xz","2023-10-14 15:18:31","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 16:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-10-13 16:04:29","2023-10-13 16:04:28","created",1761756282,"I'm glad this has been merged. Thanks!

A few thoughts about 32-bit x86: Testing on modern 64-bit processor running 32-bit code was what I had in mind, so that part is fine. The results look strange though.

The 32-bit assembly code implements the same algorithm as the generic C code. The CLMUL version should easily be faster with 1024-byte buffers, even if those were unaligned.

With GCC 3.3/3.4 I remember that GCC couldn't fit all hot variables in registers and the resulting extra stack access was bad for speed. On x86-64 this isn't a problem anymore. My expectation is that the 32-bit x86 assembly code for CRC32 should have similar speed as the generic C code has on x86-64. I don't have clear expectations of the speed of the C code on 32-bit x86.

On 32-bit x86, CRC64 benefits more from CLMUL because 32-bit x86 doesn't have 64-bit general-purpose registers. With the generic method, including the assembly implementation, the 64-bit CRC value needs two registers and updating it needs more instructions.

I wondered if eight xmm registers could be a limiting factor on 32-bit x86. However, on x86-64 exactly eight xmm registers are used by both CRC32 and CRC64 CLMUL implementations with GCC 13.2.1. So I suppose the number of xmm registers shouldn't be a problem.

We (or likely it's mostly Jia) will do a few tests later.

Thanks again!
","",0,0,"","none","Larhzu",64,"Crc32 clmul","[]","closed",0,"","[]",8,"CONTRIBUTOR","2023-10-13 12:54:05","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-13 12:52:55","2023-10-13 12:52:54","created",1761471852,"> I updated the PR with the squashing and comment change. I didn't try the crc_clmul.c idea but I believe it would result in cleaner code. I'll let you all handle it.

Thanks for the updates!

> The CRC64 CLMUL version became faster with buffers around 512 bytes. The runtime differences started to change between 32 - 1024 bytes so it was most interesting to categorize them as < 32 bytes and > 1024 bytes. So for CRC32 you are better off using the assembly version but CRC64 depends.

Thanks for benchmarking the 32-bit version. I would have expected the CLMUL version to be much better than the assembly or the generic to be fairly close to the assembly. We'll take that into account when deciding how to proceed with 32-bit builds.","",0,0,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",7,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-13 12:02:49","2023-10-13 12:02:49","created",1761402626,"It looks great! Thanks","",0,0,"","none","JiaT75",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",4,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-10-13 12:03:15","2023-10-13 12:03:14","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
Referencing actions by major tag (e.g. `v3`)


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/65


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
Referencing actions by commit SHA (e.g. `8ade135a41bc03ea155e62e844d188df1ea18608`)

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","gabibguti",67,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",4,"CONTRIBUTOR","2023-10-13 12:03:14","2023-10-13 12:03:14","37947d4a7565b87e4cec8b89229d35b0a3f8d2cd","[]","[]","master","64909e884dca9e79b2eab211f36b87558d683fc7","master","f74f1740067b75042497edbfa6ea457ff75484b9",1,0,0,"unknown","JiaT75",0,0,2,5,5,2,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-10-13 12:54:06","2023-10-13 12:54:05","closed",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","closed",0,"","[]",7,"CONTRIBUTOR","2023-10-13 12:54:05","2023-10-13 12:54:05","f1cd9d7194f005cd66ec03c6635ceae75f90ef17","[]","[]","crc32-clmul","2070a32c81b973f532262a2c082504733893f919","master","f74f1740067b75042497edbfa6ea457ff75484b9",1,0,0,"unknown","JiaT75",12,0,3,526,289,7,"",0,"","",0,0,"","","","none"
"2023-10-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-13 12:54:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-10-13 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-10-13 12:03:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-12 19:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2023-10-12 19:43:19","2023-10-12 19:43:18","created",1760264642,"> I feel it might be good to merge this after the inline function change has been squashed so that we have some good version committed in xz.git. So feel free to try the crc_clmul.c idea if you wish but it's not required for merging.

I updated the PR with the squashing and comment change. I didn't try the crc_clmul.c idea but I believe it would result in cleaner code. I'll let you all handle it.

> Have you tested on 32-bit x86? If not, it's fine. :-) If yes: I haven't checked performance on 32-bit x86 in years and wonder if the assembly files still make sense compared to what GCC and Clang can do (for processors that don't support CLMUL). Those files were written in GCC 3.3/3.4 times. It shouldn't be hard to make 32-bit x86 autodetect between the assembly code and CLMUL so I can do it if it is worth it.

I hadn't tested the assembly version before so I gave it a try since it seemed interesting. I compiled my test program and liblzma with the -m32 GCC flag and ran the benchmark on my 64-bit machine. I don't have a 32-bit machine to test on. The results were somewhat surprising considering how old the assembly implementation is. I didn't have time to make a pretty graph again, but here is a quick summary of my findings:

| CRC version | Speed difference < 32 bytes | Speed difference > 1024 bytes |
|------------------|----------------------------------------|------------------------------------------|
| CRC32 Generic |  50% slower    | 75% slower |
| CRC32 CLMUL  | 80% slower       | 30% slower |
| CRC64 Generic | 60% slower |  65% slower |
| CRC64 CLMUL | 80% slower |  40% faster |

The CRC64 CLMUL version became faster with buffers around 512 bytes. The runtime differences started to change between 32 - 1024 bytes so it was most interesting to categorize them as < 32 bytes and > 1024 bytes. So for CRC32 you are better off using the assembly version but CRC64 depends.","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",6,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-12 18:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-10-12 18:15:03","2023-10-12 18:15:01","created",1760132818,"See if it looks better now ","",0,0,"","none","gabibguti",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",3,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-12 15:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-10-12 15:41:09","2023-10-12 15:41:08","created",1759876426,"Yes sure! Will do!","",0,0,"","none","gabibguti",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",2,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-12 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-10-12 13:57:05","2023-10-12 13:57:03","created",1759664127,"Thanks for remaking the PR!

Everything looks great except can you tweak your commit messages slightly? If you could prepend ""CI:"" before the first line of your commit message (""Bump and ref actions..."") that would be great. We like to do that to help search/filter commits by category. Also, in the first commit can you mention the reason why this change is needed? Something like the text from #65 could be enough:

""Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.""

Or if you want to reword it at all.","",0,0,"","none","JiaT75",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-12 12:00:00","PullRequestEvent","gabibguti","tukaani-project/xz","2023-10-12 12:35:33","2023-10-12 12:35:31","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [x] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
Referencing actions by major tag (e.g. `v3`)


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/65


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
Referencing actions by commit SHA (e.g. `8ade135a41bc03ea155e62e844d188df1ea18608`)

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","gabibguti",67,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","master","664eca7e8f1bef0b43d61ec7cd065746fc93bdfa","master","f74f1740067b75042497edbfa6ea457ff75484b9",0,0,0,"unknown","",0,1,2,5,5,2,"",0,"","",0,0,"","","","none"
"2023-10-12 01:00:00","WatchEvent","NeRdTheNed","tukaani-project/xz-java","2023-10-12 01:58:15","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-11 18:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-10-11 18:42:52","2023-10-11 18:42:51","created",1758290634,"Very interesting problem the Clang release one. I took a look at the commits and discussions, thanks for sharing! It seems like they are resolving the problems in the new patch and thanks for looking into this Jia! I'll retry the PR.","",0,0,"","none","gabibguti",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",4,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-11 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-11 17:02:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-11 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-11 16:17:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,2,"","","","none"
"2023-10-11 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-11 16:17:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clock_gettime","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",12,6,"","","","none"
"2023-10-11 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-11 16:16:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,3,"","","","none"
"2023-10-11 07:00:00","ForkEvent","Hexagon-HTC","tukaani-project/xz","2023-10-11 07:14:46","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-11 02:00:00","WatchEvent","gcflymoto","tukaani-project/xz","2023-10-11 02:47:12","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-09 22:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-09 22:31:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-09 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-09 19:46:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-09 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-09 19:30:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-10-09 16:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-09 16:00:00","1970-01-01 00:00:00","none",0,"","",0,0,"sandbox_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-09 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-09 16:24:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/sandbox_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-10-08 10:00:00","WatchEvent","NikolaRusakov","tukaani-project/xz","2023-10-08 10:10:37","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-07 17:00:00","WatchEvent","genbtc","tukaani-project/xz","2023-10-07 17:22:52","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-07 12:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2023-10-07 12:05:16","2023-10-07 12:05:16","created",1751694485,"I've started work on the changes. Don't worry about the delays, I appreciate that both of you are taking the time to look at this.

I haven't tested on 32-bit x86 yet.","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",5,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-07 03:00:00","WatchEvent","0x4c43-hub","tukaani-project/xz","2023-10-07 03:56:59","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-06 22:00:00","CommitCommentEvent","Larhzu","tukaani-project/xz","2023-10-06 22:24:16","2023-10-06 22:24:16","none",129371739,"> Actually, that doesn't match my experience (and I just rechecked just to be sure), AFAIK `_WIN32` isn't defined by the compiler in Cygwin.

OK, that's good to know, thanks. Now I wonder why the (harmless) commits 0deb1bb60addd1306b525e0ac0ad2a84eb0390d9 and 44d70cb154225e47eebf15a3cfbdf3794cbb4593 were made and left me believe that `_WIN32` is or might be defined. The commit messages are a bit confusing. :-( I remember that around those times I even tested on Cygwin.

> I wonder if the MSYS environment defines `CYGWIN` as well

It likely does since Modules/Platform/MSYS-Initialize.cmake includes Platform/CYGWIN-Initialize which sets `CYGWIN`. But checking for `MSYS` shouldn't hurt, I hope.

> But even if I didn't merge it, the incomplete/unverified/possibly subtly incompatible Meson file lives on elsewhere in their wrapdb, unmaintained by me, used by some other Meson projects.

I had to look at wrapdb now. Seems that there is XZ Utils 5.2.12 under the name liblzma but not XZ Utils 5.4.x. **If** I understood correctly:

- meson.build contains the old bug reporting address (my personal email address) which was changed in 5.2.9. So it's obvious that the wrap file is updated without a throrough compare with upstream changes.

- It assumes that the target is little endian and supports fast unaligned access.

- Check for `optreset` has been commented out. OpenBSD's man page says that GNU-style `optind = 0` is supported but FreeBSD and NetBSD don't. So maybe parsing the environment vars `XZ_OPT` and `XZ_DEFAULTS` is broken on those.

- liblzma has an unneeded depedency on libintl on systems where it's not part of libc.

- I don't see anything about installing the xz translation files even though translation support is built.

At glance I guess it is good enough in practice for the most common use cases (GNU/Linux and Windows). :-) It's clear that it has take some effort to get it to the current shape even though it would have a long way to become polished and feature complete. 5.4.x has a few new #defines so that might explain why 5.4.x isn't there yet.

Oh well. At least the windres workaround in CMake should be correct now. Thanks again!","",0,0,"","none","Larhzu",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","",0,0,"","","","none"
"2023-10-06 20:00:00","CommitCommentEvent","mstorsjo","tukaani-project/xz","2023-10-06 20:34:05","2023-10-06 20:34:05","none",129365498,"> > I'm not entirely 100% sure here, but I think MINGW OR CYGWIN might be the right thing; cygwin in general doesn't set WIN32 I think, as it's mostly considered unixy.
> 
> It's unfortunate that it's not documented very clearly but it seems that [you are right](https://gitlab.kitware.com/cmake/cmake/-/commit/a429e4b9b1a56470c6c119a077910d2f090c21d0). So perhaps the CMake-based build has been broken on Cygwin for quite some time.
> 
> (In C code, `_WIN32` is #defined on Cygwin, which slightly adds to the confusion.)

Actually, that doesn't match my experience (and I just rechecked just to be sure), AFAIK `_WIN32` isn't defined by the compiler in Cygwin. (And other than that, the basics are defined in a unixy way, like `sizeof(long) == sizeof(void*)`.)

> Grepping the sources gave me a feeling that `MSYS` should be listed in addition to `CYGWIN` to cover MSYS and MSYS2.

Yep, that's probably true. (I wonder if the MSYS environment defines `CYGWIN` as well - I'm too lazy to check right now.) Overall very few programs care about how they work in MSYS as they primarily should be built for mingw instead. But I'm sure xz is relevant to have available in all environments.

> I have committed a fix to master. Thanks!

Thanks!

> Soname differences are hard to avoid with Libtool vs. anything else on certain platforms.

Yep; for one project that I maintain, I spent some extra effort in CMake to try to match the sonames that are produced with libtool closely.

> I wonder if not supporting Meson is a problem in the long term. I have seen one or two quickly-written files for building liblzma with Meson which work for x86-64 and maybe something else but can be suboptimal or maybe even subtly broken in some other cases. Maybe it's just the way things are, upstreams cannot worry about everything.

I've actually been faced with that decision as well.

For http://github.com/mstorsjo/fdk-aac, where I already have autotools and CMake, I got a PR to add Meson. Out of principle, I didn't want to merge it - it doesn't give any extra platform support over autotools and CMake. And if I'd do it, I'd want to spend the same level of effort as for CMake, making it match the autotools build both wrt soname and functionality across the main platforms. But even if I didn't merge it, the incomplete/unverified/possibly subtly incompatible Meson file lives on elsewhere in their wrapdb, unmaintained by me, used by some other Meson projects. So if I'd like to make sure it works properly, I guess I should take on the maintainance of that as well.
","",0,0,"","none","mstorsjo",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","",0,0,"","","","none"
"2023-10-06 17:00:00","CommitCommentEvent","Larhzu","tukaani-project/xz","2023-10-06 17:08:13","2023-10-06 17:08:13","none",129350555,"> I'm not entirely 100% sure here, but I think MINGW OR CYGWIN might be the right thing; cygwin in general doesn't set WIN32 I think, as it's mostly considered unixy.

It's unfortunate that it's not documented very clearly but it seems that [you are right](https://gitlab.kitware.com/cmake/cmake/-/commit/a429e4b9b1a56470c6c119a077910d2f090c21d0). So perhaps the CMake-based build has been broken on Cygwin for quite some time.

(In C code, `_WIN32` is #defined on Cygwin, which slightly adds to the confusion.)

Grepping the sources gave me a feeling that `MSYS` should be listed in addition to `CYGWIN` to cover MSYS and MSYS2.

I used `STREQUAL` instead of `MATCHES`. I suppose other Clang-based compiler strings in CMake aren't relevant in this particular case. I understand that `MATCHES` might be better in generic situations (it misses ""IntelLLVM"" though).

I have committed a fix to master. Thanks!

> And usually it's worse if one provides multiple build systems, but their functionality isn't entirely equal, either in how the build works, or worse, the header/pkgconfig install layout differs, or ABI details like sonames or such differ between various builds.

Most of these apply to XZ Utils for now. w32_update has a commit to install the pkgconfig file. On GNU/Linux even that differs slightly due to CMake not adding `-pthread` since pthreads are in libc in modern glibc versions. That difference shouldn't matter in practice, luckily.

Soname differences are hard to avoid with Libtool vs. anything else on certain platforms.

I wonder if not supporting Meson is a problem in the long term. I have seen one or two quickly-written files for building liblzma with Meson which work for x86-64 and maybe something else but can be suboptimal or maybe even subtly broken in some other cases. Maybe it's just the way things are, upstreams cannot worry about everything.

> There was something that seemed like action towards getting this resolved last year, but then maintainance stopped again.

That's a showstopper issue indeed. I didn't read in detail but I suppose there's a reason why Libtool was designed to work like it does, it's an old tool and some decisions might be less relevant on today's platforms. The big deal is that Libtool has had lack of developer resources for many years.

Thanks!","",0,0,"","none","Larhzu",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","",0,0,"","","","none"
"2023-10-06 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-06 17:02:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,12,"","","","none"
"2023-10-06 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-10-06 17:02:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-10-05 21:00:00","CommitCommentEvent","Larhzu","tukaani-project/xz","2023-10-05 21:09:44","2023-10-05 21:09:44","none",129271457,"Thanks for llvm-windres and improving the GNU windres compatibility! They way GNU windres handles the arguments doesn't feel right but it cannot be fixed in backward compatible way. It was confusing to figure it out as quoting has to work in both /bin/sh and cmd.exe. The docs don't directly say that `--use-temp-file` affects options handling but eventually I ended up trying that too.

Using `MINGW` instead of `WIN32`: I understand the point. Would Cygwin be affected then though? I suppose Cygwin needs the windres workaround too. So should it be `MINGW OR CYGWIN` or `WIN32 AND NOT MSVC`? Or are there more targets that match `WIN32` too? Sorry, I'm quite clueless here.

(There are more Windows-related improments to CMake-based build coming. I pushed some to the [w32_update](https://github.com/tukaani-project/xz/tree/w32_update) branch but it's not finished or polished yet. E.g. build.bash hasn't actually been tested on MSYS2 (and it's hardcoded for GCC too). Completely revised build instructions (CMake + MinGW-w64 + plain Command Prompt) for less experienced developers are coming too. For a long time I thought that CMake-based build would be for MSVC only but in the past two weeks I have started to think that it doesn't lack too many things anymore so maybe it should be polished to make it truly good on a few other common targets too.

I have heard comments saying that we should use Meson but years ago CMake support was requested due to Windows so that was started back then. Maintaining very many build systems isn't practical. Autotools cannot be dropped because those are likely the most supported method on less known platforms (for example, being EBCDIC compatible matters or at least did a few years ago) although Libtool's shared library versioning oddities [have bothered me](https://lists.gnu.org/archive/html/libtool/2011-06/msg00006.html) a long time.)","",0,0,"","none","Larhzu",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","",0,0,"","","","none"
"2023-10-05 21:00:00","CommitCommentEvent","mstorsjo","tukaani-project/xz","2023-10-05 21:21:45","2023-10-05 21:21:45","none",129272283,"> Using `MINGW` instead of `WIN32`: I understand the point. Would Cygwin be affected then though? I suppose Cygwin needs the windres workaround too. So should it be `MINGW OR CYGWIN` or `WIN32 AND NOT MSVC`? Or are there more targets that match `WIN32` too? Sorry, I'm quite clueless here.

I'm not entirely 100% sure here, but I think `MINGW OR CYGWIN` might be the right thing; cygwin in general doesn't set `WIN32` I think, as it's mostly considered unixy.

> I have heard comments saying that we should use Meson but years ago CMake support was requested due to Windows so that was started back then. Maintaining very many build systems isn't practical.

Yep, totally agree. And usually it's worse if one provides multiple build systems, but their functionality isn't entirely equal, either in how the build works, or worse, the header/pkgconfig install layout differs, or ABI details like sonames or such differ between various builds.

> Autotools cannot be dropped because those are likely the most supported method on less known platforms (for example, being EBCDIC compatible matters or at least did a few years ago) although Libtool's shared library versioning oddities [have bothered me](https://lists.gnu.org/archive/html/libtool/2011-06/msg00006.html) a long time.)

I've got plenty of Libtool frustrations myself as well...

Clang links compiler-rt builtins by passing an absolute path to the `.a` file, instead of passing `-L` + `-l`. If you're linking a C++ library with libtool, libtool decides to do a test run of the compiler with `-v`, to see what linker flags it passes by default. Then it will do the actual link with `-nostdlibs` and manually readd the options it thinks are relevant; it extracts all `-L` and `-l` options, but drops `/absolute/path/to/lib.a`. https://debbugs.gnu.org/cgi/bugreport.cgi?bug=27866 There was something that seemed like action towards getting this resolved last year, but then maintainance stopped again.","",0,0,"","none","mstorsjo",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","",0,0,"","","","none"
"2023-10-05 20:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-10-05 20:46:52","1970-01-01 00:00:00","none",0,"","",0,0,"w32_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-05 20:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-10-05 20:00:36","2023-10-05 20:00:36","created",1347909884,"It has macros for the generic versions too so ""for CRC32 and CRC64"" would be better.","src/liblzma/check/crc_common.h",4,4,"","none","Larhzu",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","3d1e9bdfe7252e79124cfde8e3e8116a5df10272","[]","[]","crc32-clmul","d3a0c78f9ecf93bfd8ad053a15a17777d233949b","master","01e34aa1171b04f8b28960b1cc6135a903e0c13d",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,239 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc_common.h
+/// \brief      Some functions and macros for CRC32CLMUL and CRC64CLMUL",4,"d3a0c78f9ecf93bfd8ad053a15a17777d233949b","25785cf998b8f8c844fbe9a2450f6e8060046bd6",0,0,"","","","none"
"2023-10-05 20:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-10-05 20:00:37","2023-10-05 20:00:36","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3d1e9bdfe7252e79124cfde8e3e8116a5df10272","[]","[]","crc32-clmul","d3a0c78f9ecf93bfd8ad053a15a17777d233949b","master","01e34aa1171b04f8b28960b1cc6135a903e0c13d",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-10-05 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-10-05 19:58:56","2023-10-05 19:58:55","created",1749561568,"I'm sorry for the delay. Neither Jia or I have been able to look at this in the past days. :-( We are both happy to see CLMUL version of CRC32 and it's great if you plan to do ARM64 versions too. :-)

The inline function version is definitely nicer when the speed is the same. So those changes should be squashed accordingly, thanks!

For a moment I thought that keeping crc_macros.h as is and adding crc_clmul.h would be nicer but, as Jia has pointed out, crc_common.h defines CRC_GENERIC and such too so I guess it is better this way. Many small bits of code depend on each other in such ways that it seems impossible to make things look very pretty.

In my experience it's nice if file renames are done as separate commits with only the mandatory edits. For example, the `\file` comment at the top would need changing to crc_common.h, and similarly the #include lines in the two .c files, Makefile.inc, and CMakeLists.txt. Any other changes would be in later commit(s).

Small commits in are preferred whenever doing so makes sense.

I wonder if it made sense to have crc_clmul.c with both CRC32 and CRC64 because then the binary wouldn't end up with two copies of is_clmul_supported() and crc_simd_body(). However, it's possible that crc_simd_body() has to be inlined if the function call overhead is too high for tiny input buffers.

I feel it might be good to merge this after the inline function change has been squashed so that we have some good version committed in xz.git. So feel free to try the crc_clmul.c idea if you wish but it's not required for merging.

Have you tested on 32-bit x86? If not, it's fine. :-) If yes: I haven't checked performance on 32-bit x86 in years and wonder if the assembly files still make sense compared to what GCC and Clang can do (for processors that don't support CLMUL). Those files were written in GCC 3.3/3.4 times. It shouldn't be hard to make 32-bit x86 autodetect between the assembly code and CLMUL so I can do it if it is worth it.

Thanks!","",0,0,"","none","Larhzu",64,"Crc32 clmul","[]","open",0,"","[]",4,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-04 20:00:00","ForkEvent","gmh5225","tukaani-project/xz","2023-10-04 20:24:25","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-04 19:00:00","WatchEvent","Dax89","tukaani-project/xz","2023-10-04 19:44:25","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-10-04 10:00:00","CommitCommentEvent","mstorsjo","tukaani-project/xz","2023-10-04 10:46:29","2023-10-04 10:46:29","none",129098431,"Kiitos/tack!

I was just about to submit a PR doing the same, when I saw that you had updated xz already to take this into account. Very much appreciated.

When I made llvm-windres originally, I wasn't aware of how `--use-temp-file` affects how GNU windres mangles the command line arguments. Without the flag, the arguments get interpreted by a shell one time extra within the `popen()`, as you've noted. Some projects explicitly expect this - see e.g. https://git.savannah.gnu.org/gitweb/?p=gettext.git;a=blob;f=windows/windres-options;h=b12edd0edc875a15dd0b79a54b975cd6ced91b0f;hb=775d1d26a8f72214834ef4d399bad4690b7a604c#l67 - and I've made llvm-windres handle that. That works, but if you'd be using that, you'd need to pass different `-D` options to windres and to the compiler in general. (That setup still is problematic for passing strings with spaces in them to GNU windres though.) But using `--use-temp-file` seems like a much nicer solution.

FWIW, I was about to suggest a slightly different form of the cmake conditional, something like this:
```cmake
if(MINGW AND (NOT CMAKE_C_COMPILER_ID MATCHES ""Clang"" OR
              CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL ""17""))
```
This assumes that any mingw-compatible toolchain supports this, with llvm-windres older than 16 being the exception. In the future for cleanup, that distinction could also maybe be dropped entirely.

Regardless, it might make sense to change the leading `if (WIN32 ...` into `if (MINGW` in any case; I think a setup with Clang acting in MSVC mode (with `llvm-rc` or MS `rc.exe` as the RC tool) would hit this otherwise.","",0,0,"","none","mstorsjo",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"0570308ddd9c0e39e85597ebc0e31d4fc81d436f","",0,0,"","","","none"
"2023-10-03 03:00:00","WatchEvent","ainilili","tukaani-project/xz-java","2023-10-03 03:27:28","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-30 19:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-09-30 19:22:05","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_lfs","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 19:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2023-09-29 19:16:01","2023-09-29 19:16:00","created",1741371667,"I have made all of the changes listed above. I am also planning to work on implementations for arm versions of crc32_clmul and crc64_clmul after this is finished.","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",3,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 16:34:26","2023-09-29 16:34:27","created",1341584118,"If we are using `crc_simd_body()` as an inline function, we probably do not need `__attribute__((__no_sanitize_address__))` on `crc32_clmul()` and `crc64_clmul()`. Can you verify with both GCC and Clang? If you haven't used ASAN before, pass `-fsanitize=address` in CFLAGS when configuring.","src/liblzma/check/crc_common.h",146,146,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -0,0 +1,258 @@
+///////////////////////////////////////////////////////////////////////////////
+//
+/// \file       crc_common.h
+/// \brief      Some functions and macros for CRC32CLMUL and CRC64CLMUL
+//
+//  Authors:    Lasse Collin
+//              Ilya Kurdyukov
+//              Hans Jansen
+//
+//  This file has been put into the public domain.
+//  You can do whatever you want with this file.
+//
+///////////////////////////////////////////////////////////////////////////////
+
+#ifdef WORDS_BIGENDIAN
+#	define A(x) ((x) >> 24)
+#	define B(x) (((x) >> 16) & 0xFF)
+#	define C(x) (((x) >> 8) & 0xFF)
+#	define D(x) ((x) & 0xFF)
+
+#	define S8(x) ((x) << 8)
+#	define S32(x) ((x) << 32)
+
+#else
+#	define A(x) ((x) & 0xFF)
+#	define B(x) (((x) >> 8) & 0xFF)
+#	define C(x) (((x) >> 16) & 0xFF)
+#	define D(x) ((x) >> 24)
+
+#	define S8(x) ((x) >> 8)
+#	define S32(x) ((x) >> 32)
+#endif
+
+
+#undef CRC_GENERIC
+#undef CRC_CLMUL
+#undef CRC_USE_GENERIC_FOR_SMALL_INPUTS
+
+// If CLMUL cannot be used then only the generic slice-by-four is built.
+#if !defined(HAVE_USABLE_CLMUL)
+#	define CRC_GENERIC 1
+
+// If CLMUL is allowed unconditionally in the compiler options then the
+// generic version can be omitted. Note that this doesn't work with MSVC
+// as I don't know how to detect the features here.
+//
+// NOTE: Keep this this in sync with crc32_table.c.
+#elif (defined(__SSSE3__) && defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+#	define CRC_CLMUL 1
+
+// Otherwise build both and detect at runtime which version to use.
+#else
+#	define CRC_GENERIC 1
+#	define CRC_CLMUL 1
+
+/*
+	// The generic code is much faster with 1-8-byte inputs and has
+	// similar performance up to 16 bytes  at least in microbenchmarks
+	// (it depends on input buffer alignment too). If both versions are
+	// built, this #define will use the generic version for inputs up to
+	// 16 bytes and CLMUL for bigger inputs. It saves a little in code
+	// size since the special cases for 0-16-byte inputs will be omitted
+	// from the CLMUL code.
+#	define CRC_USE_GENERIC_FOR_SMALL_INPUTS 1
+*/
+
+#	if defined(_MSC_VER)
+#		include <intrin.h>
+#	elif defined(HAVE_CPUID_H)
+#		include <cpuid.h>
+#	endif
+#endif
+
+////////////////////////
+// Detect CPU support //
+////////////////////////
+
+#if defined(CRC_GENERIC) && defined(CRC_CLMUL)
+static inline bool
+is_clmul_supported(void)
+{
+	int success = 1;
+	uint32_t r[4]; // eax, ebx, ecx, edx
+
+#if defined(_MSC_VER)
+	// This needs <intrin.h> with MSVC. ICC has it as a built-in
+	// on all platforms.
+	__cpuid(r, 1);
+#elif defined(HAVE_CPUID_H)
+	// Compared to just using __asm__ to run CPUID, this also checks
+	// that CPUID is supported and saves and restores ebx as that is
+	// needed with GCC < 5 with position-independent code (PIC).
+	success = __get_cpuid(1, &r[0], &r[1], &r[2], &r[3]);
+#else
+	// Just a fallback that shouldn't be needed.
+	__asm__(""cpuid\n\t""
+			: ""=a""(r[0]), ""=b""(r[1]), ""=c""(r[2]), ""=d""(r[3])
+			: ""a""(1), ""c""(0));
+#endif
+
+	// Returns true if these are supported:
+	// CLMUL (bit 1 in ecx)
+	// SSSE3 (bit 9 in ecx)
+	// SSE4.1 (bit 19 in ecx)
+	const uint32_t ecx_mask = (1 << 1) | (1 << 9) | (1 << 19);
+	return success && (r[2] & ecx_mask) == ecx_mask;
+
+	// Alternative methods that weren't used:
+	//   - ICC's _may_i_use_cpu_feature: the other methods should work too.
+	//   - GCC >= 6 / Clang / ICX __builtin_cpu_supports(""pclmul"")
+	//
+	// CPUID decding is needed with MSVC anyway and older GCC. This keeps
+	// the feature checks in the build system simpler too. The nice thing
+	// about __builtin_cpu_supports would be that it generates very short
+	// code as is it only reads a variable set at startup but a few bytes
+	// doesn't matter here.
+}
+#endif
+
+
+#define MASK_L(in, mask, r) r = _mm_shuffle_epi8(in, mask);
+#define MASK_H(in, mask, r) \
+	r = _mm_shuffle_epi8(in, _mm_xor_si128(mask, vsign));
+#define MASK_LH(in, mask, low, high) \
+	MASK_L(in, mask, low) MASK_H(in, mask, high)
+
+#define FOLD \
+	*v1 = _mm_xor_si128(*v1, _mm_clmulepi64_si128(*v0, vfold16, 0x00)); \
+	*v0 = _mm_xor_si128(*v1, _mm_clmulepi64_si128(*v0, vfold16, 0x11));
+
+#define CRC_SIMD_LOOP \
+	while (aligned_buf < end) { \
+		FOLD \
+		*v1 = _mm_load_si128(aligned_buf++); \
+	}
+
+#ifdef CRC_CLMUL
+
+#include <immintrin.h>
+
+
+#if (defined(__GNUC__) || defined(__clang__)) && !defined(__EDG__)
+__attribute__((__target__(""ssse3,sse4.1,pclmul"")))
+#endif
+#if lzma_has_attribute(__no_sanitize_address__)",146,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af",0,0,"","","","none"
"2023-09-29 16:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 16:26:43","2023-09-29 16:26:43","created",1341575935,"This #if needs to be:
`#if !defined(HAVE_ENCODERS) && ((defined(__x86_64__) && defined(__SSSE3__) \
			&& defined(__SSE4_1__) && defined(__PCLMUL__)) \
		|| (defined(__e2k__) && __iset__ >= 6))`

The `!defined(HAVE_ENCODERS)` part is needed because the LZ encoder needs the `lzma_crc32_table`. See lz_encoder_hash.h if you are interested.","src/liblzma/check/crc32_table.c",7,18,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,11 +12,22 @@
 
 #include ""common.h""
 
+
+// FIXME: Compared to crc32_fast.c this has to check for __x86_64__ too
+// so that in 32-bit builds crc32_x86.S won't break due to a missing table.
+#if (defined(__x86_64__) && defined(__SSSE3__) \",7,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af",0,0,"","","","none"
"2023-09-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 16:34:28","2023-09-29 16:34:27","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 16:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 16:26:44","2023-09-29 16:26:43","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 15:09:50","2023-09-29 15:09:50","created",1341482584,"This page is no longer available, so this is a good time to update the link if we can. Is there another publicly available link where the PDF can be viewed? If not, we should remove the link altogether. The GitHub link works so we can at least update the (URLs were checked on ) part.","src/liblzma/check/crc32_fast.c",14,15,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -3,13 +3,28 @@
 /// \file       crc32.c
 /// \brief      CRC32 calculation
 ///
-/// Calculate the CRC32 using the slice-by-eight algorithm.
+/// There are two methods in this file.
+/// crc32_generic uses the slice-by-eight algorithm.
 /// It is explained in this document:
 /// http://www.intel.com/technology/comms/perfnet/download/CRC_generators.pdf
 /// The code in this file is not the same as in Intel's paper, but
 /// the basic principle is identical.
+///
+/// crc32_clmul uses 32/64-bit x86 SSSE3, SSE4.1, and CLMUL instructions.
+/// It was derived from
+/// https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/fast-crc-computation-generic-polynomials-pclmulqdq-paper.pdf",14,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","4f4fa67bb0ece999a959680cb19f8d977b72363c",0,0,"","","","none"
"2023-09-29 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 15:02:03","2023-09-29 15:02:03","created",1341474386,"I think this was missing from the first patchset, so good that you added it this time. Make sure to test and build with CMake if you can. The CMakeLists.txt needs to be updated in a similar way for the new crc_common.h (and removing crc_macros.h)","src/liblzma/check/Makefile.inc",5,15,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,7 +12,7 @@ EXTRA_DIST += \
 liblzma_la_SOURCES += \
 	check/check.c \
 	check/check.h \
-	check/crc_macros.h
+	check/crc_common.h",5,"90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af",0,0,"","","","none"
"2023-09-29 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 15:12:40","2023-09-29 15:12:40","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 15:09:51","2023-09-29 15:09:50","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-29 15:02:04","2023-09-29 15:02:03","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","f66eccb727cc47c39ebc91ee9a8ee6959ce7e10b","[]","[]","crc32-clmul","90103edf5aa3bc4bb592e7a1b5aa52f30bbd56af","master","5a9af95f85a7e5d4f9c10cb8cf737651a921f1d1",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-29 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-29 14:31:29","1970-01-01 00:00:00","none",0,"","",0,0,"w32_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-29 14:50:58","2023-09-29 14:50:57","created",1741017862,"The issues preventing Windows-CI from passing have been fixed on master. There were actually two problems, both related to Clang 17.0.1 release. If you are curious, [this](https://github.com/tukaani-project/xz/commit/0570308ddd9c0e39e85597ebc0e31d4fc81d436f) and [this](https://github.com/tukaani-project/xz/commit/01e34aa1171b04f8b28960b1cc6135a903e0c13d) are the commits. The related bugs for Clang are in the commit messages :)

So feel free to continue your work on a PR now that the issues are resolved. Thanks for bringing this to our attention!","",0,0,"","none","JiaT75",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",3,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-29 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-29 14:27:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-09-28 19:00:00","WatchEvent","NettyDev","tukaani-project/xz","2023-09-28 19:11:11","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-28 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-28 13:44:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/debug_CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-09-27 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-27 20:20:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2023-09-27 18:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-09-27 18:39:24","2023-09-27 18:39:23","created",1737901102,"Ok, thanks for the confirmation, Jia!","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",6,"CONTRIBUTOR","2023-09-26 17:54:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-27 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-27 17:52:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/w32_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-27 16:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-09-27 16:58:13","1970-01-01 00:00:00","none",0,"","",0,0,"w32_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-27 15:36:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/debug_CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-27 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-27 15:50:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/debug_CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-27 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-27 14:33:04","1970-01-01 00:00:00","none",0,"","",0,0,"debug_CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-27 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-27 12:28:00","2023-09-27 12:27:59","created",1737294180,"@gabibguti It looks like Windows CI is broken on the master branch, so thanks for letting us know. I have it set it up to only run manually because it runs much slower than Ubuntu and Mac OS runners. I suppose I should manually run it more often.

We have been doing a few Windows related changes for xz recently so thats likely what broke it. I will investigate the issue and let you know when  it is fixed.","",0,0,"","none","JiaT75",66,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",5,"CONTRIBUTOR","2023-09-26 17:54:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 21:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-09-26 21:59:43","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_lfs","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 20:00:00","IssueCommentEvent","hansjans162","tukaani-project/xz","2023-09-26 20:40:38","2023-09-26 20:40:38","created",1736264840,"> Hello!
> 
> Thanks for the PR, this is something we have wanted to implement since CLMUL was added for CRC64. 70% speed up over the generic method is a great speedup!
> 
> If you are willing, can you do some additional benchmarks for us since you already have a framework setup? We are wondering what impact the compiler has, so can you show us differences between using GCC and Clang? This especially matters when it comes to the 3% speed up you mentioned for the inline asm. 3% isn't that significant, especially if its only for CRC32. It adds extra complexity to the code and makes it harder to maintain long-term, so we want to make sure it is worth it. Similarly, can you try making CRC_SIMD_BODY an inline function instead of a macro? This could make it easier to read/maintain. If it has a significant impact on performance then we should stick to a macro.
> 
> So in summary, can you benchmark:
> 
>     * Impact of using GCC versus Clang in general
> 
>     * Impact of  removing the inline asm (GCC and Clang both)
> 
>     * Impact of replacing CRC_SIMD_BODY macro with inline function (GCC and Clang both)

I tested the difference that using GCC and Clang made in general and found that when using Clang instead of GCC there was negligible difference.

The difference that using GCC and Clang made on the inline assembly was a 2% increase on GCC and 1% or less for Clang. Since this increase is not very significant I can get rid of the changes if you would like.

Replacing CRC_SIMD_BODY with an inline function had no change to the runtime. Ill upload the Inline function as an extra commit, and squash it once you decide which one you like better.","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",2,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 20:00:00","PullRequestReviewCommentEvent","hansjans162","tukaani-project/xz","2023-09-26 20:41:09","2023-09-26 20:41:10","created",1337758018,"When I tested this I found that for both crc32 and crc64 they were faster than generic after 5 bytes.","src/liblzma/check/crc_clmul_common.h",37,38,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","02b70e056186a4e754742dc67d00f165006c4367","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,6 +12,93 @@
 //
 ///////////////////////////////////////////////////////////////////////////////
 
+#undef CRC_GENERIC
+#undef CRC_CLMUL
+#undef CRC_USE_GENERIC_FOR_SMALL_INPUTS
+
+// If CLMUL cannot be used then only the generic slice-by-four is built.
+#if !defined(HAVE_USABLE_CLMUL)
+#	define CRC_GENERIC 1
+
+// If CLMUL is allowed unconditionally in the compiler options then the
+// generic version can be omitted. Note that this doesn't work with MSVC
+// as I don't know how to detect the features here.
+//
+// NOTE: Keep this this in sync with crc32_table.c.
+#elif (defined(__SSSE3__) && defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+#	define CRC_CLMUL 1
+
+// Otherwise build both and detect at runtime which version to use.
+#else
+#	define CRC_GENERIC 1
+#	define CRC_CLMUL 1
+
+/*
+	// The generic code is much faster with 1-8-byte inputs and has",37,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9",0,0,"","","","none"
"2023-09-26 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 20:17:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clock_gettime","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",31,6,"","","","none"
"2023-09-26 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 20:17:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",27,2,"","","","none"
"2023-09-26 20:00:00","PullRequestReviewEvent","hansjans162","tukaani-project/xz","2023-09-26 20:41:10","2023-09-26 20:41:10","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","02b70e056186a4e754742dc67d00f165006c4367","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 19:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 19:50:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,3,"","","","none"
"2023-09-26 18:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-09-26 18:48:56","2023-09-26 18:48:56","created",1337645597,"I kept searching but I cannot find anything to confirm my memory. So I apologize for the noise. I updated the comment in the master.","src/liblzma/check/crc32_table.c",12,23,"","none","Larhzu",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","02b70e056186a4e754742dc67d00f165006c4367","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,11 +12,24 @@
 
 #include ""common.h""
 
+
+// FIXME: Compared to crc32_fast.c this has to check for __x86_64__ too
+// so that in 32-bit builds crc32_x86.S won't break due to a missing table.
+#if (defined(__x86_64__) && defined(__SSSE3__) \
+			&& defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+// No table needed but something has to be exported to keep some toolchains
+// happy. Also use a declaration to silence compiler warnings.
+extern const char lzma_crc32_dummy;",12,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","d49c14a92077e2cf8055d06e7dad204c40410f30",0,0,"","","","none"
"2023-09-26 18:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 18:47:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-26 18:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-09-26 18:48:57","2023-09-26 18:48:56","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","02b70e056186a4e754742dc67d00f165006c4367","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 17:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-09-26 17:54:42","2023-09-26 17:54:41","created",1736017711,"Closing this PR to make more tests locally.","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",4,"CONTRIBUTOR","2023-09-26 17:54:41","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 17:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-09-26 17:27:47","2023-09-26 17:27:47","created",1735979250,"I think the failure is not related to the PR changes, can you confirm by running the workflow on the repository?","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",3,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 17:00:00","PullRequestEvent","gabibguti","tukaani-project/xz","2023-09-26 17:54:42","2023-09-26 17:54:41","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [x] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Referencing actions by major tag (e.g. `v3`)

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/65


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

Referencing actions by commit SHA (e.g. `8ade135a41bc03ea155e62e844d188df1ea18608`)

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","closed",0,"","[]",4,"CONTRIBUTOR","2023-09-26 17:54:41","1970-01-01 00:00:00","ccdaca334a4ec108a3dda17d8eacd413f5da0575","[]","[]","master","845e5aaf4884d3844cf58a9ac85c02b24373d2c1","master","8ebaf3f665ddc7e4f19c613005050dde5ccbe499",0,1,0,"unstable","",0,0,4,3,3,2,"",0,"","",0,0,"","","","none"
"2023-09-26 17:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-09-26 17:10:47","2023-09-26 17:10:48","created",1337543950,"Unfortunately I cannot find a reference right now but I have a feeling that some toolchain on some proprietary UNIX-like OS didn't like object files that don't export anything. The trick for the Windows build is fine because it's not a problem there with the GNU toolchain. That is, an empty translation unit in C and an object file that exports nothing are related but distinct issues. typedef works for avoiding empty translation units but not empty object files.

I might remember wrong and in that case I'm sorry for the noise. But if I'm wrong and the commit in the master is retained then its comment should be updated as no symbols are exported after that commit.","src/liblzma/check/crc32_table.c",12,23,"","none","Larhzu",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","3126c60d923f711abd06e5a87f4295b057808479","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,11 +12,24 @@
 
 #include ""common.h""
 
+
+// FIXME: Compared to crc32_fast.c this has to check for __x86_64__ too
+// so that in 32-bit builds crc32_x86.S won't break due to a missing table.
+#if (defined(__x86_64__) && defined(__SSSE3__) \
+			&& defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+// No table needed but something has to be exported to keep some toolchains
+// happy. Also use a declaration to silence compiler warnings.
+extern const char lzma_crc32_dummy;",12,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","d49c14a92077e2cf8055d06e7dad204c40410f30",0,0,"","","","none"
"2023-09-26 17:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-09-26 17:10:48","2023-09-26 17:10:48","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","3126c60d923f711abd06e5a87f4295b057808479","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 16:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-09-26 16:11:56","1970-01-01 00:00:00","none",0,"","",0,0,"build_werror","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 16:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-09-26 16:43:09","2023-09-26 16:43:08","created",1735912689,"## Other information
`windows-ci` is failing in my fork. I tested it on the [last commit it was working](https://github.com/tukaani-project/xz/commit/bf65f25ac8fa8b6686459c004759d8b77ba17502) without changes and it failed too, maybe it needs some data only the original repository has?","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 16:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-09-26 16:44:53","2023-09-26 16:44:52","created",1735917722,"An idea to fix `windows-ci`: I can add a trigger to run `on: pull_request` in my fork and test if the workflow is working on this PR.","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",2,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 16:00:00","PullRequestEvent","gabibguti","tukaani-project/xz","2023-09-26 16:35:38","2023-09-26 16:35:37","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [x] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Referencing actions by major tag (e.g. `v3`)

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/65


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

Referencing actions by commit SHA (e.g. `8ade135a41bc03ea155e62e844d188df1ea18608`)

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","gabibguti",66,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","master","23cadaf01fe7ea59961e946029d778849bddc268","master","8ebaf3f665ddc7e4f19c613005050dde5ccbe499",0,0,0,"unknown","",0,1,2,5,5,2,"",0,"","",0,0,"","","","none"
"2023-09-26 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 16:40:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,3,"","","","none"
"2023-09-26 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 16:34:35","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/build_werror","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-26 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-26 16:05:53","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-26 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 15:00:44","2023-09-26 15:00:43","created",1735724045,"Hello!

Thanks for the PR, this is something we have wanted to implement since CLMUL was added for CRC64. 70% speed up over the generic method is a great speedup!

If you are willing, can you do some additional benchmarks for us since you already have a framework setup? We are wondering what impact the compiler has, so can you show us differences between using GCC and Clang? This especially matters when it comes to the 3% speed up you mentioned for the inline asm. 3% isn't that significant, especially if its only for CRC32. It adds extra complexity to the code and makes it harder to maintain long-term, so we want to make sure it is worth it. Similarly, can you try making CRC_SIMD_BODY an inline function instead of a macro? This could make it easier to read/maintain. If it has a significant impact on performance then we should stick to a macro.

So in summary, can you benchmark:

- Impact of using GCC versus Clang in general
- Impact of  removing the inline asm (GCC and Clang both)
- Impact of replacing CRC_SIMD_BODY macro with inline function (GCC and Clang both)

You don't need to make this change now, but before merging it would be great if you can clean up the commits:

- Label each commit with ""liblzma:"". We do this since it helps keep the commit log consistent and organized.
- Please squash commits 1, 3, and 5 into a single commit. I understand this is how you developed it and the thought process makes sense. But it will help the commit log stay cleaner if we don't have to create crc_clmul_macros.h just to later rename its variables and rename the file itself.

Feel free to add fix up commits as we go through the review process but at the end we will need these changes.","",0,0,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 15:29:41","2023-09-26 15:29:41","created",1337407471,"It seems worth combining this file and crc_macros.h into a single common crc header file. At this point crc_clmul_common.h does more than just clmul things since it also defines CRC_GENERIC.

I wouldn't put these things into check.h since they are specific for just crc32 and crc64. So maybe crc_common.h make sense after all.","src/liblzma/check/crc_clmul_common.h",1,1,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",1,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9",0,0,"","","","none"
"2023-09-26 15:00:00","PullRequestReviewCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 15:14:56","2023-09-26 15:14:57","created",1337383917,"Did you test this with crc32? I would guess small inputs it have the same performance effect as crc64 but we might want to improve the comment if the impact is difference","src/liblzma/check/crc_clmul_common.h",37,38,"","none","JiaT75",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,6 +12,93 @@
 //
 ///////////////////////////////////////////////////////////////////////////////
 
+#undef CRC_GENERIC
+#undef CRC_CLMUL
+#undef CRC_USE_GENERIC_FOR_SMALL_INPUTS
+
+// If CLMUL cannot be used then only the generic slice-by-four is built.
+#if !defined(HAVE_USABLE_CLMUL)
+#	define CRC_GENERIC 1
+
+// If CLMUL is allowed unconditionally in the compiler options then the
+// generic version can be omitted. Note that this doesn't work with MSVC
+// as I don't know how to detect the features here.
+//
+// NOTE: Keep this this in sync with crc32_table.c.
+#elif (defined(__SSSE3__) && defined(__SSE4_1__) && defined(__PCLMUL__)) \
+		|| (defined(__e2k__) && __iset__ >= 6)
+#	define CRC_CLMUL 1
+
+// Otherwise build both and detect at runtime which version to use.
+#else
+#	define CRC_GENERIC 1
+#	define CRC_CLMUL 1
+
+/*
+	// The generic code is much faster with 1-8-byte inputs and has",37,"9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9",0,0,"","","","none"
"2023-09-26 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-26 15:29:42","2023-09-26 15:29:41","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-26 15:14:57","2023-09-26 15:14:56","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 15:00:00","PullRequestReviewEvent","JiaT75","tukaani-project/xz","2023-09-26 15:09:33","2023-09-26 15:09:32","created",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","d5fc7f24a6706258ebd5327fe45f270881eed68e","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-26 14:00:00","IssueCommentEvent","gabibguti","tukaani-project/xz","2023-09-26 14:19:33","2023-09-26 14:19:32","created",1735642719,"Hi Jia! Ok, nice, I'll open a PR! And yes, there's this downside of having to keep an eye to update the actions. You can update it manually or there's also the option to use [dependabot](https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/) or [renovatebot](https://docs.renovatebot.com/#why-use-renovate).","",0,0,"","none","gabibguti",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",2,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 14:25:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-26 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-09-26 12:29:05","2023-09-26 12:29:05","created",1735447590,"Hello!

Thanks again for the security advice. I suppose the only downside for this is not receiving potential bugfixes for the version we reference for the action. This can be mitigated by me not being lazy and subscribing to receive notifications when these repositories publish a release, so I have done that :)

Feel free to provide a PR for this. I believe all that needs changing is:

ci.yml
- actions/checkout
- actions/upload-artifact

windows-ci.yml
- actions/checkout
- actions/upload-artifact
- msys2/setup-msys2","",0,0,"","none","JiaT75",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",1,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-26 12:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 12:02:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-26 10:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-26 10:53:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-09-26 05:00:00","WatchEvent","FooIbar","tukaani-project/xz","2023-09-26 05:26:28","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-25 20:00:00","IssuesEvent","gabibguti","tukaani-project/xz","2023-09-25 20:18:38","2023-09-25 20:18:37","opened",0,"### Describe the Feature

Referencing actions by commit SHA in GitHub workflows guarantees you are using an immutable version. Actions referenced by tags and branches are more vulnerable to attacks, such as the tag being moved to a malicious commit or a malicious commit being pushed to the branch.

Although there are pros and cons for each reference, GitHub understands [using commit SHAs is more reliable](https://docs.github.com/en/actions/learn-github-actions/finding-and-customizing-actions#using-shas), as does [Scorecard](https://github.com/ossf/scorecard/blob/main/docs/checks.md#pinned-dependencies) security tool.

If you agree, this would change, for example, `actions/checkout@v3` to `actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744` followed by a comment `# v3.6.0` to keep the version readable. Additionally, we can take this moment to bump `actions/checkout` to `v4` and other actions.

### Expected Complications

None.

### Will I try to implement this new feature?

Yes","",0,0,"","none","gabibguti",65,"[Feature Request]: Reference actions by commit SHA","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-25 19:00:00","PullRequestEvent","hansjans162","tukaani-project/xz","2023-09-25 19:53:54","2023-09-25 19:53:53","opened",0,"Added an implementation for crc32 that makes use of clmul.
Code for this implementation was written by Ilya Kurdyukov and can be found here.
https://github.com/ilyakurdyukov/crc-clmul-sim

Also refactored crc64_clmul to use the new macros created for crc32_clmul.
As well as moved similar functions to crc_clmul_common to eliminate duplicate code.

I tested this on files doubling in size starting from 1 byte up to 1 Gigabyte.
During testing I found that crc32_clmul can run up to 70% faster than crc32_generic,
and has an average speed increase of 58.4% for sizes greater than 16 bytes.

I also used this to test the reworked version of crc64_clmul.
This version of crc64_clmul is an average of 3.9% faster than the original implementation.
This speed increase is due to some inline assembly as well as changing around the order of some if statements. 


## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [X] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
crc32\_fast currently only uses a generic implementation.


## What is the new behavior?
I added an implementation for crc32 that makes use of clmul in crc32_fast.c 
Also refactored crc64_clmul implementation to use the same macros as crc32_clmul


## Does this introduce a breaking change?

- [ ] Yes
- [X] No


## Other information

Here is the output from both tests that gave me the statistics above.

the number of unique files tested on and the number of times the crc is run
decrease as the bytes get larger so the benchmark does not take too long.

The 64 and 32 spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
For example (50% is twice as fast, 200% is twice as slow)
```
64 generic: #		64 clmul: +
32 generic: =		32 clmul: *

#bytes, #files,   #crc's,  64spd+,  32spd+: 0%          50%          100%        150%         200%
    16,  30000, 20648881,  39.96%,  24.24%: |           |      +*    | =    #    |            |
    32,  30000, 12782640,  55.79%,  36.26%: |           |   +*       |  =        #            |
    64,  30000,  7255012,  72.19%,  50.27%: |           +*           | =         |       #    |
   128,  30000,  3890368,  82.53%,  69.13%: |       +*  |            |    =      |            |#
   256,  30000,  2018311,  82.19%,  68.21%: |        +  |            |   =       |            |#
   512,  30000,  1028488,  79.37%,  63.75%: |         + |            |  =        |            #
    1K,  30000,   519217,  78.11%,  62.22%: |         + |            |   =       |           #|
    2K,  30000,   260870,  76.74%,  61.71%: |          +|            |  =        |          # |
    4K,  30000,   130752,  76.78%,  60.15%: |          +|            |  =        |          # |
    8K,  30000,    65456,  76.24%,  60.59%: |          +|            |  =        |          # |
   16K,  30000,    32748,  76.66%,  60.03%: |          +|            |  =        |          # |
   32K,  30000,    16379,  76.78%,  60.04%: |          +|            |  =        |          # |
   64K,  16384,     8190,  76.62%,  59.76%: |          +|            |  =        |          # |
  128K,   8192,     4095,  76.52%,  59.71%: |          +|            |  =        |          # |
  256K,   4096,     2047,  76.32%,  59.78%: |          +|            |  =        |          # |
  512K,   2048,     1023,  84.70%,  60.09%: |        +  |         =  |           |            |       #
    1M,   1024,      511,  76.71%,  60.29%: |          +|            |  =        |          # |
    2M,    512,      255,  76.47%,  59.96%: |          +|            |  =        |          # |
    4M,    256,      127,  76.42%,  60.03%: |          +|            |  =        |          # |
    8M,    128,       63,  76.33%,  60.22%: |          +|            |  =        |          # |
   16M,     64,       31,  76.55%,  60.23%: |          +|            |  =        |          # |
   32M,     32,       15,  76.14%,  60.66%: |          +|            |  =        |          # |
   64M,     16,       10,  76.53%,  59.99%: |          +|            |  =        |          # |
  128M,      8,       10,  76.27%,  60.28%: |          +|            |  =        |          # |
  256M,      4,       10,  76.42%,  59.96%: |          +|            |  =        |          # |
  512M,      2,       10,  76.45%,  60.23%: |          +|            |  =        |          # |
    1G,      1,       10,  76.64%,  60.19%: |          +|            |  =        |          # |
total average:             75.13%,  58.44%

```


The 64old and 64new spd+ show the percentage speed increase over the generic.
The percentage on the graph show the combined average for all types.
```
64 generic: #     64 clmul old: +     64 clmul new: *

#bytes, #files,   #crc's, old64spd+, new64spd+: 0%          50%          100%        150%         200%
     1,  30000, 48806446,  -97.328%,  -88.708%, |           | #          | * +       |            |
     2,  30000, 44739242,  -57.943%,  -48.621%, |           |     #      |* +        |            |
     4,  30000, 38347922,   -9.964%,   -4.811%, |           |          #*|+          |            |
     8,  30000, 29826161,   -0.558%,    3.477%, |           |           *+           |            |
    16,  30000, 20648881,   39.017%,   41.582%, |           |        +   |         # |            |
    32,  30000, 12782640,   54.057%,   54.848%, |           |      +     |           |    #       |
    64,  30000,  7255012,   69.551%,   70.777%, |           |  *+        |           |            | #
   128,  30000,  3890368,   81.047%,   81.603%, |          *+            |           |            |            #
   256,  30000,  2018311,   81.129%,   81.619%, |          +|            |           |            |           #
   512,  30000,  1028488,   77.798%,   79.257%, |           *+           |           |            |         #
    1K,  30000,   519217,   75.448%,   77.138%, |           |*+          |           |            |       #
    2K,  30000,   260870,   73.763%,   75.518%, |           |*+          |           |            |     #
    4K,  30000,   130752,   73.392%,   75.773%, |           |* +         |           |            |     #
    8K,  30000,    65456,   74.341%,   76.026%, |           |*+          |           |            |      #
   16K,  30000,    32748,   68.951%,   70.712%, |           |  *+        |           |            | #
   32K,  30000,    16379,   73.761%,   76.129%, |           |*+          |           |            |      #
   64K,  16384,     8190,   74.789%,   76.561%, |           |*+          |           |            |      #
  128K,   8192,     4095,   74.834%,   75.900%, |           |*+          |           |            |      #
  256K,   4096,     2047,   74.508%,   76.488%, |           |*+          |           |            |      #
  512K,   2048,     1023,   74.781%,   75.998%, |           |*+          |           |            |      #
    1M,   1024,      511,   74.523%,   76.610%, |           |*+          |           |            |      #
    2M,    512,      255,   74.871%,   76.690%, |           |*+          |           |            |      #
    4M,    256,      127,   74.656%,   76.658%, |           |*+          |           |            |      #
    8M,    128,       63,   74.151%,   76.085%, |           |*+          |           |            |      #
   16M,     64,       31,   74.802%,   76.263%, |           |*+          |           |            |      #
   32M,     32,       15,   74.671%,   76.244%, |           |*+          |           |            |      #
   64M,     16,       10,   74.626%,   76.459%, |           |*+          |           |            |      #
  128M,      8,       10,   74.738%,   76.497%, |           |*+          |           |            |      #
  256M,      4,       10,   74.395%,   76.110%, |           |*+          |           |            |      #
  512M,      2,       10,   74.904%,   76.549%, |           |*+          |           |            |      #
    1G,      1,       10,   74.709%,   76.477%, |           |*+          |           |            |      #
total average:              57.949%,   60.255%, 
speed increase new vs old:  3.979%
```
","",0,0,"","none","hansjans162",64,"Crc32 clmul","[]","open",0,"","[]",0,"CONTRIBUTOR","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","crc32-clmul","9d7e8e7ee1c5d81f27bf8efee28521d0882808e9","master","519e47c2818acde571fadc79551294527fe6cc22",0,0,0,"unknown","",0,1,5,516,245,4,"",0,"","",0,0,"","","","none"
"2023-09-25 17:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-25 17:18:55","1970-01-01 00:00:00","none",0,"","",0,0,"xz_update_getoptlong","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 17:01:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-09-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 17:10:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",18,16,"","","","none"
"2023-09-25 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 17:17:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-25 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 16:24:26","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",14,14,"","","","none"
"2023-09-25 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 16:31:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-25 15:00:00","ForkEvent","FooIbar","tukaani-project/xz","2023-09-25 15:40:48","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-25 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-25 14:20:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",16,16,"","","","none"
"2023-09-24 22:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 22:50:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clock_gettime","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,6,"","","","none"
"2023-09-24 22:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 22:50:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,2,"","","","none"
"2023-09-24 15:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-09-24 15:04:37","1970-01-01 00:00:00","none",0,"","",0,0,"xz_w2k","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-24 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-24 15:05:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",19,16,"","","","none"
"2023-09-24 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 15:04:24","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,0,"","","","none"
"2023-09-24 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 15:00:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clock_gettime","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,3,"","","","none"
"2023-09-24 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 15:00:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-09-24 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 14:48:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_w2k","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-09-24 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-24 14:11:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_update_getoptlong","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-09-24 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-24 14:10:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-24 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-24 13:36:24","1970-01-01 00:00:00","none",0,"","",0,0,"xz_update_getoptlong","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-23 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-23 21:21:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clock_gettime","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-23 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-23 20:58:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/tuklib_integer_memcpy","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-23 00:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-09-23 00:26:00","1970-01-01 00:00:00","none",0,"","",0,0,"clock_gettime","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-22 23:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-09-22 23:22:13","1970-01-01 00:00:00","none",0,"","",0,0,"tuklib_integer_memcpy","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-22 18:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-22 18:27:05","2023-09-22 18:27:05","created",1731869205,"xz_w2k includes simple commits that remove pre-W2k support. Very likely it will be merged but I didn't want to put it to master directly.

The getopt.in.h question will be reconsidered. I don't know yet if it will be changed.

I think everything from this PR and discussion has been handled now. Thanks a lot!","",0,0,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",15,"CONTRIBUTOR","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-22 17:00:00","DeleteEvent","Larhzu","tukaani-project/xz","2023-09-22 17:32:35","1970-01-01 00:00:00","none",0,"","",0,0,"xz_for_msvc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-22 17:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-22 17:31:10","2023-09-22 17:31:09","created",1731790698,"I merged xz_for_msvc to master except the tuklib_physmem W2k commits.","",0,0,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",14,"CONTRIBUTOR","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-22 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-22 17:30:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",24,0,"","","","none"
"2023-09-22 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-22 17:21:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-22 17:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-22 17:11:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",24,24,"","","","none"
"2023-09-21 23:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-21 23:59:23","2023-09-21 23:59:22","created",1730509933,"Thanks! Now I realized that I had misidentified the problem. `S_ISREG` is enough but it has to be used with `_fstat64`. With `_stat64`, `con` is a regular file. So the method used for DJGPP is at the wrong location for Windows.

I pushed a commit to xz_for_msvc which should fix it. I tested it with MinGW-w64.

There is another special case in the DJGPP-specific code but I think it's not needed on Windows. It's possible that the output filename is the same as the input filename. On DOS with only 8.3 names it can happen if an overlong name is given on the command line. But it can happen on modern Windows too if 8.3 names are enabled. For example:

```
echo foo | xz > foobar~1zoo
xz --suffix=zoo --decompress --force foobar~1zoo
```

It should fail because it cannot remove `foobar~1` because the file is already open. It's the same file as `foobar~1zoo` due to 8.3 names.
","",0,0,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",13,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 23:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-21 23:45:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-21 22:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-21 22:17:43","2023-09-21 22:17:42","created",1730372350,"https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/get-osfhandle?view=msvc-170
In case that can be helpful, you can get the HANDLE behind a file descriptor with function `_get_osfhandle()`.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",12,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 22:00:00","PullRequestEvent","kiyolee","tukaani-project/xz","2023-09-21 22:12:38","2023-09-21 22:12:37","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

cmake build with MSVC failed as ""getopt.in.h"" included <unistd.h> which does not exist for MSVC.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

cmake build with MSVC succeeded.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","kiyolee",63,"Fix getopt.in.h for MSVC","[]","closed",0,"","[]",3,"NONE","2023-09-21 22:12:37","1970-01-01 00:00:00","0fab2530055175d706095750d315505d1702f3da","[]","[]","fix-getopt-msvc","1e44f477a3e876d2ed19215849ef8b51f0e941bd","master","953e775941a25bfcfa353f802b13e66acb1edf2c",0,1,1,"clean","",0,0,1,2,0,1,"",0,"","",0,0,"","","","none"
"2023-09-21 21:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-21 21:12:38","2023-09-21 21:12:37","created",1730309551,"Thanks again for testing!

I included the unistd.h fix from PR 63 in the xz_for_msvc branch.

With CMake 3.27 and its new default [policy CMP0149](https://cmake.org/cmake/help/latest/policy/CMP0149.html) the xz_for_msvc branch uses the latest Windows SDK by default.

CMakeLists.txt currently requires a C99 compiler:

```
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)
```

If the first line was set to C11 and the second line was omitted then CMake would attempt to find a C11 compiler but would accept older standard too if C11 isn't available. So that would be a way to get C11 mode when using new enough MSVC. But maybe it's not nice if it limits SDK choices.

Since it works now, maybe it's fine to leave it as it is.

About he commit to tuklib_physmem.c that avoids building the pre-W2k code: I suspect that this

```
#if defined(_WIN32_WINNT_WIN2K) && _WIN32_WINNT >= _WIN32_WINNT_WIN2K
```

isn't correct. Now the old code will never be built.

`_WIN32_WINNT` is about exposing newer features from the API headers, it doesn't mean that the program will automatically require that version of Windows. Earlier the builds used `#define _WIN32_WINNT 0x0500` (which is `_WIN32_WINNT_WIN2K`) to make `MEMORYSTATUSEX` visible in the API headers. Those binaries could still run even on Win95 if msvcrt.dll was available because `GlobalMemoryStatusEx` was loaded dynamically.

Maybe at this point it could be best to just omit pre-W2K support from that file. Even when it was written, it was just a fun distraction to check if Windows build of xz could easily run even on Win95 and it did.

The win95 threading option, despite its name, exist for WinXP support. Those APIs just happen to be in Win95 already. The threading APIs from WinVista are closer to pthreads than the older APIs but, as far as I know, there shouldn't be any significant difference in practice in case of liblzma since it needs only a small subset of features. Requiring WinVista would simplify things though but on the other hand the support for the ancient things already exists and works fine.

`GetTickCount64` in mytime.c needs WinVista so MSVC builds of the xz command line tool will need at least WinVista.

`GetFileType` needs a `HANDLE` so one would first need `CreateFile` and so on. It's unfortunate if `_stat64` doesn't return any info in `st_mode` or `st_dev` or other member. I think I won't work on this problem now. If I have understood correctly, it helps slightly that the problem can only occur if using `--suffix` as the default suffixes have a dot and thus if the input file is valid then the output is too since both `con` and `con.xz` are invalid names for regular files.
","",0,0,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",11,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 21:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-21 21:09:58","2023-09-21 21:09:57","created",1730306555,"The getopt.in.h change is in xz_for_msvc branch now. Thanks!","",0,0,"","none","Larhzu",63,"Fix getopt.in.h for MSVC","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-21 21:06:38","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",29,25,"","","","none"
"2023-09-21 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-21 16:21:13","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",21,21,"","","","none"
"2023-09-21 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-21 14:08:20","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_getoptlong_replacement","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-21 13:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2023-09-21 13:37:57","2023-09-21 13:37:57","none",127985918,"It could be worth it to mention the version numbers when this was supported. So this line could read:

MSVC / Visual Studio 2015 and later should be able to build
liblzma (XZ Utils 5.2.0 and later), xzdec, and xz (XZ Utils 5.6.0 and later).

This way someone viewing this file will not be confused when their old release does not build xzdec and xz for MSVC.","windows/INSTALL-MSVC.txt",5,9,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"213bbbd7bab6c8f82cbef294be3d5d2ed3a2903f","",0,0,"","","","none"
"2023-09-19 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-19 12:08:18","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-09-19 11:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-19 11:04:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-19 06:00:00","IssueCommentEvent","TheStoryEnd","tukaani-project/xz","2023-09-19 06:34:20","2023-09-19 06:34:19","created",1724908153,"thanks","",0,0,"","none","TheStoryEnd",61,"Fix for CVE-2020-22916","[]","closed",0,"","[]",5,"NONE","2023-09-18 16:37:27","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-18 19:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-18 19:50:19","2023-09-18 19:50:18","created",1724271696,"> Would you consider renaming ""getopt.in.h"" to ""getopt.h""?

getopt.in.h is done like that in Gnulib. A package that uses Gnulib may have many .in.h files. Which files will be needed is detected when running `configure` and copied to .h name. Gnulib has replacements for many system headers to aid portability. With the .in.h -> .h method only the specificic headers can be overriden.

Obviously XZ Utils only include getopt from Gnulib at the moment. In the early days I didn't know if more modules would be needed. So moving the getopt files to lib/getopt/ and putting that to include path when needed could be fine if we are certain that the module list won't grow. If many Gnulib modules (or similar things from other sources) were needed then this wouldn't work because the include path would grow too long and the modules can have intermodule dependencies too.

I will discuss this with Jia. We plan to update getopt code with the current Gnulib too (it's still LGPLv2.1 so no license changes).

I have seen your other messages. I will get back to them later this week.
","",0,0,"","none","Larhzu",63,"Fix getopt.in.h for MSVC","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-18 16:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-18 16:37:28","2023-09-18 16:37:27","created",1723915860,"The CVE has been marked as disputed so I'm closing this issue.","",0,0,"","none","Larhzu",61,"Fix for CVE-2020-22916","[]","closed",0,"","[]",4,"NONE","2023-09-18 16:37:27","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-18 16:00:00","IssuesEvent","Larhzu","tukaani-project/xz","2023-09-18 16:37:28","2023-09-18 16:37:27","closed",0,"https://nvd.nist.gov/vuln/detail/CVE-2020-22916

This link seems to be inaccessible：https://github.com/snappyJack/CVE-request-XZ-5.2.5-has-denial-of-service-vulnerability

Is there a fix for CVE xz?
[1] If not, what is the repair plan for xz?
[2] If yes, can you indicate which submissions fix CVE-2020-22916?


","",0,0,"","none","TheStoryEnd",61,"Fix for CVE-2020-22916","[]","closed",0,"","[]",4,"NONE","2023-09-18 16:37:27","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-18 01:00:00","WatchEvent","wangwenx190","tukaani-project/xz","2023-09-18 01:57:52","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-16 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-16 15:22:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-09-15 21:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-15 21:20:23","2023-09-15 21:20:22","created",1721876029,"Except a small bug in ""getopt.in.h"" for MSVC (https://github.com/tukaani-project/xz/pull/63), cmake build for MSVC works for all VS2015, VS2017, VS2019 and VS2022.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",8,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-15 21:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-15 21:46:28","2023-09-15 21:46:27","created",1721895849,"As per C11/C17 requirement, as you are already requiring VS2015 or later, that pretty much likes requiring Windows 10 or later.
However, compiling using a specific Windows SDK version does not necessarily limits the Windows version that the output binaries can run on. That's more depending on what Windows APIs you have used. If say no Windows 10 or later only APIs is used, the binaries could likely work on Windows 8 or before. That's what _WIN32_WINNT can help. Define _WIN32_WINNT to the minimum Windows version you want to support, whatever version Windows SDK you use should expose only APIs available for that targeted Windows version.
But I think requiring a specific Windows SDK could be annoying for users only having older VS. There could be reasons that newer version of Windows SDK cannot be installed.
If I am correct, the current cmake build would just use the latest Windows SDK available and that is handy. Especially if you limit _WIN32_WINNT to say Windows 8, that means any Windows 10 SDK should work.
I have not tried though, cmake might have intelligence to sort things out when you require C11/C17. cmake could just complain if the required SDK does not exist.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",9,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-15 21:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-15 21:57:55","2023-09-15 21:57:54","created",1721903717,"https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfiletype
A quick search and I find this Windows API that may help to detect special named files on Windows.
Note: MinGW build can target either msys2 or native-windows. For msys2, special filenames may be less of a problem (inherited cygwin capability). For native-windows, special filenames are indeed problematic.
","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",10,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-15 21:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-15 21:07:55","2023-09-15 21:07:54","created",1721865594,"Would you consider renaming ""getopt.in.h"" to ""getopt.h""?
There is nothing in ""getopt.in.h"" that needs to be generated.
The generated ""getopt.h"" by cmake build is exactly the same as ""getopt.in.h"".","",0,0,"","none","kiyolee",63,"Fix getopt.in.h for MSVC","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-15 21:00:00","PullRequestEvent","kiyolee","tukaani-project/xz","2023-09-15 21:06:09","2023-09-15 21:06:09","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

cmake build with MSVC failed as ""getopt.in.h"" included <unistd.h> which does not exist for MSVC.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

cmake build with MSVC succeeded.

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","kiyolee",63,"Fix getopt.in.h for MSVC","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","fix-getopt-msvc","1e44f477a3e876d2ed19215849ef8b51f0e941bd","master","953e775941a25bfcfa353f802b13e66acb1edf2c",0,0,0,"unknown","",0,1,1,2,0,1,"",0,"","",0,0,"","","","none"
"2023-09-15 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-15 18:07:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,8,"","","","none"
"2023-09-15 17:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-15 17:16:20","2023-09-15 17:16:19","created",1721603163,"The snappyJack repository is available again. It contains a corrupt .lzma file which uses a tiny 256-byte dictionary. So decompression needs very little memory. The reporter claims that decompressing it ""could cause endless output"".

Both XZ Utils and even the long-deprecated LZMA Utils produce 114,881,179 bytes of output from the payload before reporting an error. This is not ""endless output"". The decompression speed is good too.

There is no denial of service or other bug with this file.
","",0,0,"","none","Larhzu",61,"Fix for CVE-2020-22916","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-15 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-15 12:50:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",10,7,"","","","none"
"2023-09-14 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 15:24:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",7,7,"","","","none"
"2023-09-14 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-14 14:53:04","1970-01-01 00:00:00","none",0,"","",0,0,"clmul_disable_asan","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-14 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 14:52:15","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,0,"","","","none"
"2023-09-14 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-14 13:16:23","1970-01-01 00:00:00","none",0,"","",0,0,"clmul_disable_asan","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-14 13:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-14 13:47:56","2023-09-14 13:47:55","created",1719489932,"Thanks!

It's fixed in the master branch now. The problem is that `crc64_clmul` uses 16-byte-aligned reads and this unavoidably trips the address sanitizer. The CI builds used `-fsanitize=address` but ci.yml worked around the problem with `--disable-clmul-crc`. Now there is `__attribute__((__no_sanitize_address__))` so the workaround isn't needed anymore.

After 5.4.x (including the current master branch) you will need `--disable-ifunc` to make `-fsanitize=address` work. This is because `__attribute__((__ifunc(..)))` isn't compatible with address sanitizer. See [this](https://sourceware.org/glibc/wiki/GNU_IFUNC), search for ""asan"". The ifunc code likely won't be included in 5.4.x releases.
","",0,0,"","none","Larhzu",62,"[Bug]: test failure because of a global-buffer-overflow","['bug']","closed",0,"","[]",1,"NONE","2023-09-14 13:43:08","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-14 13:00:00","IssuesEvent","Larhzu","tukaani-project/xz","2023-09-14 13:43:09","2023-09-14 13:43:08","closed",0,"### Describe the bug

Our [Gentoo Tinderbox](https://blogs.gentoo.org/ago/2020/07/04/gentoo-tinderbox/) reported a test failure at [bug 914170](https://bugs.gentoo.org/914170)

By looking at test-suite.log I can see:

```
==1161==ERROR: AddressSanitizer: global-buffer-overflow on address 0x5614ecd418a0 at pc 0x7f8d20216905 bp 0x7ffd6a482040 sp 0x7ffd6a482038
READ of size 16 at 0x5614ecd418a0 thread T0
    #0 0x7f8d20216904 in crc64_clmul /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/src/liblzma/check/crc64_fast.c:284:40
    #1 0x5614ecd2a53c in test_lzma_crc64 /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:106:2
    #2 0x5614ecd2a237 in tuktest_run_test /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/tuktest.h:596:4
    #3 0x5614ecd29cec in main /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:383:2
    #4 0x7f8d1fe23c89  (/lib64/libc.so.6+0x23c89)
    #5 0x7f8d1fe23d44 in __libc_start_main (/lib64/libc.so.6+0x23d44)
    #6 0x5614ecc553f0 in _start (/var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4-abi_x86_64.amd64/tests/.libs/test_check+0x203f0)

0x5614ecd418a0 is located 32 bytes before global variable '.str.42' defined in '/var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:78' (0x5614ecd418c0) of size 51
  '.str.42' is ascii string 'assert_uint: '%s == %lu' but expected '... %s %lu''
0x5614ecd418a9 is located 0 bytes after global variable 'test_string' defined in '/var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:22' (0x5614ecd418a0) of size 9
SUMMARY: AddressSanitizer: global-buffer-overflow /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/src/liblzma/check/crc64_fast.c:284:40 in crc64_clmul
Shadow bytes around the buggy address:
  0x5614ecd41600: 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 05 f9 f9 f9 f9
  0x5614ecd41680: 00 00 00 03 f9 f9 f9 f9 00 00 00 00 00 00 00 04
  0x5614ecd41700: f9 f9 f9 f9 06 f9 f9 f9 06 f9 f9 f9 07 f9 f9 f9
  0x5614ecd41780: 00 07 f9 f9 00 04 f9 f9 00 02 f9 f9 00 00 00 00
  0x5614ecd41800: 00 06 f9 f9 f9 f9 f9 f9 00 00 00 00 00 02 f9 f9
=>0x5614ecd41880: f9 f9 f9 f9[00]01 f9 f9 00 00 00 00 00 00 03 f9
  0x5614ecd41900: f9 f9 f9 f9 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9
  0x5614ecd41980: 03 f9 f9 f9 00 04 f9 f9 00 00 00 00 00 00 07 f9
  0x5614ecd41a00: f9 f9 f9 f9 04 f9 f9 f9 00 00 00 02 f9 f9 f9 f9
  0x5614ecd41a80: 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 00 00 00 00
  0x5614ecd41b00: 00 00 07 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1161==ABORTING
```

I didn't look deeply into this issue so I don't know if the bug is in the unittest itself or in the involed libraries/daemons, if so please check for any security implications. I'm not doing a private report since it is already public on gentoo bugzilla.
If I can do further, please let me know.

### Version

5.4.4

### Operating System

Gentoo

### Relevant log output

_No response_","",0,0,"","none","asarubbo",62,"[Bug]: test failure because of a global-buffer-overflow","['bug']","closed",0,"","[]",0,"NONE","2023-09-14 13:43:08","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-14 13:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-14 13:43:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-09-14 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 13:44:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clmul_disable_asan","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,1,"","","","none"
"2023-09-14 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-14 13:40:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/clmul_disable_asan","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-14 07:00:00","IssuesEvent","asarubbo","tukaani-project/xz","2023-09-14 07:48:05","2023-09-14 07:48:04","opened",0,"### Describe the bug

Our [Gentoo Tinderbox](https://blogs.gentoo.org/ago/2020/07/04/gentoo-tinderbox/) reported a test failure at [bug 914170](https://bugs.gentoo.org/914170)

By looking at test-suite.log I can see:

```
==1161==ERROR: AddressSanitizer: global-buffer-overflow on address 0x5614ecd418a0 at pc 0x7f8d20216905 bp 0x7ffd6a482040 sp 0x7ffd6a482038
READ of size 16 at 0x5614ecd418a0 thread T0
    #0 0x7f8d20216904 in crc64_clmul /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/src/liblzma/check/crc64_fast.c:284:40
    #1 0x5614ecd2a53c in test_lzma_crc64 /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:106:2
    #2 0x5614ecd2a237 in tuktest_run_test /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/tuktest.h:596:4
    #3 0x5614ecd29cec in main /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:383:2
    #4 0x7f8d1fe23c89  (/lib64/libc.so.6+0x23c89)
    #5 0x7f8d1fe23d44 in __libc_start_main (/lib64/libc.so.6+0x23d44)
    #6 0x5614ecc553f0 in _start (/var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4-abi_x86_64.amd64/tests/.libs/test_check+0x203f0)

0x5614ecd418a0 is located 32 bytes before global variable '.str.42' defined in '/var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:78' (0x5614ecd418c0) of size 51
  '.str.42' is ascii string 'assert_uint: '%s == %lu' but expected '... %s %lu''
0x5614ecd418a9 is located 0 bytes after global variable 'test_string' defined in '/var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/tests/test_check.c:22' (0x5614ecd418a0) of size 9
SUMMARY: AddressSanitizer: global-buffer-overflow /var/tmp/portage/app-arch/xz-utils-5.4.4/work/xz-5.4.4/src/liblzma/check/crc64_fast.c:284:40 in crc64_clmul
Shadow bytes around the buggy address:
  0x5614ecd41600: 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 05 f9 f9 f9 f9
  0x5614ecd41680: 00 00 00 03 f9 f9 f9 f9 00 00 00 00 00 00 00 04
  0x5614ecd41700: f9 f9 f9 f9 06 f9 f9 f9 06 f9 f9 f9 07 f9 f9 f9
  0x5614ecd41780: 00 07 f9 f9 00 04 f9 f9 00 02 f9 f9 00 00 00 00
  0x5614ecd41800: 00 06 f9 f9 f9 f9 f9 f9 00 00 00 00 00 02 f9 f9
=>0x5614ecd41880: f9 f9 f9 f9[00]01 f9 f9 00 00 00 00 00 00 03 f9
  0x5614ecd41900: f9 f9 f9 f9 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9
  0x5614ecd41980: 03 f9 f9 f9 00 04 f9 f9 00 00 00 00 00 00 07 f9
  0x5614ecd41a00: f9 f9 f9 f9 04 f9 f9 f9 00 00 00 02 f9 f9 f9 f9
  0x5614ecd41a80: 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9 00 00 00 00
  0x5614ecd41b00: 00 00 07 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==1161==ABORTING
```

I didn't look deeply into this issue so I don't know if the bug is in the unittest itself or in the involed libraries/daemons, if so please check for any security implications. I'm not doing a private report since it is already public on gentoo bugzilla.
If I can do further, please let me know.

### Version

5.4.4

### Operating System

Gentoo

### Relevant log output

_No response_","",0,0,"","none","asarubbo",62,"[Bug]: test failure because of a global-buffer-overflow","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-13 18:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-13 18:13:22","2023-09-13 18:13:21","created",1718097831,"Thanks for testing! There are more commits in `xz_for_msvc` now, including CMake support. It would be awesome if you could test it with MSVC again. If you don't have time etc. then feel free to say so or ignore this. :-)

I think xzdec should build now with VS2013. xz is set to require VS2015 (_MSC_VER >= 1900, that is, MSVC_VERSION >= 1900 in CMake). I don't know if a more recent VS version should be recommended in the docs, like, if there are compatibility fixes that matter.

`_Noreturn` needs `/std:c11` or `/std:c17`. CMake likely doesn't set it because CMakeLists.txt only requires a C99 compiler. There is `__declspec(noreturn)` too for this case.

I wonder if C11/C17 mode would be preferred for other reasons, for example, if standards conformance would be stricter and thus risk of weird bugs would be lower. [Microsoft docs](https://learn.microsoft.com/en-us/cpp/overview/install-c17-support?view=msvc-170) say that C11/C17 needs an updated Windows SDK and UCRT though. I don't have much clue about these. Would using C11/C17 mode affect how old Windows versions can run the resulting binaries?

About `con` and friends. At least with MinGW-w64 builds it seems to be a problem (possibly a security issue). `xz -d -S_xz con_xz` decompresses to console even though `open` is used with `O_EXCL`. I'm not sure how to fix. I would expect Windows to have an API to check for problematic filenames instead of apps needing to roll their own checking code. The code used with DJGPP isn't compatible with anything else.
","",0,0,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",7,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-13 18:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-13 18:11:26","2023-09-13 18:11:25","created",1718095305,"There's now a little more information in the NVD. The [entry in Debian](https://security-tracker.debian.org/tracker/CVE-2020-22916) is somewhat informative:

> Bogus CVE, original URL is gone and resource limits are a natural constraint for any unpacker

That makes me wonder if it could have been a file which uses a 4 GiB LZMA2 dictionary and thus needs lots of RAM even in single-threaded mode. xz has had memory usage limiting options for such files since the first stable version because high memory usage could be a denial of service. Strict limits (which would make xz refuse to decompress) aren't enabled by default because of the strong feedback I got before 5.0.0 was released: a too low limit can also result in a denial of service. The [Memory usage](https://tukaani.org/xz/man/xz.1.html#DESCRIPTION:_Memory_usage) section on the xz man page has been there since 5.0.0 too.

This was just a guess; the CVE could be about something else, of course. With the information I currently have, I consider this CVE to be incorrect (not a bug or a security issue).
","",0,0,"","none","Larhzu",61,"Fix for CVE-2020-22916","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-13 15:38:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",9,7,"","","","none"
"2023-09-12 22:00:00","WatchEvent","leleliu008","tukaani-project/xz","2023-09-12 22:07:19","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 20:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-12 20:54:12","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",24,22,"","","","none"
"2023-09-12 18:00:00","ForkEvent","chemfiles","tukaani-project/xz","2023-09-12 18:33:55","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 18:00:00","ForkEvent","cs558i","tukaani-project/xz","2023-09-12 18:45:44","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-09-12 14:51:44","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_clock_monotonic_bugfix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:50:30","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:38:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:21:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:17:41","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 14:15:52","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/cmake_clock_monotonic_bugfix","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-12 13:59:54","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_clock_monotonic_bugfix","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-12 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-12 12:17:29","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-09-12 10:00:00","WatchEvent","raffaem","tukaani-project/xz","2023-09-12 10:39:46","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-11 20:00:00","WatchEvent","cityofships","tukaani-project/xz","2023-09-11 20:33:39","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-11 20:00:00","WatchEvent","jenglander","tukaani-project/xz","2023-09-11 20:25:57","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-11 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-11 16:08:40","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-09-10 16:00:00","WatchEvent","Yuri-MY","tukaani-project/xz","2023-09-10 16:43:55","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-08 21:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-08 21:16:51","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",5,5,"","","","none"
"2023-09-08 17:00:00","ForkEvent","cai880210","tukaani-project/xz","2023-09-08 17:53:25","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-08 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-09-08 16:18:03","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/xz_for_msvc","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-09-08 15:00:00","WatchEvent","charleszu","tukaani-project/xz","2023-09-08 15:11:00","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-08 13:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-08 13:42:00","1970-01-01 00:00:00","none",0,"","",0,0,"riscv_filter","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz-embedded","2023-09-08 13:39:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-09-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-09-08 13:44:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/riscv_filter","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",15,6,"","","","none"
"2023-09-08 01:00:00","WatchEvent","ranjanashish","tukaani-project/xz-java","2023-09-08 01:44:03","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-06 20:00:00","ForkEvent","keysight-eggplant","tukaani-project/xz","2023-09-06 20:58:48","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-06 09:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-06 09:10:47","2023-09-06 09:10:46","created",1707965409,"All sounds good and reasonable.
You branch does build and work.
I guess I can close this PR.
P.S. I think you are right that Windows build would need to handle those legacy DOS special filenames like `con`, `prn`, `com1`, etc.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",6,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-06 09:00:00","PullRequestEvent","kiyolee","tukaani-project/xz","2023-09-06 09:10:48","2023-09-06 09:10:47","closed",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","closed",0,"","[]",6,"NONE","2023-09-06 09:10:46","1970-01-01 00:00:00","32457da82fc4f20747051eee8e3d3b62f8528a2a","[]","[]","xz-win-build","01c70ff2e37791185d21382f16228c43f838f1ba","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,1,0,"clean","",20,0,12,139,16,13,"",0,"","",0,0,"","","","none"
"2023-09-05 20:00:00","CreateEvent","Larhzu","tukaani-project/xz","2023-09-05 20:35:37","1970-01-01 00:00:00","none",0,"","",0,0,"xz_for_msvc","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-05 20:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-09-05 20:37:58","2023-09-05 20:37:57","created",1707277854,"Thanks for the updates!

Based on this PR I created a branch `xz_for_msvc`. I put some of the commits in your name even though they were modified a little. If you prefer otherwise please let me know.

Unless I missed something, `xz_for_msvc` should have everything from this PR except `__declspec(noreturn)` and the VS2013 fallback for `snprintf`.

I feel the noreturn could be handled in a more generic way. `noreturn` from `<stdnoreturn.h>` could be ideal. According to docs, it seems to be supported by VS2015 too. It's currently not used in XZ Utils, only the GNU C `__attribute__((__noreturn__))` is, but this could be changed.

Unless there is a good reason, I feel VS2013 support shouldn't be added to the command line tools to keep the MSVC patches as simple as easily possible. By the time this code is in a stable XZ Utils release, VS2013 will only have 5-7 months of support remaining (if April 2024 is the true end date for VS2013 support).

The changes to file_io.* I made quite differently and it's quite possible that my approach cannot work. It would be great if you could test it and tell if it works or can be made to work. Otherwise I will adapt your version from this PR.

DOS/DJGPP build checks for special filenames like `prn` in file_io.c which could happen in weird cases like `xz -S_xz -d prn_xz`. I wonder if something like that should be done on Windows builds too (not just MSVC).","",0,0,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",5,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-05 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-09-05 12:10:50","1970-01-01 00:00:00","none",0,"","",0,0,"cmake_getoptlong_replacement","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-04 06:00:00","ForkEvent","wook2013","tukaani-project/xz","2023-09-04 06:22:38","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-04 06:00:00","WatchEvent","wook2013","tukaani-project/xz","2023-09-04 06:22:32","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-04 06:00:00","WatchEvent","wook2014","tukaani-project/xz","2023-09-04 06:22:22","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-01 22:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 22:53:06","2023-09-01 22:53:05","created",1703410537,"Added a commit to fix build break in suffix.c when NOT using MSVC.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-09-01 13:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 13:02:07","2023-09-01 13:02:07","created",1312999239,"Fixed in a new commit. `pragma warning` has been removed.","src/xz/util.c",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -142,6 +146,13 @@ round_up_to_mib(uint64_t n)
 }
 
 
+#ifdef _MSC_VER
+#pragma warning(push)
+#pragma warning(disable: 4474) // 'snprintf' : too many arguments passed for format string",17,"4224319a29125a1b2db1c6dc1d22ff3766d614da","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-09-01 13:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 13:01:25","2023-09-01 13:01:25","created",1312998547,"Fixed in a new commit.
Added a function `msvc_snprintf()` to emulate C99 `snprintf()` with `_snprintf()`.
This can be removed when VS2013 support is dropped.","src/xz/private.h",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -75,3 +89,7 @@
 #ifdef HAVE_DECODERS
 #	include ""list.h""
 #endif
+
+#if defined(_MSC_VER) && _MSC_VER < 1900",44,"4224319a29125a1b2db1c6dc1d22ff3766d614da","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-09-01 13:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 13:02:08","2023-09-01 13:02:07","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 13:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 13:01:26","2023-09-01 13:01:25","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 12:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:56","2023-09-01 12:58:56","created",1312995868,"Fixed in a new commit.","src/xz/private.h",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -21,7 +21,9 @@
 #include <signal.h>
 #include <locale.h>
 #include <stdio.h>
+#ifndef _WIN32",4,"4224319a29125a1b2db1c6dc1d22ff3766d614da","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-09-01 12:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 12:59:26","2023-09-01 12:59:26","created",1312996355,"Fixed in a new commit. Simply use `GetTickCount64()` now.","src/xz/mytime.c",4,15,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,7 +12,7 @@
 
 #include ""private.h""
 
-#ifdef HAVE_CLOCK_GETTIME",4,"4224319a29125a1b2db1c6dc1d22ff3766d614da","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-09-01 12:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 12:59:46","2023-09-01 12:59:46","created",1312996659,"Fixed in a new commit.","src/xz/private.h",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -34,16 +36,28 @@
 #endif
 
 #ifndef STDIN_FILENO
+#ifdef _MSC_VER
+#	define STDIN_FILENO (_fileno(stdin))",15,"4224319a29125a1b2db1c6dc1d22ff3766d614da","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-09-01 12:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:45","2023-09-01 12:58:45","created",1312995686,"Fixed in a new commit.","lib/getopt.c",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -29,7 +29,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifndef _WIN32",4,"4224319a29125a1b2db1c6dc1d22ff3766d614da","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-09-01 12:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:06","2023-09-01 12:58:06","created",1312995048,"Fixed in a new commit. Removed macro `SSIZE_MAX`.","src/xz/file_io.c",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -39,6 +39,30 @@ static bool warn_fchown;
 
 #include ""tuklib_open_stdxxx.h""
 
+#ifdef _MSC_VER
+#define close	_close
+#if _MSC_VER >= 1500
+#define lseek	_lseeki64
+#else
+#define lseek	_lseek
+#endif
+#define open	_open
+#define read	_read
+#define setmode	_setmode
+#define unlink	_unlink
+#define write	_write
+#define S_ISDIR(m)	(((m) & _S_IFMT) == _S_IFDIR)
+#define S_ISREG(m)	(((m) & _S_IFMT) == _S_IFREG)
+#endif
+
+#ifndef SSIZE_MAX",20,"4224319a29125a1b2db1c6dc1d22ff3766d614da","ee009e6e85f31d8f0d7690b1282cb0412704cd35",0,0,"","","","none"
"2023-09-01 12:00:00","PullRequestReviewCommentEvent","kiyolee","tukaani-project/xz","2023-09-01 12:56:24","2023-09-01 12:56:25","created",1312993241,"Fixed in a new commit. Removed typedef `mode_t` and simply use `int` instead.","src/xz/file_io.c",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -933,7 +957,11 @@ io_open_dest_real(file_pair *pair)
 #ifndef TUKLIB_DOSLIKE
 		flags |= O_NONBLOCK;
 #endif
+#ifdef _MSC_VER
+		const mode_t mode = _S_IREAD | _S_IWRITE;",54,"4224319a29125a1b2db1c6dc1d22ff3766d614da","ee009e6e85f31d8f0d7690b1282cb0412704cd35",0,0,"","","","none"
"2023-09-01 12:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 12:59:47","2023-09-01 12:59:46","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 12:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 12:59:27","2023-09-01 12:59:26","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 12:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:57","2023-09-01 12:58:56","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 12:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:46","2023-09-01 12:58:45","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 12:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:30","2023-09-01 12:58:29","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 12:00:00","PullRequestReviewEvent","kiyolee","tukaani-project/xz","2023-09-01 12:58:07","2023-09-01 12:58:06","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","d734eb6aecc88a086761c6086bbad968bfd6b4c9","[]","[]","xz-win-build","4224319a29125a1b2db1c6dc1d22ff3766d614da","master","eccf12866527b8d24c7d7f92f755142be8ef9b11",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-09-01 01:00:00","WatchEvent","PolidoroFederico2am","tukaani-project/xz","2023-09-01 01:58:37","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-31 16:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 16:51:34","2023-08-31 16:51:34","created",1311924159,"I changed the code in the master branch so that these pragmas shouldn't be needed anymore.","src/xz/util.c",17,151,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -142,6 +146,13 @@ round_up_to_mib(uint64_t n)
 }
 
 
+#ifdef _MSC_VER
+#pragma warning(push)
+#pragma warning(disable: 4474) // 'snprintf' : too many arguments passed for format string",17,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-08-31 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-08-31 16:50:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-31 16:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 16:51:35","2023-08-31 16:51:34","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:53:41","2023-08-31 15:53:42","created",1311847441,"This is needed only if VS2013 support is really wanted. `_snprintf` doesn't conform to C99 while `snprintf` in VS2015 should conform. So there is a minor risk to use `_snprintf`.","src/xz/private.h",44,93,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -75,3 +89,7 @@
 #ifdef HAVE_DECODERS
 #	include ""list.h""
 #endif
+
+#if defined(_MSC_VER) && _MSC_VER < 1900",44,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:48:32","2023-08-31 15:48:33","created",1311841270,"I suggest using `#define fileno _fileno` like in xzdec.c to avoid repetition.","src/xz/private.h",15,40,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -34,16 +36,28 @@
 #endif
 
 #ifndef STDIN_FILENO
+#ifdef _MSC_VER
+#	define STDIN_FILENO (_fileno(stdin))",15,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:46:20","2023-08-31 15:46:21","created",1311838606,"`mytime_now()` doesn't need to be super precise and it doesn't need to be relative to any known point in time. Unless I'm missing something, `return GetTickCount64();` should be all that is needed to implement `mytime_now()`. The only downside is that it's not available on ancient Windows versions but at some point pre-Vista support likely could be removed anyway to simplify the code a little.","src/xz/mytime.c",4,15,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -12,7 +12,7 @@
 
 #include ""private.h""
 
-#ifdef HAVE_CLOCK_GETTIME",4,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:39:01","2023-08-31 15:39:01","created",1311829147,"Cygwin and also MinGW-w64 have `unistd.h` so this should be `#ifdef _MSC_VER`.","lib/getopt.c",4,32,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -29,7 +29,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#ifndef _WIN32",4,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","cbba399e8581f1e38d31bf3f2b886e2e20d976dc",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:37:14","2023-08-31 15:37:15","created",1311827013,"VS older than 2013 update 2 cannot build anything from XZ Utils so this `#if` isn't needed. In practice maybe even VS2013 isn't worth worrying as it will go out of support in April 2024.","src/xz/file_io.c",6,44,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -39,6 +39,30 @@ static bool warn_fchown;
 
 #include ""tuklib_open_stdxxx.h""
 
+#ifdef _MSC_VER
+#define close	_close
+#if _MSC_VER >= 1500",6,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","ee009e6e85f31d8f0d7690b1282cb0412704cd35",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:32:24","2023-08-31 15:32:24","created",1311821279,"`SSIZE_MAX` isn't needed anymore after the change in the master branch.","src/xz/file_io.c",20,58,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -39,6 +39,30 @@ static bool warn_fchown;
 
 #include ""tuklib_open_stdxxx.h""
 
+#ifdef _MSC_VER
+#define close	_close
+#if _MSC_VER >= 1500
+#define lseek	_lseeki64
+#else
+#define lseek	_lseek
+#endif
+#define open	_open
+#define read	_read
+#define setmode	_setmode
+#define unlink	_unlink
+#define write	_write
+#define S_ISDIR(m)	(((m) & _S_IFMT) == _S_IFDIR)
+#define S_ISREG(m)	(((m) & _S_IFMT) == _S_IFREG)
+#endif
+
+#ifndef SSIZE_MAX",20,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","ee009e6e85f31d8f0d7690b1282cb0412704cd35",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:31:07","2023-08-31 15:31:08","created",1311819580,"I changed these assertions to use `IO_BUFFER_SIZE`. Then the changes to `io_read` and `io_write_buf` to limit to `UINT32_MAX` shouldn't be needed either.","src/xz/file_io.c",75,1189,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -1158,13 +1186,20 @@ extern size_t
 io_read(file_pair *pair, io_buf *buf, size_t size)
 {
 	// We use small buffers here.
-	assert(size < SSIZE_MAX);
+	assert(size < (size_t)SSIZE_MAX);",75,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","ee009e6e85f31d8f0d7690b1282cb0412704cd35",0,0,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewCommentEvent","Larhzu","tukaani-project/xz","2023-08-31 15:28:55","2023-08-31 15:28:55","created",1311816823,"Perhaps it's fine to use plain `int` here as that is what `_open` needs. Then there is no need to `typedef int mode_t` at all. The only other `mode_t` occurrence isn't used on Windows.","src/xz/file_io.c",54,961,"","none","Larhzu",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"@@ -933,7 +957,11 @@ io_open_dest_real(file_pair *pair)
 #ifndef TUKLIB_DOSLIKE
 		flags |= O_NONBLOCK;
 #endif
+#ifdef _MSC_VER
+		const mode_t mode = _S_IREAD | _S_IWRITE;",54,"cbba399e8581f1e38d31bf3f2b886e2e20d976dc","ee009e6e85f31d8f0d7690b1282cb0412704cd35",0,0,"","","","none"
"2023-08-31 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-08-31 15:14:58","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-31 15:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 15:48:33","2023-08-31 15:48:33","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 15:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 15:46:21","2023-08-31 15:46:21","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 15:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 15:39:02","2023-08-31 15:39:01","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 15:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 15:37:15","2023-08-31 15:37:15","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 15:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 15:31:08","2023-08-31 15:31:08","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 15:00:00","PullRequestReviewEvent","Larhzu","tukaani-project/xz","2023-08-31 15:28:56","2023-08-31 15:28:55","created",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit (target x64) or 32-bit (target Win32) at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.


## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github.com/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"MEMBER","1970-01-01 00:00:00","1970-01-01 00:00:00","734dde3af15d05450c7965ceb209cb6cd908df5f","[]","[]","xz-win-build","cbba399e8581f1e38d31bf3f2b886e2e20d976dc","master","74c3449d8b816a724b12ebce7417e00fb597309a",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","commented"
"2023-08-31 11:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-08-31 11:28:26","2023-08-31 11:28:25","created",1700862676,"Added all the changes that I have made to build xz/xzdec with MSVC.
Mostly for your reference.
All code are in public domain (following the original license), please feel free to take anything if they fit.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-31 06:00:00","IssueCommentEvent","kiyolee","tukaani-project/xz","2023-08-31 06:46:23","2023-08-31 06:46:22","created",1700457636,"I happen to have a fix for mytime.c too in my own repo. Already forgot about that.
see: https://github.com/kiyolee/xz-win-build/blob/main/src/xz/mytime.c
Would you want a PR for that?
I totally understand the preference of cmake. My way of building things with VS is rather personal and I wouldn't submit that at all as PR.
The purpose of my PR is only for when you get to build things on Windows, the code is readily buildable, through whatever build system that you prefer.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-30 15:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-08-30 15:30:43","2023-08-30 15:30:42","created",1699400056,"Hello!

Thank your for the PR. I have been wanting to add MSVC support to xz but have not had the time yet. Unfortunately this cannot be accepted in its current state because many things are preventing this from building with MSVC.

First, there are no build system changes. We are moving away from supporting the Visual Studio Solution Files starting with the upcoming 5.6.0 release planned for the end of this year. Instead we would like our Windows users to use CMake instead to generate the Visual Studio files.

Second, there are functions that I don't think Visual Studio default C libraries support. Specifically the functions in mytime.c would still need to be ported for this to compile.

I did not try to build this yet since the build system changes were not made. I did not review closely yet the changes that were made to alias functions and structs in file_io.* so I cannot comment one way or another on those.

I don't mean to discourage your efforts on this. I do want xz to build with MSVC eventually but it should be done small stages. The first stage I would start with is by adding CMake support for getopt_long() replacement. The Autotools build has support for this and the replacement files are in /lib. The next stage could be porting the file_io functions, perhaps what you have already works for that. Then maybe the mytime.c functions. Eventually, we can remove the ""NOT MSVC"" check for CMake building the xz target in CMakeLists.txt when we are confident things are working well.","",0,0,"","none","JiaT75",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-29 14:00:00","WatchEvent","rschwietzke","tukaani-project/xz-java","2023-08-29 14:02:40","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-29 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-08-29 12:21:13","2023-08-29 12:21:13","created",1697337999,"Hello!

This CVE was never reported to us, so we do not have any further information about it. So at this moment we cannot say which versions of XZ Utils this effects or if it was unknowingly patched by a change made after 5.2.5.

If you or anyone else has additional information about this CVE please share it over email or through a [GitHub security advisory](https://github.com/tukaani-project/xz/security/advisories). For more information please see [our Security Policy](https://github.com/tukaani-project/xz/blob/master/.github/SECURITY.md).

Thanks for bringing this to our attention.","",0,0,"","none","JiaT75",61,"Fix for CVE-2020-22916","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-29 08:00:00","IssuesEvent","TheStoryEnd","tukaani-project/xz","2023-08-29 08:45:11","2023-08-29 08:45:10","opened",0,"https://nvd.nist.gov/vuln/detail/CVE-2020-22916

This link seems to be inaccessible：https://github.com/snappyJack/CVE-request-XZ-5.2.5-has-denial-of-service-vulnerability

Can you indicate which submissions fix CVE-2020-22916?

","",0,0,"","none","TheStoryEnd",61,"Fix for CVE-2020-22916","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-28 15:17:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",6,6,"","","","none"
"2023-08-28 14:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-08-28 14:15:24","1970-01-01 00:00:00","none",0,"","",0,0,"index_file_size_bug","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-27 04:00:00","WatchEvent","ttttangl","tukaani-project/xz","2023-08-27 04:27:38","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-26 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-26 13:29:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-26 06:00:00","WatchEvent","agmtopy","tukaani-project/xz-java","2023-08-26 06:41:41","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-26 00:00:00","PullRequestEvent","kiyolee","tukaani-project/xz","2023-08-26 00:21:41","2023-08-26 00:21:40","opened",0,"To support files larger than 4 GiB on Windows, all calls of stat() and lseek() have to be redirected to 64-bit filesize capable calls.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass

Note: Compile warnings are inevitable for MSVC when some variables can be either 64-bit and 32-bit at compile time. Those warnings need extensive changes to clean up.

## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [X] Other (please describe): 

Make xz buildable with MSVC.
Add 64-bit filesize support on Windows.

## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->

xz does not build with MSVC.
xz would refuse to handle files larger than 4 GiB.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

xz can be built with MSVC.
xz can handle files larger than 4 GiB on Windows.

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->

I have added extensive MSVC build support in my own repo https://github/kiyolee/xz-win-build.
In addition to building xz, I have added support to build all tests as well.
This PR only covers code changes that were done while setting up my own repo.","",0,0,"","none","kiyolee",60,"Make xz buildable with MSVC and add 64-bit filesize support","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","xz-win-build","effdc8d37a1e653b77fac8a81cc65bfe09256289","master","2b871f4dbffe3801d0da3f89806b5935f758d5f3",0,0,0,"unknown","",0,1,1,79,14,3,"",0,"","",0,0,"","","","none"
"2023-08-25 23:00:00","ForkEvent","kiyolee","tukaani-project/xz","2023-08-25 23:37:57","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-21 09:00:00","WatchEvent","Radeon64","tukaani-project/xz","2023-08-21 09:47:12","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-18 10:00:00","WatchEvent","neoneye","tukaani-project/xz","2023-08-18 10:01:40","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-16 09:00:00","ForkEvent","saminigod","tukaani-project/xz","2023-08-16 09:16:47","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-16 09:00:00","WatchEvent","saminigod","tukaani-project/xz","2023-08-16 09:16:39","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-15 07:00:00","WatchEvent","AlexeyRemenyak","tukaani-project/xz","2023-08-15 07:05:07","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-14 12:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-08-14 12:49:16","1970-01-01 00:00:00","none",0,"","",0,0,"win95_small_constructor","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-14 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-14 12:47:49","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-08-14 03:00:00","WatchEvent","chawyehsu","tukaani-project/xz","2023-08-14 03:34:53","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-14 00:00:00","WatchEvent","npkasenides","tukaani-project/xz","2023-08-14 00:11:31","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-12 21:00:00","WatchEvent","eblanca","tukaani-project/xz","2023-08-12 21:31:00","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-10 09:00:00","WatchEvent","rtzll","tukaani-project/xz","2023-08-10 09:50:14","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-09 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-08-09 12:58:39","1970-01-01 00:00:00","none",0,"","",0,0,"win95_small_constructor","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-08 18:00:00","WatchEvent","bowbahdoe","tukaani-project/xz-java","2023-08-08 18:03:08","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-08 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-08-08 12:10:40","2023-08-08 12:10:40","created",1669493212,"@Jamaika1 Thanks for the PR! Looks like this typo had been in the code for some time, so your fix is very appreciated.

If you would like your name to appear in the `THANKS` file, I will need the name you wish to appear there since I could not find it on your profile. If you wish to stay anonymous that is ok too :)","",0,0,"","none","JiaT75",59,"Fix error mythread.h","[]","closed",0,"","[]",1,"CONTRIBUTOR","2023-08-08 12:08:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-08 12:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-08-08 12:08:01","2023-08-08 12:08:00","closed",0,"```
mythread.h:381:48: error: 'once' undeclared (first use in this function); did you mean 'once_'?
  381 |                         if (!InitOnceComplete(&once, 0, NULL)) \
      |                                                ^~~~
crc64_small.c:47:9: note: in expansion of macro 'mythread_once'
   47 |         mythread_once(crc64_init);
      |         ^~~~~~~~~~~~~
```

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","Jamaika1",59,"Fix error mythread.h","[]","closed",0,"","[]",0,"NONE","2023-08-08 12:08:00","2023-08-08 12:08:00","6bf33b704cd31dccf25e68480464aa22d3fcad5a","[]","[]","master-1","ba0315406a57514aa54d4847073300db91220594","master","80cb961e5380a3878246d41341ff91378ca59e05",1,0,0,"unknown","JiaT75",0,0,1,1,1,1,"",0,"","",0,0,"","","","none"
"2023-08-08 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-08 12:08:01","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-06 07:00:00","ForkEvent","Jamaika1","tukaani-project/xz","2023-08-06 07:02:43","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-06 07:00:00","PullRequestEvent","Jamaika1","tukaani-project/xz","2023-08-06 07:04:39","2023-08-06 07:04:38","opened",0,"```
mythread.h:381:48: error: 'once' undeclared (first use in this function); did you mean 'once_'?
  381 |                         if (!InitOnceComplete(&once, 0, NULL)) \
      |                                                ^~~~
crc64_small.c:47:9: note: in expansion of macro 'mythread_once'
   47 |         mythread_once(crc64_init);
      |         ^~~~~~~~~~~~~
```

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [ ] Build was run locally and without warnings or errors
- [ ] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->


<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

-
-
-

## Does this introduce a breaking change?

- [ ] Yes
- [ ] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","Jamaika1",59,"Fix error mythread.h","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","master-1","ba0315406a57514aa54d4847073300db91220594","master","80cb961e5380a3878246d41341ff91378ca59e05",0,0,0,"unknown","",0,1,1,1,1,1,"",0,"","",0,0,"","","","none"
"2023-08-05 23:00:00","IssuesEvent","prgm767","tukaani-project/xz-java","2023-08-05 23:08:29","2023-08-05 23:08:28","opened",0,"### Describe the Feature

The scaffolding is already there, but it looks like it it not implemented. 
```
Exception in thread ""main"" java.lang.IllegalArgumentException: XZ doesn't support a preset dictionary for now
```

Could it be?


### Expected Complications

_No response_

### Will I try to implement this new feature?

No","",0,0,"","none","prgm767",5,"[Feature Request]: Support preset dictionary.","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-05 11:00:00","WatchEvent","pmqs","tukaani-project/xz","2023-08-05 11:27:30","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-05 09:00:00","WatchEvent","markusheimerl","tukaani-project/xz","2023-08-05 09:47:51","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-04 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-04 15:25:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-03 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-03 12:46:28","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-08-02 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-08-02 15:24:48","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-02 13:00:00","ReleaseEvent","JiaT75","tukaani-project/xz","2023-08-02 13:03:14","1970-01-01 00:00:00","published",0,"The Doxygen-generated liblzma API documentation is available at
<https://tukaani.org/xz/liblzma-api/files.html>.

Here is an extract from the NEWS file:

```
5.4.4 (2023-08-02)

    * liblzma and xzdec can now build against WASI SDK when threading
      support is disabled. xz and tests don't build yet.

    * CMake:

        - Fixed a bug preventing other projects from including liblzma
          multiple times using find_package().

        - Don't create broken symlinks in Cygwin and MSYS2 unless
          supported by the environment. This prevented building for the
          default MSYS2 environment. The problem was introduced in
          xz 5.4.0.

    * Documentation:

        - Small improvements to man pages.

        - Small improvements and typo fixes for liblzma API
          documentation.

    * Tests:

        - Added a new section to INSTALL to describe basic test usage
          and address recent questions about building the tests when
          cross compiling.

        - Small fixes and improvements to the tests.

    * Translations:

        - Fixed a mistake that caused one of the error messages to not
          be translated. This only affected versions 5.4.2 and 5.4.3.

        - Updated the Chinese (simplified), Croatian, Esperanto, German,
          Korean, Polish, Romanian, Spanish, Swedish, Ukrainian, and
          Vietnamese translations.

        - Updated the German, Korean, Romanian, and Ukrainian man page
          translations.
```
","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","v5.4.4","XZ Utils 5.4.4 Stable","none"
"2023-08-02 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-02 12:44:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-01 17:00:00","IssueCommentEvent","DimitriPapadopoulos","tukaani-project/xz","2023-08-01 17:36:04","2023-08-01 17:36:03","created",1660795011,"You're welcom. A manual step might be preferable to start with, as there are often false positives, and of course false negatives. You can install codespell using `pip install codespell` and run it locally. Create a `.codespellrc` file if you need specific configuration.

Once you are accustomed to it, you may try the [GitHub action](https://github.com/codespell-project/actions-codespell).","",0,0,"","none","DimitriPapadopoulos",58,"Fix typos found by codespell","[]","closed",0,"","[]",2,"CONTRIBUTOR","2023-07-31 12:02:21","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-08-01 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-08-01 16:11:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-01 16:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-08-01 16:11:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-01 15:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-08-01 15:26:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-08-01 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-08-01 14:45:36","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-08-01 10:00:00","WatchEvent","lai-kevin-lai","tukaani-project/xz","2023-08-01 10:50:41","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-31 14:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-31 14:36:33","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-31 12:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-31 12:01:38","2023-07-31 12:01:38","created",1658235632,"Thanks for the typo fixes! Maybe we should include codespell as part of the CI pipeline or a local git hook. Or even a manual step for myself before pushing...","",0,0,"","none","JiaT75",58,"Fix typos found by codespell","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-31 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-31 12:02:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-29 11:00:00","ForkEvent","DimitriPapadopoulos","tukaani-project/xz","2023-07-29 11:11:12","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-29 11:00:00","PullRequestEvent","DimitriPapadopoulos","tukaani-project/xz","2023-07-29 11:18:46","2023-07-29 11:18:45","opened",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [ ] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [x] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?

Typos.

## What is the new behavior?

Fixed typos.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","DimitriPapadopoulos",58,"Fix typos found by codespell","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","codespell","129eadbef011f653dea16853658d3766c907373e","master","01cbb7f023ee7fda8ddde04bd17cf7d3c2418706",0,0,0,"unknown","",0,1,1,29,29,18,"",0,"","",0,0,"","","","none"
"2023-07-28 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-28 15:51:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",8,0,"","","","none"
"2023-07-28 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-28 14:21:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-28 09:00:00","ForkEvent","lidaobing","tukaani-project/xz","2023-07-28 09:53:08","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-27 13:00:00","IssueCommentEvent","ChanTsune","tukaani-project/xz","2023-07-27 13:40:30","2023-07-27 13:40:29","created",1653651980,"Thank you for your kind review!

I am honored to contribute to your project!","",0,0,"","none","ChanTsune",57,"Support build target `wasm32-unknown-unknown` in clang when `ENABLE_THREADS=OFF`","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-27 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-27 13:18:08","2023-07-27 13:18:08","created",1653613611,"On second thought, will be more complicated that I initially thought since `signals_init()` needs to be disabled too. I will merge what you have once I make a fix for the xz side. Thanks for you contributions!","",0,0,"","none","JiaT75",57,"Support build target `wasm32-unknown-unknown` in clang when `ENABLE_THREADS=OFF`","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-27 13:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-27 13:03:32","2023-07-27 13:03:32","created",1653583605,"Hi! Thanks again for the very detailed PR. I looked more into wasm signal support since at first I thought it was some sort of bug that the signal emulation did not define `sigset_t` or `sigprocmask()`. This seems intentional however so your PR is certainly needed for a successful port to web assembly.

What you have so far seems like it is enough for liblzma to build, but we also should support an xz port. This should be easy to add just by following the example of VMS in src/xz/signal.*. Since the only functions in xz that use `mythread_sigmask()` it should be enough to define signals_block() and signals_unblock() as no-ops in signal.h (and remove implementation from signal.c).

Let me know if you have questions or if something else is preventing us from building xz with wasi-sdk","",0,0,"","none","JiaT75",57,"Support build target `wasm32-unknown-unknown` in clang when `ENABLE_THREADS=OFF`","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-27 12:00:00","PullRequestEvent","ChanTsune","tukaani-project/xz","2023-07-27 12:23:13","2023-07-27 12:23:12","opened",0,"Thanks for the review #56 yesterday!

I tried another approach, could you please review this one?

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [x] Refactoring (no functional changes, no api changes)
- [x] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
```
$ mkdir build && cd build
$ cmake .. -DENABLE_THREADS=OFF
$ make liblzma
[  0%] Building C object CMakeFiles/liblzma.dir/src/common/tuklib_physmem.c.obj                                       
[  1%] Building C object CMakeFiles/liblzma.dir/src/liblzma/check/check.c.obj                                         
In file included from /xz/src/liblzma/check/check.c:13:                                                               
In file included from /xz/src/liblzma/check/check.h:16:                                                               
In file included from /xz/src/liblzma/common/common.h:17:
In file included from /xz/src/common/mythread.h:84:
/wasi-sysroot/include/signal.h:2:2: error: ""wasm lacks signal support; to enable minimal signal emulation, compile with -D_WASI_EMULATED_SIGNAL and link with -lwasi-emulated-signal""
#error ""wasm lacks signal support; to enable minimal signal emulation, \
 ^
In file included from /xz/src/liblzma/check/check.c:13:
In file included from /xz/src/liblzma/check/check.h:16:
In file included from /xz/src/liblzma/common/common.h:17:
/xz/src/common/mythread.h:87:33: error: unknown type name 'sigset_t'
mythread_sigmask(int how, const sigset_t *restrict set,
                                ^
/xz/src/common/mythread.h:88:3: error: unknown type name 'sigset_t'
                sigset_t *restrict oset)
                ^
/xz/src/common/mythread.h:90:12: error: call to undeclared function 'sigprocmask'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
        int ret = sigprocmask(how, set, oset);
                  ^
4 errors generated.
make[3]: *** [CMakeFiles/liblzma.dir/build.make:90: CMakeFiles/liblzma.dir/src/liblzma/check/check.c.obj] Error 1
make[2]: *** [CMakeFiles/Makefile2:139: CMakeFiles/liblzma.dir/all] Error 2
make[1]: *** [CMakeFiles/Makefile2:146: CMakeFiles/liblzma.dir/rule] Error 2
make: *** [Makefile:179: liblzma] Error 2
```

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 
#56 

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Changed to exclude signal functions not supported by WebAssembly using the predefined `__wasm__` macro when the build target is set to wasm32 with clang.
This change allows `liblzma` to be built with the platform-independent `wasm32-uknown-unknown` target.
I believe this exclusion will work in the same way as the build when targeting Windows, so it will minimize unexpected changes.

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

Build tested on docker

`Dockerfile`
```docker
FROM ghcr.io/webassembly/wasi-sdk:latest

RUN apt update && apt install -y git

RUN git clone https://github.com/ChanTsune/xz.git

RUN mkdir -p ./xz/build

RUN cd xz && git fetch && git switch feature/liblzma/wasm

WORKDIR /xz/build

RUN cmake .. -DENABLE_THREADS=OFF

RUN CFLAGS=""-target wasm32-unknown-unknown"" make liblzma
```

```sh
$ docker build -t xz .
```

If you need, you can see the predefined macros when targeting wasm32 in clang by following commands
```
$ clang -E -dM -target wasm32-unknown-unknown -x c /dev/null
```
or if you want to check with the latest wasi-sdk clang
```sh
$ docker image pull ghcr.io/webassembly/wasi-sdk
$ docker run --rm -i ghcr.io/webassembly/wasi-sdk clang-16 -E -dM -target wasm32-unknown-unknown -x c /dev/null
```
","",0,0,"","none","ChanTsune",57,"Support build target `wasm32-unknown-unknown` in clang when `ENABLE_THREADS=OFF`","[]","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","feature/liblzma/wasm","2a71bbca66fc6009db62c4ef9ba849e806e49ef8","master","db5019d691f980d622fb56fdcf383af2c3519c98",0,0,0,"unknown","",0,1,1,1,1,1,"",0,"","",0,0,"","","","none"
"2023-07-27 11:00:00","PullRequestEvent","ChanTsune","tukaani-project/xz","2023-07-27 11:38:41","2023-07-27 11:38:40","closed",0,"Hi! tukaani-project members!

In the process of my personal project, I made it possible to compile liblzma with WebAssembly as the target, so please use it if you like.

## Pull request checklist

Please check if your PR fulfills the following requirements:
- [x] Tests for the changes have been added (for bug fixes / features)
- [x] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [x] Build was run locally and without warnings or errors
- [x] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [x] Refactoring (no functional changes, no api changes)
- [x] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
Build failed with rust+wasi-sdk.
```
""clang"" ""-O0"" ""-ffunction-sections"" ""-fdata-sections"" ""-fPIC"" ""-g"" ""-fno-omit-frame-pointer"" ""--target=wasm32-wasi"" ""--sysroot"" ""/wasi-sdk-20.0/share/wasi-sysroot"" ""-D_WASI_EMULATED_SIGNAL"" ""-I"" ""xz-5.2/src/liblzma/api"" ""-I"" ""xz-5.2/src/liblzma/lzma"" ""-I"" ""xz-5.2/src/liblzma/lz"" ""-I"" ""xz-5.2/src/liblzma/check"" ""-I"" ""xz-5.2/src/liblzma/simple"" ""-I"" ""xz-5.2/src/liblzma/delta"" ""-I"" ""xz-5.2/src/liblzma/common"" ""-I"" ""xz-5.2/src/liblzma/rangecoder"" ""-I"" ""xz-5.2/src/common"" ""-I"" ""/xz2-rs/lzma-sys"" ""-std=c99"" ""-pthread"" ""-DHAVE_CONFIG_H=1"" ""-o"" ""/xz2-rs/target/wasm32-wasi/debug/build/lzma-sys-7bbeecf3b4119da3/out/xz-5.2/src/liblzma/check/check.o"" ""-c"" ""xz-5.2/src/liblzma/check/check.c""
  cargo:warning=In file included from xz-5.2/src/liblzma/check/check.c:13:
  cargo:warning=In file included from xz-5.2/src/liblzma/check/check.h:16:
  cargo:warning=In file included from xz-5.2/src/liblzma/common/common.h:17:
  cargo:warning=xz-5.2/src/common/mythread.h:146:12: warning: call to undeclared function 'pthread_sigmask'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
  cargo:warning=        int ret = pthread_sigmask(how, set, oset);
  cargo:warning=                  ^
  cargo:warning=xz-5.2/src/common/mythread.h:160:2: warning: call to undeclared function 'sigfillset'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
  cargo:warning=        sigfillset(&all);
  cargo:warning=        ^
  cargo:warning=xz-5.2/src/common/mythread.h:162:19: error: use of undeclared identifier 'SIG_SETMASK'
  cargo:warning=        mythread_sigmask(SIG_SETMASK, &all, &old);
  cargo:warning=                         ^
  cargo:warning=xz-5.2/src/common/mythread.h:164:19: error: use of undeclared identifier 'SIG_SETMASK'
  cargo:warning=        mythread_sigmask(SIG_SETMASK, &old, NULL);
  cargo:warning=                         ^
  cargo:warning=2 warnings and 2 errors generated.
  exit status: 1
```

<!-- Related issue this PR addresses, if applicable -->
<!-- Related Issue URL: -->

## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- Optimize to include `mythread.h` only where necessary
- Build liblzma with `ENABLE_THREADS=OFF` now passes with the latest [wasi-sdk](https://github.com/WebAssembly/wasi-sdk/releases/tag/wasi-sdk-20)

## Does this introduce a breaking change?

- [ ] Yes
- [x] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","ChanTsune",56,"liblzma: Support wasi-sdk with `ENABLE_THREADS=OFF` option","[]","closed",0,"","[]",5,"NONE","2023-07-27 11:38:40","1970-01-01 00:00:00","ad304d8377ec5e9c978470a430c2c76acd34d30d","[]","[]","feature/optimize-include","e3d1c352ff5539c9047edf12b3dd1f1f2ca84538","master","db5019d691f980d622fb56fdcf383af2c3519c98",0,1,0,"unstable","",0,0,1,2,1,3,"",0,"","",0,0,"","","","none"
"2023-07-26 14:00:00","IssueCommentEvent","ChanTsune","tukaani-project/xz","2023-07-26 14:56:57","2023-07-26 14:56:57","created",1651982049,"I am using the latest WASI-SDK.
WASI is trying to provide a project that provides a POSIX compatible API as WASIX but it seems it's not perfect yet.

If you can use Docker, I think you can reproduce the equivalent environment with the following `Dockerfile`

```dockerfile
FROM ghcr.io/webassembly/wasi-sdk:latest

RUN apt update && apt install -y git

RUN git clone https://github.com/tukaani-project/xz.git

RUN ./xz/build-aux/ci_build.sh -b cmake -d threads,shared -p all

```

```sh
$ docker build -t xz .
```
","",0,0,"","none","ChanTsune",56,"liblzma: Support wasi-sdk with `ENABLE_THREADS=OFF` option","[]","open",0,"","[]",4,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 14:00:00","IssueCommentEvent","ChanTsune","tukaani-project/xz","2023-07-26 14:33:22","2023-07-26 14:33:21","created",1651932297,"Thanks for review!

Sorry. The error message I pasted was the wrong one

This is correct
```
  running: ""clang"" ""-O0"" ""-ffunction-sections"" ""-fdata-sections"" ""-fPIC"" ""-g"" ""-fno-omit-frame-pointer"" ""--target=wasm32-wasi"" ""--sysroot"" ""/Users/kaihatsutarou/Downloads/wasi-sdk-20.0/share/wasi-sysroot"" ""-D_WASI_EMULATED_SIGNAL"" ""-I"" ""xz-5.2/src/liblzma/api"" ""-I"" ""xz-5.2/src/liblzma/lzma"" ""-I"" ""xz-5.2/src/liblzma/lz"" ""-I"" ""xz-5.2/src/liblzma/check"" ""-I"" ""xz-5.2/src/liblzma/simple"" ""-I"" ""xz-5.2/src/liblzma/delta"" ""-I"" ""xz-5.2/src/liblzma/common"" ""-I"" ""xz-5.2/src/liblzma/rangecoder"" ""-I"" ""xz-5.2/src/common"" ""-I"" ""/Users/kaihatsutarou/Documents/GitHub/xz2-rs/lzma-sys"" ""-std=c99"" ""-pthread"" ""-DHAVE_CONFIG_H=1"" ""-o"" ""/Users/kaihatsutarou/Documents/GitHub/xz2-rs/target/wasm32-wasi/debug/build/lzma-sys-7bbeecf3b4119da3/out/xz-5.2/src/liblzma/check/check.o"" ""-c"" ""xz-5.2/src/liblzma/check/check.c""
  cargo:warning=In file included from xz-5.2/src/liblzma/check/check.c:13:
  cargo:warning=In file included from xz-5.2/src/liblzma/check/check.h:16:
  cargo:warning=In file included from xz-5.2/src/liblzma/common/common.h:17:
  cargo:warning=xz-5.2/src/common/mythread.h:87:33: error: unknown type name 'sigset_t'
  cargo:warning=mythread_sigmask(int how, const sigset_t *restrict set,
  cargo:warning=                                ^
  cargo:warning=xz-5.2/src/common/mythread.h:88:3: error: unknown type name 'sigset_t'
  cargo:warning=                sigset_t *restrict oset)
  cargo:warning=                ^
  cargo:warning=xz-5.2/src/common/mythread.h:90:12: warning: call to undeclared function 'sigprocmask'; ISO C99 and later do not support implicit function declarations [-Wimplicit-function-declaration]
  cargo:warning=        int ret = sigprocmask(how, set, oset);
  cargo:warning=                  ^
  cargo:warning=1 warning and 2 errors generated.
  exit status: 1
```
","",0,0,"","none","ChanTsune",56,"liblzma: Support wasi-sdk with `ENABLE_THREADS=OFF` option","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 14:00:00","IssueCommentEvent","JiaT75","tukaani-project/xz","2023-07-26 14:15:35","2023-07-26 14:15:35","created",1651896648,"Hi! Thanks for the PR. Unfortunatly, I do not think this PR solves a problem. I am guessing the issue is with your build setup instead. If you look at `mythread.h`, the functions referenced in your error message are in the `#elif defined(MYTHREAD_POSIX)` block and should be removed by the preprocessor.

If you are using our `CMakeLists.txt`, then setting `ENABLE_THREADS=OFF` will ensure `MYTHREAD_POSIX` is never added to the compile definitions. Its possible a `make clean` or removing the `CMakeCache.txt` could solve your problem.

Compiling liblzma with WebAssembly sounds like a great project though!","",0,0,"","none","JiaT75",56,"liblzma: Support wasi-sdk with `ENABLE_THREADS=OFF` option","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-26 12:36:42","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-26 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-26 12:28:59","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-26 02:00:00","WatchEvent","flumpus-dev","tukaani-project/xz","2023-07-26 02:26:42","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 02:00:00","WatchEvent","flumpus-dev","tukaani-project/xz","2023-07-26 02:26:44","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-26 00:00:00","ForkEvent","ChanTsune","tukaani-project/xz","2023-07-26 00:51:04","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-25 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-25 13:26:07","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-25 07:00:00","WatchEvent","Dlanis","tukaani-project/xz","2023-07-25 07:24:54","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-24 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-07-24 15:35:19","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-22 13:00:00","WatchEvent","r3dapple","tukaani-project/xz","2023-07-22 13:09:08","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-22 10:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-22 10:34:25","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-22 10:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-07-22 10:31:45","2023-07-22 10:31:44","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [ ] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [X] Build related changes
- [ ] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
No Windows CI at all.

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: https://github.com/tukaani-project/xz/issues/18


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->

- autotools build set for Windows added
- build is using msys2 with UCRT64 toolchain

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->
CMake build part is not provided as part of this PR.

Additional changes:
* bumped checkout action to v3 (not really critical, but I did while trying to understand build failure)
* fixed ""false positive"" uninitialized warning with empty in stream_encoder.c
* fixed missing include in memcmplen.h, because this include is not provided if --disable-threads is requested for build

Windows build run is very slow (comparing to others), but I don't think it could be somehow improved.","",0,0,"","none","arixmkii",34,"Enable CI on Windows hosts for autotools","['CI/CD']","closed",0,"","[]",2,"NONE","2023-07-22 10:31:44","1970-01-01 00:00:00","e3805b4545410a305e2ef15bf8aa70b68cff64f9","[]","[]","win-ci","e84967a34eb5065e010bafe56042a7de648a2edf","master","fb9c50f38a17bf37581de4034b36c8df8ec90a87",0,0,0,"unknown","",5,0,1,96,6,3,"",0,"","",0,0,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:39:08","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:31:44","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,1,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:28:46","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-22 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-22 10:25:16","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:31:27","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:06:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:05:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 18:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 18:01:55","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:56:04","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:53:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:50:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 17:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 17:29:02","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:52:23","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:45:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:25:31","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 15:42:32","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:19:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:21:43","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:31:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:57:09","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:53:37","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 14:59:39","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:42:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:45:25","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:51:11","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 13:56:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/CI","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-21 12:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-07-21 12:59:15","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-21 10:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-21 10:11:10","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-20 14:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-20 14:12:22","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-20 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-20 13:24:56","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",13,13,"","","","none"
"2023-07-18 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-18 15:25:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-18 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-07-18 14:42:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/v5.4","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",33,33,"","","","none"
"2023-07-18 14:00:00","PushEvent","Larhzu","tukaani-project/xz","2023-07-18 14:42:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-18 13:00:00","WatchEvent","ashish-2022","tukaani-project/xz","2023-07-18 13:44:53","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-17 16:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-17 16:53:18","1970-01-01 00:00:00","none",0,"","",0,0,"docs_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-17 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 16:52:21","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",3,2,"","","","none"
"2023-07-17 16:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 16:07:19","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/docs_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-17 15:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-07-17 15:35:02","1970-01-01 00:00:00","none",0,"","",0,0,"filter_to_str_cli","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-17 15:00:00","PullRequestEvent","JiaT75","tukaani-project/xz","2023-07-17 15:34:56","2023-07-17 15:34:55","closed",0,"## Pull request checklist

Please check if your PR fulfills the following requirements:
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been reviewed and added / updated if needed (for bug fixes / features)
- [X] Build was run locally and without warnings or errors
- [X] All previous and new tests pass


## Pull request type

<!-- Please try to limit your pull request to one type, submit multiple
pull requests if needed. --> 

Please check the type of change your PR introduces:
- [ ] Bugfix
- [X] Feature
- [ ] Code style update (formatting, renaming, typo fix)
- [ ] Refactoring (no functional changes, no api changes)
- [ ] Build related changes
- [X] Documentation content changes
- [ ] Other (please describe): 


## What is the current behavior?
<!-- Please describe the current behavior that you are modifying. -->
xz does not have an option to convert a single string to a full filter chain

<!-- Related issue this PR addresses, if applicable -->
Related Issue URL: 


## What is the new behavior?
<!-- Please describe the behavior or changes that are being added by this
PR. -->
- New --filters command line option
- --long-help update
- man page update

## Does this introduce a breaking change?

- [ ] Yes
- [X] No

<!-- If this introduces a breaking change, please describe the impact and
migration path for existing applications below. -->


## Other information

<!-- Any other information that is important to this PR. -->","",0,0,"","none","JiaT75",12,"Filter to string command line interface","['5.5.0']","closed",0,"","[]",0,"MEMBER","2023-07-17 15:34:55","2023-07-17 15:34:55","f99e2e4e53b7ea89e4eef32ddd4882e0416357c9","[]","[]","filter_to_str_cli","2d1178e3cab84d6de39b4d279415305fd7c2ec92","master","2c189bb00af73dc7ba1a67a9d274d5be03ee3a88",1,0,0,"unknown","JiaT75",0,0,23,956,258,7,"",0,"","",0,0,"","","","none"
"2023-07-17 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 15:53:45","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/docs_update","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",25,2,"","","","none"
"2023-07-17 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-17 15:34:57","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",23,23,"","","","none"
"2023-07-16 21:00:00","ForkEvent","hipunk","tukaani-project/xz","2023-07-16 21:12:39","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-16 21:00:00","WatchEvent","hipunk","tukaani-project/xz","2023-07-16 21:11:55","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-15 13:00:00","WatchEvent","AiLovesAi","tukaani-project/xz","2023-07-15 13:36:07","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-14 15:00:00","CreateEvent","JiaT75","tukaani-project/xz","2023-07-14 15:24:25","1970-01-01 00:00:00","none",0,"","",0,0,"docs_update","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-14 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-14 13:36:33","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-14 12:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-14 12:45:54","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",22,22,"","","","none"
"2023-07-14 07:00:00","ForkEvent","xiedeacc","tukaani-project/xz","2023-07-14 07:21:33","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-13 15:37:14","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-13 15:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-13 15:35:50","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",4,4,"","","","none"
"2023-07-13 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-13 13:59:34","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/filter_to_str_cli","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",38,22,"","","","none"
"2023-07-13 02:00:00","WatchEvent","TaYaKi71751","tukaani-project/xz","2023-07-13 02:29:53","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-10 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-10 13:13:06","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",1,1,"","","","none"
"2023-07-10 12:00:00","CommitCommentEvent","JiaT75","tukaani-project/xz","2023-07-10 12:33:14","2023-07-10 12:33:14","none",121162847,"I saw it was valid in C23 during my searches, but I probably should have mentioned this in my commit message. Oh well, anyone reading our commit messages or Changelog should hopefully know we use C99 :)","",0,0,"","none","JiaT75",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"17f8844e6fc355abf997d77637a7447c4f7bbcbd","",0,0,"","","","none"
"2023-07-09 18:00:00","WatchEvent","k7moorthi","tukaani-project/xz","2023-07-09 18:57:22","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-09 02:00:00","CommitCommentEvent","thesamesam","tukaani-project/xz","2023-07-09 02:57:07","2023-07-09 02:57:07","none",121052100,"Not that this really matters, but FYI, this is valid in C23.

(https://thephd.dev/ever-closer-c23-improvements#consistent-warningless-and-intuitive-initialization-with--)","",0,0,"","none","thesamesam",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"17f8844e6fc355abf997d77637a7447c4f7bbcbd","",0,0,"","","","none"
"2023-07-08 13:00:00","PushEvent","JiaT75","tukaani-project/xz","2023-07-08 13:39:20","1970-01-01 00:00:00","none",0,"","",0,0,"refs/heads/master","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",2,2,"","","","none"
"2023-07-08 07:00:00","WatchEvent","TheReal3rd","tukaani-project/xz-java","2023-07-08 07:59:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-08 04:00:00","WatchEvent","ZeroMemes","tukaani-project/xz-java","2023-07-08 04:04:51","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-08 04:00:00","WatchEvent","ZeroMemes","tukaani-project/xz-java","2023-07-08 04:07:30","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-08 04:00:00","WatchEvent","ZeroMemes","tukaani-project/xz","2023-07-08 04:06:48","1970-01-01 00:00:00","started",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-06 17:00:00","ForkEvent","cassyjay645","tukaani-project/xz-java","2023-07-06 17:07:19","1970-01-01 00:00:00","none",0,"","",0,0,"","none","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-05 10:00:00","IssueCommentEvent","kostadinsh","tukaani-project/xz","2023-07-05 10:23:43","2023-07-05 10:23:42","created",1621472811,"Solved by https://github.com/rui314/mold/commit/4b42f38257068f2a3f0dbb102904519d85c9dcb2","",0,0,"","none","kostadinsh",55,"[Bug]: warnings about missing symbols when building with the mold linker and lto","['bug']","closed",0,"","[]",3,"NONE","2023-07-05 10:23:42","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-05 10:00:00","IssuesEvent","kostadinsh","tukaani-project/xz","2023-07-05 10:23:43","2023-07-05 10:23:43","closed",0,"### Describe the bug

When building with the mold linker and -flto added to CFLAGS, this package seems to have some issues in the linking phase regarding symbols not being found. I've turned mold's warnings into errors with `-Wl,--fatal-warnings`, so I can catch them more easily.

GCC version used is gcc (Gentoo 13.1.1_p20230527 p3) 13.1.1 20230527
Mold is built from git at commit `b04aba89d3a1931470983212925443e7aefca1e1`

Steps to reproduce: 
1. Clone this repo and cd into the xz folder
2. run `export CFLAGS=""-O2 -pipe -flto=auto""` and `export LDFLAGS=""-fuse-ld=mold -Wl,--fatal-warnings""`
3. run `autoreconf -vfi`
4. run `./configure --enable-threads --prefix=/usr`
5. build the package with `make V=1`

In the log output I am only going to only add the last few lines of the log as I think the entire log would be way too much, and then add the full logs from `./configure` and `make` as an attachment

[xz-configure.log](https://github.com/tukaani-project/xz/files/11935128/xz-configure.log)
[xz-make.log](https://github.com/tukaani-project/xz/files/11935130/xz-make.log)


### Version

commit 66bdcfa85fef2911cc80f5f30fed3f9610faccb4

### Operating System

Gentoo Linux

### Relevant log output

```shell
libtool: link: gcc -shared  -fPIC -DPIC  .libs/liblzma_la-tuklib_physmem.o .libs/liblzma_la-tuklib_cpucores.o .libs/liblzma_la-common.o .libs/liblzma_la-block_util.o .libs/liblzma_la-easy_preset.o .libs/liblzma_la-filter_common.o .libs/liblzma_la-hardware_physmem.o .libs/liblzma_la-index.o .libs/liblzma_la-stream_flags_common.o .libs/liblzma_la-string_conversion.o .libs/liblzma_la-vli_size.o .libs/liblzma_la-hardware_cputhreads.o .libs/liblzma_la-outqueue.o .libs/liblzma_la-alone_encoder.o .libs/liblzma_la-block_buffer_encoder.o .libs/liblzma_la-block_encoder.o .libs/liblzma_la-block_header_encoder.o .libs/liblzma_la-easy_buffer_encoder.o .libs/liblzma_la-easy_encoder.o .libs/liblzma_la-easy_encoder_memusage.o .libs/liblzma_la-filter_buffer_encoder.o .libs/liblzma_la-filter_encoder.o .libs/liblzma_la-filter_flags_encoder.o .libs/liblzma_la-index_encoder.o .libs/liblzma_la-stream_buffer_encoder.o .libs/liblzma_la-stream_encoder.o .libs/liblzma_la-stream_flags_encoder.o .libs/liblzma_la-vli_encoder.o .libs/liblzma_la-stream_encoder_mt.o .libs/liblzma_la-microlzma_encoder.o .libs/liblzma_la-alone_decoder.o .libs/liblzma_la-auto_decoder.o .libs/liblzma_la-block_buffer_decoder.o .libs/liblzma_la-block_decoder.o .libs/liblzma_la-block_header_decoder.o .libs/liblzma_la-easy_decoder_memusage.o .libs/liblzma_la-file_info.o .libs/liblzma_la-filter_buffer_decoder.o .libs/liblzma_la-filter_decoder.o .libs/liblzma_la-filter_flags_decoder.o .libs/liblzma_la-index_decoder.o .libs/liblzma_la-index_hash.o .libs/liblzma_la-stream_buffer_decoder.o .libs/liblzma_la-stream_decoder.o .libs/liblzma_la-stream_flags_decoder.o .libs/liblzma_la-vli_decoder.o .libs/liblzma_la-stream_decoder_mt.o .libs/liblzma_la-microlzma_decoder.o .libs/liblzma_la-lzip_decoder.o .libs/liblzma_la-check.o .libs/liblzma_la-crc32_table.o .libs/liblzma_la-crc32_fast.o .libs/liblzma_la-crc64_table.o .libs/liblzma_la-crc64_fast.o .libs/liblzma_la-sha256.o .libs/liblzma_la-lz_encoder.o .libs/liblzma_la-lz_encoder_mf.o .libs/liblzma_la-lz_decoder.o .libs/liblzma_la-lzma_encoder_presets.o .libs/liblzma_la-lzma_encoder.o .libs/liblzma_la-lzma_encoder_optimum_fast.o .libs/liblzma_la-lzma_encoder_optimum_normal.o .libs/liblzma_la-fastpos_table.o .libs/liblzma_la-lzma_decoder.o .libs/liblzma_la-lzma2_encoder.o .libs/liblzma_la-lzma2_decoder.o .libs/liblzma_la-price_table.o .libs/liblzma_la-delta_common.o .libs/liblzma_la-delta_encoder.o .libs/liblzma_la-delta_decoder.o .libs/liblzma_la-simple_coder.o .libs/liblzma_la-simple_encoder.o .libs/liblzma_la-simple_decoder.o .libs/liblzma_la-x86.o .libs/liblzma_la-powerpc.o .libs/liblzma_la-ia64.o .libs/liblzma_la-arm.o .libs/liblzma_la-armthumb.o .libs/liblzma_la-arm64.o .libs/liblzma_la-sparc.o   -lpthread  -O2 -flto=auto -Wl,--version-script=../../src/liblzma/liblzma_linux.map -fuse-ld=mold -Wl,--fatal-warnings   -pthread -Wl,-soname -Wl,liblzma.so.5 -o .libs/liblzma.so.5.5.99
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_block_uncomp_encode`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_cputhreads`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_get_progress`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_stream_encoder_mt`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_stream_encoder_mt_memusage`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.1.2alpha` to symbol `lzma_stream_encoder_mt`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.1.2alpha` to symbol `lzma_stream_encoder_mt_memusage`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_block_uncomp_encode`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_cputhreads`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_get_progress`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_stream_encoder_mt`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_stream_encoder_mt_memusage`: symbol not found
collect2: error: ld returned 1 exit status
make[4]: *** [Makefile:963: liblzma.la] Error 1
make[4]: Leaving directory '/home/kostadin/xz/src/liblzma'
make[3]: *** [Makefile:1747: all-recursive] Error 1
make[3]: Leaving directory '/home/kostadin/xz/src/liblzma'
make[2]: *** [Makefile:429: all-recursive] Error 1
make[2]: Leaving directory '/home/kostadin/xz/src'
make[1]: *** [Makefile:624: all-recursive] Error 1
make[1]: Leaving directory '/home/kostadin/xz'
make: *** [Makefile:493: all] Error 2
```
","",0,0,"","none","kostadinsh",55,"[Bug]: warnings about missing symbols when building with the mold linker and lto","['bug']","closed",0,"","[]",3,"NONE","2023-07-05 10:23:42","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-03 11:00:00","IssueCommentEvent","kostadinsh","tukaani-project/xz","2023-07-03 11:52:59","2023-07-03 11:52:59","created",1618075362,"I am testing a git snapshot of mold at the commit mentioned in the original report. And you are indeed right it affects other packages too, I am reporting bugs for those too. Thanks for taking your time and testing this. Going to open a bug on mold's tracker and link it here. ","",0,0,"","none","kostadinsh",55,"[Bug]: warnings about missing symbols when building with the mold linker and lto","['bug']","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-03 11:00:00","IssueCommentEvent","Larhzu","tukaani-project/xz","2023-07-03 11:40:18","2023-07-03 11:40:18","created",1618043803,"It works with these:
  - GCC `-fuse-ld=bfd`
  - GCC `-fuse-ld=gold`
  - Clang `-fuse-ld=lld`

In these cases the symbols are there:

```
$ readelf -W --dyn-syms src/liblzma/.libs/liblzma.so.5 \
    | grep lzma_stream_encoder_mt_memusage
   127: 000000000000db90   222 FUNC    GLOBAL DEFAULT   13 lzma_stream_encoder_mt_memusage@@XZ_5.2
   128: 000000000000db90   222 FUNC    GLOBAL DEFAULT   13 lzma_stream_encoder_mt_memusage@XZ_5.1.2alpha
   129: 000000000000db90   222 FUNC    GLOBAL DEFAULT   13 lzma_stream_encoder_mt_memusage@XZ_5.2.2
```

Omitting `-Wl,--fatal-warnings` makes the build succeed with `-fuse-ld=mold` but the symbols are wrong:

```
$ readelf -W --dyn-syms src/liblzma/.libs/liblzma.so.5 \
    | grep lzma_stream_encoder_mt_memusage
    49: 000000000001c690   222 FUNC    GLOBAL DEFAULT   20 lzma_stream_encoder_mt_memusage@@XZ_5.2
    56: 000000000001c690   222 FUNC    GLOBAL DEFAULT   20 lzma_stream_encoder_mt_memusage@XZ_5.2.2@XZ_5.2.2
   104: 000000000001c690   222 FUNC    GLOBAL DEFAULT   20 lzma_stream_encoder_mt_memusage@XZ_5.1.2alpha@XZ_5.1.2alpha
```

Note how the non-default symbols (the last two) have a duplicated suffix. It happens with both GCC and Clang with `-fuse-ld=mold`, mold version 1.11.0. Disabling LTO makes it work. This makes me wonder if mold has a problem when LTO and symbol versioning are used at the same time.

Can you test a git snapshot of mold and if it still doesn't work then discuss it with the mold developers? As far as I understand it, the symbol versioning in liblzma doesn't do anything weird so the problem may affect many other packages too.

Thanks!
","",0,0,"","none","Larhzu",55,"[Bug]: warnings about missing symbols when building with the mold linker and lto","['bug']","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-07-03 09:00:00","IssuesEvent","kostadinsh","tukaani-project/xz","2023-07-03 09:13:03","2023-07-03 09:13:02","opened",0,"### Describe the bug

When building with the mold linker and -flto added to CFLAGS, this package seems to have some issues in the linking phase regarding symbols not being found. I've turned mold's warnings into errors with `-Wl,--fatal-warnings`, so I can catch them more easily.

GCC version used is gcc (Gentoo 13.1.1_p20230527 p3) 13.1.1 20230527
Mold is built from git at commit `b04aba89d3a1931470983212925443e7aefca1e1`

Steps to reproduce: 
1. Clone this repo and cd into the xz folder
2. run `export CFLAGS=""-O2 -pipe -flto=auto""` and `export LDFLAGS=""-fuse-ld=mold -Wl,--fatal-warnings""`
3. run `autoreconf -vfi`
4. run `./configure --enable-threads --prefix=/usr`
5. build the package with `make V=1`

In the log output I am only going to only add the last few lines of the log as I think the entire log would be way too much, and then add the full logs from `./configure` and `make` as an attachment

[xz-configure.log](https://github.com/tukaani-project/xz/files/11935128/xz-configure.log)
[xz-make.log](https://github.com/tukaani-project/xz/files/11935130/xz-make.log)


### Version

commit 66bdcfa85fef2911cc80f5f30fed3f9610faccb4

### Operating System

Gentoo Linux

### Relevant log output

```shell
libtool: link: gcc -shared  -fPIC -DPIC  .libs/liblzma_la-tuklib_physmem.o .libs/liblzma_la-tuklib_cpucores.o .libs/liblzma_la-common.o .libs/liblzma_la-block_util.o .libs/liblzma_la-easy_preset.o .libs/liblzma_la-filter_common.o .libs/liblzma_la-hardware_physmem.o .libs/liblzma_la-index.o .libs/liblzma_la-stream_flags_common.o .libs/liblzma_la-string_conversion.o .libs/liblzma_la-vli_size.o .libs/liblzma_la-hardware_cputhreads.o .libs/liblzma_la-outqueue.o .libs/liblzma_la-alone_encoder.o .libs/liblzma_la-block_buffer_encoder.o .libs/liblzma_la-block_encoder.o .libs/liblzma_la-block_header_encoder.o .libs/liblzma_la-easy_buffer_encoder.o .libs/liblzma_la-easy_encoder.o .libs/liblzma_la-easy_encoder_memusage.o .libs/liblzma_la-filter_buffer_encoder.o .libs/liblzma_la-filter_encoder.o .libs/liblzma_la-filter_flags_encoder.o .libs/liblzma_la-index_encoder.o .libs/liblzma_la-stream_buffer_encoder.o .libs/liblzma_la-stream_encoder.o .libs/liblzma_la-stream_flags_encoder.o .libs/liblzma_la-vli_encoder.o .libs/liblzma_la-stream_encoder_mt.o .libs/liblzma_la-microlzma_encoder.o .libs/liblzma_la-alone_decoder.o .libs/liblzma_la-auto_decoder.o .libs/liblzma_la-block_buffer_decoder.o .libs/liblzma_la-block_decoder.o .libs/liblzma_la-block_header_decoder.o .libs/liblzma_la-easy_decoder_memusage.o .libs/liblzma_la-file_info.o .libs/liblzma_la-filter_buffer_decoder.o .libs/liblzma_la-filter_decoder.o .libs/liblzma_la-filter_flags_decoder.o .libs/liblzma_la-index_decoder.o .libs/liblzma_la-index_hash.o .libs/liblzma_la-stream_buffer_decoder.o .libs/liblzma_la-stream_decoder.o .libs/liblzma_la-stream_flags_decoder.o .libs/liblzma_la-vli_decoder.o .libs/liblzma_la-stream_decoder_mt.o .libs/liblzma_la-microlzma_decoder.o .libs/liblzma_la-lzip_decoder.o .libs/liblzma_la-check.o .libs/liblzma_la-crc32_table.o .libs/liblzma_la-crc32_fast.o .libs/liblzma_la-crc64_table.o .libs/liblzma_la-crc64_fast.o .libs/liblzma_la-sha256.o .libs/liblzma_la-lz_encoder.o .libs/liblzma_la-lz_encoder_mf.o .libs/liblzma_la-lz_decoder.o .libs/liblzma_la-lzma_encoder_presets.o .libs/liblzma_la-lzma_encoder.o .libs/liblzma_la-lzma_encoder_optimum_fast.o .libs/liblzma_la-lzma_encoder_optimum_normal.o .libs/liblzma_la-fastpos_table.o .libs/liblzma_la-lzma_decoder.o .libs/liblzma_la-lzma2_encoder.o .libs/liblzma_la-lzma2_decoder.o .libs/liblzma_la-price_table.o .libs/liblzma_la-delta_common.o .libs/liblzma_la-delta_encoder.o .libs/liblzma_la-delta_decoder.o .libs/liblzma_la-simple_coder.o .libs/liblzma_la-simple_encoder.o .libs/liblzma_la-simple_decoder.o .libs/liblzma_la-x86.o .libs/liblzma_la-powerpc.o .libs/liblzma_la-ia64.o .libs/liblzma_la-arm.o .libs/liblzma_la-armthumb.o .libs/liblzma_la-arm64.o .libs/liblzma_la-sparc.o   -lpthread  -O2 -flto=auto -Wl,--version-script=../../src/liblzma/liblzma_linux.map -fuse-ld=mold -Wl,--fatal-warnings   -pthread -Wl,-soname -Wl,liblzma.so.5 -o .libs/liblzma.so.5.5.99
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_block_uncomp_encode`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_cputhreads`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_get_progress`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_stream_encoder_mt`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2` to symbol `lzma_stream_encoder_mt_memusage`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.1.2alpha` to symbol `lzma_stream_encoder_mt`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.1.2alpha` to symbol `lzma_stream_encoder_mt_memusage`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_block_uncomp_encode`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_cputhreads`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_get_progress`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_stream_encoder_mt`: symbol not found
mold: error: ../../src/liblzma/liblzma_linux.map: cannot assign version `XZ_5.2.2` to symbol `lzma_stream_encoder_mt_memusage`: symbol not found
collect2: error: ld returned 1 exit status
make[4]: *** [Makefile:963: liblzma.la] Error 1
make[4]: Leaving directory '/home/kostadin/xz/src/liblzma'
make[3]: *** [Makefile:1747: all-recursive] Error 1
make[3]: Leaving directory '/home/kostadin/xz/src/liblzma'
make[2]: *** [Makefile:429: all-recursive] Error 1
make[2]: Leaving directory '/home/kostadin/xz/src'
make[1]: *** [Makefile:624: all-recursive] Error 1
make[1]: Leaving directory '/home/kostadin/xz'
make: *** [Makefile:493: all] Error 2
```
","",0,0,"","none","kostadinsh",55,"[Bug]: warnings about missing symbols when building with the mold linker and lto","['bug']","open",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-30 09:00:00","IssueCommentEvent","cblc","tukaani-project/xz","2023-06-30 09:13:36","2023-06-30 09:13:35","created",1614372839,"Everything clear, I think. I have created this batch file which, AFAIK, runs all the tests that can be run from cross-compilation.

There's an extra step, though, before running this batch file, and it's that you must copy the complete `files` folder (located under the `tests` folder in the source code) into the built `tests` folder, for the script to run:

```
test_bcj_exact_size.exe || exit /b
test_block_header.exe || exit /b
test_check.exe || exit /b
test_filter_flags.exe || exit /b
test_filter_str.exe || exit /b
test_hardware.exe || exit /b
test_index.exe || exit /b
test_index_hash.exe || exit /b
test_lzip_decoder.exe || exit /b
test_memlimit.exe || exit /b
test_stream_flags.exe || exit /b
test_vli.exe || exit /b
```
","",0,0,"","none","cblc",54,"[Feature Request]: Copying/installing the built 'make check' suite to a directory","[]","open",0,"","[]",3,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-29 17:00:00","IssueCommentEvent","cblc","tukaani-project/xz","2023-06-29 17:00:19","2023-06-29 17:00:18","created",1613536264,"Great, thank you very much!

Does the test suite consist in invoking the following executables, or do I need to invoke them in some special way, or are there perhaps other scripts to run? (these executables are what I get when building to 32bit Windows with mingw-w64)

```
tests/create_compress_files.exe	tests/test_check.exe		tests/test_hardware.exe		tests/test_lzip_decoder.exe	tests/test_vli.exe
tests/test_bcj_exact_size.exe	tests/test_filter_flags.exe	tests/test_index.exe		tests/test_memlimit.exe
tests/test_block_header.exe	tests/test_filter_str.exe	tests/test_index_hash.exe	tests/test_stream_flags.exe
```","",0,0,"","none","cblc",54,"[Feature Request]: Copying/installing the built 'make check' suite to a directory","[]","open",0,"","[]",2,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-29 16:00:00","IssueCommentEvent","thesamesam","tukaani-project/xz","2023-06-29 16:53:10","2023-06-29 16:53:09","created",1613527488,"Please see the discussion in https://github.com/tukaani-project/xz/pull/52.","",0,0,"","none","thesamesam",54,"[Feature Request]: Copying/installing the built 'make check' suite to a directory","[]","open",0,"","[]",1,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
"2023-06-29 13:00:00","DeleteEvent","JiaT75","tukaani-project/xz","2023-06-29 13:17:11","1970-01-01 00:00:00","none",0,"","",0,0,"CI","branch","",0,"","[]","none",0,"","[]",0,"NONE","1970-01-01 00:00:00","1970-01-01 00:00:00","","[]","[]","","","","",0,0,0,"unknown","",0,0,0,0,0,0,"",0,"","",0,0,"","","","none"
